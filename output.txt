Triple: ['__subject__ Aarhus Airport __predicate__ cityServed __object__ Aarhus, Denmark']
Text: ['The Aarhus is the airport of Aarhus, Denmark.']
Predicate: cityServed

Triple: ['__subject__ Aarhus Airport __predicate__ cityServed __object__ Aarhus']
Text: ['Aarhus airport serves the city of Aarhus.']
Predicate: cityServed

Triple: ['__subject__ Aarhus Airport __predicate__ elevationAboveTheSeaLevel __object__ 25.0']
Text: ['Aarhus Airport is 25 metres above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Aarhus Airport __predicate__ location __object__ Tirstrup']
Text: ['Aarhus Airport is located in Tirstrup.']
Predicate: location

Triple: ['__subject__ Aarhus Airport __predicate__ operatingOrganisation __object__ Aarhus Lufthavn A/S']
Text: ['Aarhus Airport is operated by Aarhus Lufthavn A/S.']
Predicate: operatingOrganisation

Triple: ['__subject__ Aarhus Airport __predicate__ operatingOrganisation __object__ Aktieselskab']
Text: ['Aktieselskab is the operating organisation for Aarhus Airport.']
Predicate: operatingOrganisation

Triple: ['__subject__ Aarhus Airport __predicate__ runwayLength __object__ 2776.0']
Text: ['Aarhus Airport runway length is 2776.0.']
Predicate: runwayLength

Triple: ['__subject__ Aarhus Airport __predicate__ runwayLength __object__ 2777.0']
Text: ['The runway length at Aarhus Airport is 2777.0 meters.']
Predicate: runwayLength

Triple: ['__subject__ Aarhus Airport __predicate__ runwayName __object__ 10L/28R']
Text: ['Aarhus Airport runway name is 10L/28R.']
Predicate: runwayName

Triple: ['__subject__ Aarhus Airport __predicate__ runwayName __object__ 10R/28L']
Text: ['The runway name at Aarhus Airport is "10R/28L".']
Predicate: runwayName

Triple: ['__subject__ Abilene, Texas __predicate__ country __object__ United_States']
Text: ['Abilene, Texas is in the United States.']
Predicate: country

Triple: ['__subject__ Abilene, Texas __predicate__ isPartOf __object__ Jones_County,_Texas']
Text: ['Abilene, Texas is part of Jones County, Texas.']
Predicate: isPartOf

Triple: ['__subject__ Abilene, Texas __predicate__ isPartOf __object__ Taylor_County,_Texas']
Text: ['Abilene, Texas is part of Taylor County, Texas.']
Predicate: isPartOf

Triple: ['__subject__ Abilene, Texas __predicate__ isPartOf __object__ Texas']
Text: ['Abilene, Texas is part of Texas.']
Predicate: isPartOf

Triple: ['__subject__ Abilene Regional Airport __predicate__ 1stRunwayLengthFeet __object__ 3678']
Text: ['The length of the 1st runway at Abilene Regional airport is 3678 feet.']
Predicate: 1stRunwayLengthFeet

Triple: ['__subject__ Abilene Regional Airport __predicate__ 1stRunwaySurfaceType __object__ Asphalt']
Text: ['The first runway at Abilene Regional Airport is made from asphalt.']
Predicate: 1stRunwaySurfaceType

Triple: ['__subject__ Abilene Regional Airport __predicate__ 3rdRunwayLengthFeet __object__ 7202']
Text: ['The third runway at Abilene Regional Airport is 7,202 feet long.']
Predicate: 3rdRunwayLengthFeet

Triple: ['__subject__ Abilene Regional Airport __predicate__ icaoLocationIdentifier __object__ KABI']
Text: ['Abilene Regional Airport ICAO Location Identifier is KABI.']
Predicate: icaoLocationIdentifier

Triple: ['__subject__ Abilene Regional Airport __predicate__ elevationAboveTheSeaLevel __object__ 546']
Text: ['Abilene Regional Airport elevation above the sea level in metres is 546.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Abilene Regional Airport __predicate__ locationIdentifier __object__ ABI']
Text: ['The location identifier for Abilene Regional airport is ABI.']
Predicate: locationIdentifier

Triple: ['__subject__ Abilene Regional Airport __predicate__ runwayLength __object__ 1121.0']
Text: ['The runway length of Abilene Regional Airport is 1,121.']
Predicate: runwayLength

Triple: ['__subject__ Abilene Regional Airport __predicate__ runwayLength __object__ 2194.0']
Text: ['The runway length of Abilene Regional Airport is 2194.0.']
Predicate: runwayLength

Triple: ['__subject__ Abilene Regional Airport __predicate__ runwayLength __object__ 2195.0']
Text: ['The runway length of Abilene Regional Airport is 2,195.']
Predicate: runwayLength

Triple: ['__subject__ Abilene Regional Airport __predicate__ runwayName __object__ 17L/35R']
Text: ['Abilene Regional Airport runway name is 17L/35R.']
Predicate: runwayName

Triple: ['__subject__ Abilene Regional Airport __predicate__ runwayName __object__ 17R/35L']
Text: ['17R/35L is the runway name at Abilene Regional airport.']
Predicate: runwayName

Triple: ['__subject__ Adirondack Regional Airport __predicate__ 1stRunwayLengthFeet __object__ 6573']
Text: ['The length of the first runway at Adirondack Regional Airport is 6,573 feet.']
Predicate: 1stRunwayLengthFeet

Triple: ['__subject__ Adirondack Regional Airport __predicate__ cityServed __object__ Lake_Placid,_New_York']
Text: ['Lake Placid, N.Y. is served by the Adirondack Regional Airport.']
Predicate: cityServed

Triple: ['__subject__ Adirondack Regional Airport __predicate__ cityServed __object__ Saranac_Lake,_New_York']
Text: ['Adirondack Regional Airport serves the city of Saranac Lake, New York.']
Predicate: cityServed

Triple: ['__subject__ Adirondack Regional Airport __predicate__ locationIdentifier __object__ SLK']
Text: ['Adirondack Regional Airport location identifier is SLK.']
Predicate: locationIdentifier

Triple: ['__subject__ Adirondack Regional Airport __predicate__ runwayLength __object__ 1219.0']
Text: ['The runway length of Adirondack Regional Airport is 1,219.']
Predicate: runwayLength

Triple: ['__subject__ Adirondack Regional Airport __predicate__ runwayLength __object__ 2003.0']
Text: ['The runway length of Adirondack Regional Airport is 2003.0.']
Predicate: runwayLength

Triple: ['__subject__ Adolfo Suárez Madrid–Barajas Airport __predicate__ elevationAboveTheSeaLevel __object__ 610.0']
Text: ['Adolfo Suárez Madrid-Barajas Airport has an elevation of 610.0 metres above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Adolfo Suárez Madrid–Barajas Airport __predicate__ location __object__ Alcobendas']
Text: ['Adolfo Suárez Madrid–Barajas Airport is in Alcobendas.']
Predicate: location

Triple: ['__subject__ Adolfo Suárez Madrid–Barajas Airport __predicate__ location __object__ Madrid']
Text: ['Adolfo Suárez Madrid–Barajas Airport is found in Madrid.']
Predicate: location

Triple: ['__subject__ Adolfo Suárez Madrid–Barajas Airport __predicate__ location __object__ Paracuellos_de_Jarama']
Text: ['Adolfo Suárez Madrid–Barajas Airport can be found in Paracuellos de Jarama.']
Predicate: location

Triple: ['__subject__ Adolfo Suárez Madrid–Barajas Airport __predicate__ operatingOrganisation __object__ ENAIRE']
Text: ['The Adolfo Suárez Madrid–Barajas Airport is operated by ENAIRE.']
Predicate: operatingOrganisation

Triple: ['__subject__ Adolfo Suárez Madrid–Barajas Airport __predicate__ runwayLength __object__ 3500.0']
Text: ['The runway length of Adolfo Suárez Madrid–Barajas Airport is 3,500.']
Predicate: runwayLength

Triple: ['__subject__ Adolfo Suárez Madrid–Barajas Airport __predicate__ runwayLength __object__ 4100.0']
Text: ['The runway length of Adolfo Suárez Madrid–Barajas Airport is 4,100.']
Predicate: runwayLength

Triple: ['__subject__ Adolfo Suárez Madrid–Barajas Airport __predicate__ runwayLength __object__ 4349.0']
Text: ['The runway length of Adolfo Suárez Madrid–Barajas Airport is 4,349.']
Predicate: runwayLength

Triple: ['__subject__ Adolfo Suárez Madrid–Barajas Airport __predicate__ runwayName __object__ 18R/36L']
Text: ['18R/36L is the runway name of the Adolfo Suárez Madrid-Barajas Airport.']
Predicate: runwayName

Triple: ['__subject__ Afonso Pena International Airport __predicate__ elevationAboveTheSeaLevelInFeet __object__ 2988']
Text: ['Afonso Pena International Airport is elevated 2988 feet above sea level.']
Predicate: elevationAboveTheSeaLevelInFeet

Triple: ['__subject__ Afonso Pena International Airport __predicate__ elevationAboveTheSeaLevel __object__ 911.0']
Text: ['Afonso Pena International airport is located 911 metres above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Afonso Pena International Airport __predicate__ location __object__ São_José_dos_Pinhais']
Text: ['The location of Afonso Pena International airport is Sao Jose dos Pinhais.']
Predicate: location

Triple: ['__subject__ Afonso Pena International Airport __predicate__ runwayLength __object__ 1800.0']
Text: ['The runway length at Afonso Pena International airport is 1800.0.']
Predicate: runwayLength

Triple: ['__subject__ Afonso Pena International Airport __predicate__ runwayLength __object__ 2215.0']
Text: ['Afonso Pena International Airport runway length is 2215.0.']
Predicate: runwayLength

Triple: ['__subject__ Afonso Pena International Airport __predicate__ runwayName __object__ 11/29']
Text: ['Afonso Pena International Airport has the runway name 11/29.']
Predicate: runwayName

Triple: ['__subject__ Afonso Pena International Airport __predicate__ runwayName __object__ 15/33']
Text: ['The runway name of Afonso Pena International Airport is 15/33.']
Predicate: runwayName

Triple: ['__subject__ Agra Airport __predicate__ iataLocationIdentifier __object__ AGR']
Text: ['Agra Airport IATA Location Identifier is AGR.']
Predicate: iataLocationIdentifier

Triple: ['__subject__ Agra Airport __predicate__ icaoLocationIdentifier __object__ VIAG']
Text: ['The location identifier for Agra Airport is VIAG.']
Predicate: icaoLocationIdentifier

Triple: ['__subject__ Agra Airport __predicate__ elevationAboveTheSeaLevel __object__ 167.94']
Text: ['Agra Airport is elevated 167.94 metres above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Agra Airport __predicate__ location __object__ India']
Text: ['Agra Airport is in India.']
Predicate: location

Triple: ['__subject__ Agra Airport __predicate__ location __object__ Uttar_Pradesh']
Text: ['Agra Airport is in Uttar Pradesh.']
Predicate: location

Triple: ['__subject__ Agra Airport __predicate__ nativeName __object__ Kheria Air Force Station']
Text: ['Kheria Air Force Station is the native name of Agra Airport.']
Predicate: nativeName

Triple: ['__subject__ Agra Airport __predicate__ operatingOrganisation __object__ Airports_Authority_of_India']
Text: ['The Airports Authority of India is the operating organisation of Agra Airport.']
Predicate: operatingOrganisation

Triple: ['__subject__ Agra Airport __predicate__ operatingOrganisation __object__ Indian_Air_Force']
Text: ['The operating organization for Agra Airport is the Indian Air Force.']
Predicate: operatingOrganisation

Triple: ['__subject__ Agra Airport __predicate__ runwayLength __object__ 1818.0']
Text: ['1818 is the length of the runway of Agra Airport.']
Predicate: runwayLength

Triple: ['__subject__ Agra Airport __predicate__ runwayLength __object__ 2743.0']
Text: ["Agra Airport's runway length is 2743.0."]
Predicate: runwayLength

Triple: ['__subject__ Al-Taqaddum Air Base __predicate__ location __object__ Habbaniyah']
Text: ['Al Taqaddum Air Base is located in Habbaniyah.']
Predicate: location

Triple: ['__subject__ Al-Taqaddum Air Base __predicate__ locationIdentifier __object__ MAT']
Text: ['The location identifier for Al-Taqaddum air base is MAT.']
Predicate: locationIdentifier

Triple: ['__subject__ Al-Taqaddum Air Base __predicate__ runwayLength __object__ 4019.0']
Text: ['The runway length of Al-Taqaddum Air Base is 4,019.']
Predicate: runwayLength

Triple: ['__subject__ Al Asad Airbase __predicate__ icaoLocationIdentifier __object__ ORAA']
Text: ['ORAA is the ICAO location identifier of Al Asad Airbase.']
Predicate: icaoLocationIdentifier

Triple: ['__subject__ Al Asad Airbase __predicate__ elevationAboveTheSeaLevelInFeet __object__ 618']
Text: ['Al Asad Airbase is 618 feet above sea level.']
Predicate: elevationAboveTheSeaLevelInFeet

Triple: ['__subject__ Al Asad Airbase __predicate__ location __object__ Al Anbar Province, Iraq']
Text: ['The Al Asad Airbase is situated in the Al Anbar Province, Iraq.']
Predicate: location

Triple: ['__subject__ Al Asad Airbase __predicate__ location __object__ Iraq']
Text: ['Al Asad Airbase is found in Iraq.']
Predicate: location

Triple: ['__subject__ Al Asad Airbase __predicate__ operatingOrganisation __object__ United_States_Air_Force']
Text: ['Al Asad Airbase is operated by the United States Air Force.']
Predicate: operatingOrganisation

Triple: ['__subject__ Al Asad Airbase __predicate__ runwayLength __object__ 3078.48']
Text: ['The runway length of Al Asad Airbase is 3078.48.']
Predicate: runwayLength

Triple: ['__subject__ Al Asad Airbase __predicate__ runwayLength __object__ 3090.0']
Text: ['The runway length of Al Asad Airbase is 3090 meters.']
Predicate: runwayLength

Triple: ['__subject__ Al Asad Airbase __predicate__ runwayLength __object__ 3990.0']
Text: ['The runway length of Al Asad Airbase is 3,990.']
Predicate: runwayLength

Triple: ['__subject__ Al Asad Airbase __predicate__ runwayLength __object__ 3992.88']
Text: ['The runway length of Al Asad Airbase is 3,992.88.']
Predicate: runwayLength

Triple: ['__subject__ Al Asad Airbase __predicate__ runwayName __object__ 08/26']
Text: ["''08/26'' is the runway name at Al Asad Airbase."]
Predicate: runwayName

Triple: ['__subject__ Al Asad Airbase __predicate__ runwayName __object__ 09L/27R']
Text: ['The runway name of Al Asad Airbase is 09L/27R.']
Predicate: runwayName

Triple: ['__subject__ Al Asad Airbase __predicate__ runwayName __object__ 09R/27L']
Text: ['09R/27L is the runway name at Al Asad airbase.']
Predicate: runwayName

Triple: ['__subject__ Alcobendas __predicate__ country __object__ Spain']
Text: ['Alcobendas is located in Spain.']
Predicate: country

Triple: ['__subject__ Alcobendas __predicate__ isPartOf __object__ Community_of_Madrid']
Text: ['Alcobendas is part of Community of Madrid.']
Predicate: isPartOf

Triple: ["__subject__ Alcobendas __predicate__ leaderParty __object__ People's_Party_(Spain)"]
Text: ['The leader party at Alcobendas is the Peoples Party (Spain).']
Predicate: leaderParty

Triple: ['__subject__ Alderney __predicate__ capital __object__ Saint_Anne,_Alderney']
Text: ['Saint Anne is the capital of Alderney.']
Predicate: capital

Triple: ['__subject__ Alderney __predicate__ language __object__ English_language']
Text: ['The main language spoken on Alderney is English.']
Predicate: language

Triple: ['__subject__ Alderney __predicate__ leader __object__ Elizabeth_II']
Text: ["Alderney's leader name is Elizabeth II."]
Predicate: leader

Triple: ['__subject__ Alderney Airport __predicate__ 1stRunwaySurfaceType __object__ Asphalt']
Text: ['The first runway at Alderney Airport is made of asphalt.']
Predicate: 1stRunwaySurfaceType

Triple: ['__subject__ Alderney Airport __predicate__ 1stRunwaySurfaceType __object__ Poaceae']
Text: ['The surface of the 1st runway at Alderney airport is poaceae.']
Predicate: 1stRunwaySurfaceType

Triple: ['__subject__ Alderney Airport __predicate__ elevationAboveTheSeaLevel __object__ 88.0']
Text: ['Alderney Airport is 88 metres above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Alderney Airport __predicate__ runwayLength __object__ 497.0']
Text: ['Alderney Airport has a runway length of 497.0.']
Predicate: runwayLength

Triple: ['__subject__ Alderney Airport __predicate__ runwayLength __object__ 733.0']
Text: ['The Alderney Airport runway has a length of 733.0.']
Predicate: runwayLength

Triple: ['__subject__ Alderney Airport __predicate__ runwayLength __object__ 877.0']
Text: ['The runway length of Alderney Airport is 877.']
Predicate: runwayLength

Triple: ['__subject__ Alderney Airport __predicate__ runwayName __object__ 03/21']
Text: ['Alderney Airport runway name is 03/21.']
Predicate: runwayName

Triple: ['__subject__ Alderney Airport __predicate__ runwayName __object__ 08/26']
Text: ['08/26 is the runway name of Alderney Airport.']
Predicate: runwayName

Triple: ['__subject__ Allama Iqbal International Airport __predicate__ cityServed __object__ Lahore']
Text: ['Allama Iqbal International Airport serves the city of Lahore.']
Predicate: cityServed

Triple: ['__subject__ Allama Iqbal International Airport __predicate__ location __object__ Pakistan']
Text: ['Allama Iqbal International airport is located in Pakistan.']
Predicate: location

Triple: ['__subject__ Allama Iqbal International Airport __predicate__ location __object__ Punjab,_Pakistan']
Text: ['Allama Iqbal International Airport is found in Punjab, Pakistan.']
Predicate: location

Triple: ['__subject__ Allama Iqbal International Airport __predicate__ operatingOrganisation __object__ Pakistan_Civil_Aviation_Authority']
Text: ['The Pakistan Civil Aviation Authority governs the Allama Iqbal International Airport.']
Predicate: operatingOrganisation

Triple: ['__subject__ Allama Iqbal International Airport __predicate__ runwayLength __object__ 2900.0']
Text: ['The runway length of Allama Iqbal International Airport is 2900.0.']
Predicate: runwayLength

Triple: ['__subject__ Allama Iqbal International Airport __predicate__ runwayLength __object__ 3310.0']
Text: ['The runway length of Allama Iqbal International Airport is 3,310.']
Predicate: runwayLength

Triple: ['__subject__ Allama Iqbal International Airport __predicate__ runwayName __object__ 18L/36R']
Text: ['The runway name at Allama Iqbal International airport is 18L/36R.']
Predicate: runwayName

Triple: ['__subject__ Alpena, Michigan __predicate__ country __object__ United_States']
Text: ['Alpena Michigan is a country in United States.']
Predicate: country

Triple: ['__subject__ Alpena County Regional Airport __predicate__ 1stRunwayLengthFeet __object__ 9001']
Text: ['The length of the first runway of Alpena County Regional Airport is 9001.']
Predicate: 1stRunwayLengthFeet

Triple: ['__subject__ Alpena County Regional Airport __predicate__ cityServed __object__ Alpena,_Michigan']
Text: ['Alpena County Regional Airport city served Alpena, Michigan.']
Predicate: cityServed

Triple: ['__subject__ Alpena County Regional Airport __predicate__ elevationAboveTheSeaLevel __object__ 210']
Text: ['Alpena County Regional Airport elevation above the sea level in metres is 210.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Alpena County Regional Airport __predicate__ location __object__ Maple_Ridge_Township,_Alpena_County,_Michigan']
Text: ['Alpena County Regional Airport is found in Maple Ridge Township, Alpena County in Michigan.']
Predicate: location

Triple: ['__subject__ Alpena County Regional Airport __predicate__ location __object__ Wilson_Township,_Alpena_County,_Michigan']
Text: ['Alpena County Regional Airport is found in Wilson Township, Alpena County, Michigan.']
Predicate: location

Triple: ['__subject__ Alpena County Regional Airport __predicate__ locationIdentifier __object__ APN']
Text: ['The location identifier of Alpena County Regional airport is APN.']
Predicate: locationIdentifier

Triple: ['__subject__ Alpena County Regional Airport __predicate__ owner __object__ Alpena_County,_Michigan']
Text: ['Alpena County Regional Airport owner is Alpena County, Michigan.']
Predicate: owner

Triple: ['__subject__ Alpena County Regional Airport __predicate__ runwayLength __object__ 2744.0']
Text: ["Alpena County Regional Airport's runway length is 2744.0."]
Predicate: runwayLength

Triple: ['__subject__ Alpena County Regional Airport __predicate__ runwayName __object__ 7/25']
Text: ['7/25 is the runway name of Alpena County Regional Airport.']
Predicate: runwayName

Triple: ['__subject__ Amsterdam __predicate__ leader __object__ Eberhard_van_der_Laan']
Text: ["Amsterdam's leader is Eberhard van der Laan."]
Predicate: leader

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ 1stRunwayLengthMetre __object__ 3800']
Text: ['The length of the first runway at Amsterdam Airport Schiphol is 3800 metres.']
Predicate: 1stRunwayLengthMetre

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ 1stRunwaySurfaceType __object__ Asphalt']
Text: ["The first runway at Amsterdam's Schiphol Airport is made from asphalt."]
Predicate: 1stRunwaySurfaceType

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ 4thRunwaySurfaceType __object__ Asphalt']
Text: ['The fourth runway at Schiphol Airport in Amsterdam is made of asphalt.']
Predicate: 4thRunwaySurfaceType

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ 5thRunwayNumber __object__ 18']
Text: ['Amsterdam Airport Schiphol is 5th runway number 18.']
Predicate: 5thRunwayNumber

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ elevationAboveTheSeaLevel __object__ -3.3528']
Text: ['Amsterdam Airport Schiphol is -3.3528 metres above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ location __object__ Haarlemmermeer']
Text: ["Amsterdam's Schiphol Airport is located in Haarlemmermeer."]
Predicate: location

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ operatingOrganisation __object__ Schiphol_Group']
Text: ['Amsterdam Airport Schiphol operating organization is Schiphol Group.']
Predicate: operatingOrganisation

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ runwayLength __object__ 2014.0']
Text: ['The runway length at Amsterdam Airport Schiphol is 2014.0 meters.']
Predicate: runwayLength

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ runwayLength __object__ 3300.0']
Text: ['The runway length of Amsterdam airport Schiphol is 3300.0.']
Predicate: runwayLength

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ runwayLength __object__ 3400.0']
Text: ['The length of the runway at Amsterdam Airport Schiphol is 3400.0 metres.']
Predicate: runwayLength

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ runwayLength __object__ 3453.0']
Text: ["The runway length of Amsterdam's Schiphol Airport is 3,453."]
Predicate: runwayLength

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ runwayLength __object__ 3500.0']
Text: ["Amsterdam's Schiphol Airport has a runway length of 3,500."]
Predicate: runwayLength

Triple: ['__subject__ Amsterdam Airport Schiphol __predicate__ runwayLength __object__ 3800.0']
Text: ['The runway length of Amsterdam Airport Schiphol is 3800.0 metres.']
Predicate: runwayLength

Triple: ["__subject__ Amsterdam Airport Schiphol __predicate__ runwayName __object__ 04/22 'Oostbaan'"]
Text: ['Amsterdam Airport Schiphol runway name is 04/22 Oostbaan.']
Predicate: runwayName

Triple: ["__subject__ Amsterdam Airport Schiphol __predicate__ runwayName __object__ 09/27 'Buitenveldertbaan'"]
Text: ['Amsterdam Airport Schiphol runway name is 09/27 Buitenveldertbaan.']
Predicate: runwayName

Triple: ["__subject__ Amsterdam Airport Schiphol __predicate__ runwayName __object__ 18C/36C 'Zwanenburgbaan'"]
Text: ["The runway name of Amsterdam's Schiphol Airport is 18C/36C Zwanenburgbaan."]
Predicate: runwayName

Triple: ["__subject__ Amsterdam Airport Schiphol __predicate__ runwayName __object__ 18L/36R 'Aalsmeerbaan'"]
Text: ['Amsterdam Airport Schiphol runway name is 18L/36R Aalsmeerbaan.']
Predicate: runwayName

Triple: ["__subject__ Amsterdam Airport Schiphol __predicate__ runwayName __object__ 18R/36L 'Polderbaan'"]
Text: ['18R/36L Polderbaan is the runway name at Amsterdam Airport Schiphol.']
Predicate: runwayName

Triple: ['__subject__ Andrews County, Texas __predicate__ largestCity __object__ Andrews,_Texas']
Text: ['The largest city in Andrews County, Texas is Andrews.']
Predicate: largestCity

Triple: ['__subject__ Andrews County Airport __predicate__ 3rdRunwayLengthFeet __object__ 2939']
Text: ['The third runway length of Andrews County Airport is 2,939 feet.']
Predicate: 3rdRunwayLengthFeet

Triple: ['__subject__ Andrews County Airport __predicate__ 4thRunwayLengthFeet __object__ 25']
Text: ['Andrews County Airport is 4th runway length feet of 25.']
Predicate: 4thRunwayLengthFeet

Triple: ['__subject__ Andrews County Airport __predicate__ 4thRunwaySurfaceType __object__ Asphalt']
Text: ['The fourth runway at Andrews County Airport is made from asphalt.']
Predicate: 4thRunwaySurfaceType

Triple: ['__subject__ Andrews County Airport __predicate__ location __object__ Texas']
Text: ['Andrews County Airport is located in Texas.']
Predicate: location

Triple: ['__subject__ Andrews County Airport __predicate__ locationIdentifier __object__ E11']
Text: ['Andrews County Airport location identifier is E11.']
Predicate: locationIdentifier

Triple: ['__subject__ Andrews County Airport __predicate__ runwayLength __object__ 1773.0']
Text: ['The length of the runway at Andrews County Airport is 1773 metres.']
Predicate: runwayLength

Triple: ['__subject__ Andrews County Airport __predicate__ runwayLength __object__ 8.0']
Text: ['Andrews County Airport runway is 8 meters long.']
Predicate: runwayLength

Triple: ['__subject__ Andrews County Airport __predicate__ runwayLength __object__ 929.0']
Text: ['The runway length of Andrews County airport is 929.0.']
Predicate: runwayLength

Triple: ['__subject__ Andrews County Airport __predicate__ runwayName __object__ 16/34']
Text: ["Andrews County Airport's runway name is 16/34."]
Predicate: runwayName

Triple: ['__subject__ Andrews County Airport __predicate__ runwayName __object__ 2/20']
Text: ['The runway name of Andrews County Airport is 2/20.']
Predicate: runwayName

Triple: ['__subject__ Angola International Airport __predicate__ 1stRunwayLengthFeet __object__ 13123']
Text: ['The length of the first runway at Angola International Airport is 13,123 feet.']
Predicate: 1stRunwayLengthFeet

Triple: ['__subject__ Angola International Airport __predicate__ 1stRunwayNumber __object__ 5']
Text: ['Angola International Airport 1st runway is Number 5.']
Predicate: 1stRunwayNumber

Triple: ['__subject__ Angola International Airport __predicate__ elevationAboveTheSeaLevelInMetres __object__ 159']
Text: ['Angola International airport is 159 metres above sea level.']
Predicate: elevationAboveTheSeaLevelInMetres

Triple: ['__subject__ Angola International Airport __predicate__ location __object__ Ícolo_e_Bengo']
Text: ['Angola International Airport is located at Ícolo e Bengo.']
Predicate: location

Triple: ['__subject__ Angola International Airport __predicate__ runwayLength __object__ 3800.0']
Text: ['The runway length of Angola International Airport is 3,800.']
Predicate: runwayLength

Triple: ['__subject__ Angola International Airport __predicate__ runwayLength __object__ 4000.0']
Text: ['4000ft is the runway length at Angola International Airport.']
Predicate: runwayLength

Triple: ['__subject__ Angola International Airport __predicate__ runwayName __object__ 05L/23R']
Text: ['The runway at Angola International Airport is called "05L/23R".']
Predicate: runwayName

Triple: ['__subject__ Angola International Airport __predicate__ runwayName __object__ South Runway']
Text: ['"South Runway" is a runway name at Angola International airport.']
Predicate: runwayName

Triple: ['__subject__ Antwerp __predicate__ administrativeArrondissement __object__ Arrondissement_of_Antwerp']
Text: ['Antwerp is admin Arrondissement of Arrondissement.']
Predicate: administrativeArrondissement

Triple: ['__subject__ Antwerp __predicate__ country __object__ Belgium']
Text: ['Antwerp is in the country of Belgium.']
Predicate: country

Triple: ['__subject__ Antwerp __predicate__ mayor __object__ Bart_De_Wever']
Text: ['The mayor of Antwerp is Bart De Wever.']
Predicate: mayor

Triple: ['__subject__ Antwerp International Airport __predicate__ cityServed __object__ Antwerp']
Text: ['Antwerp International Airport serves the city of Antwerp.']
Predicate: cityServed

Triple: ['__subject__ Antwerp International Airport __predicate__ operatingOrganisation __object__ Flemish department of Mobility and Public Works']
Text: ['Antwerp International Airport operation organization is Flemish department of mobility and public works.']
Predicate: operatingOrganisation

Triple: ['__subject__ Antwerp International Airport __predicate__ owner __object__ Flemish_Region']
Text: ['The owner of Antwerp International Airport is the Flemish Region.']
Predicate: owner

Triple: ['__subject__ Antwerp International Airport __predicate__ runwayLength __object__ 1510.0']
Text: ['The runway length at Antwerp International airport is 1510.0.']
Predicate: runwayLength

Triple: ['__subject__ Antwerp International Airport __predicate__ runwayLength __object__ 600.0']
Text: ['The runway at Antwerp International airport is 600.0 in length.']
Predicate: runwayLength

Triple: ['__subject__ Appleton, Wisconsin __predicate__ isPartOf __object__ Grand_Chute,_Wisconsin']
Text: ['Appleton, Wisconsin is part of Grand Chute, Wisconsin.']
Predicate: isPartOf

Triple: ['__subject__ Appleton, Wisconsin __predicate__ isPartOf __object__ Kimberly,_Wisconsin']
Text: ['Appleton, Wisconsin is part of Kimberly, Wisconsin.']
Predicate: isPartOf

Triple: ['__subject__ Appleton, Wisconsin __predicate__ isPartOf __object__ Little_Chute,_Wisconsin']
Text: ['Appleton, Wisconsin is part of little chute, Wisconsin.']
Predicate: isPartOf

Triple: ['__subject__ Appleton International Airport __predicate__ 1stRunwayLengthFeet __object__ 8002']
Text: ['Appleton International Airport is 1st 8002 runway length.']
Predicate: 1stRunwayLengthFeet

Triple: ['__subject__ Appleton International Airport __predicate__ cityServed __object__ Appleton,_Wisconsin']
Text: ['Appletone International Airport city served Appleton, Wisconsin.']
Predicate: cityServed

Triple: ['__subject__ Appleton International Airport __predicate__ elevationAboveTheSeaLevel __object__ 280']
Text: ['Appleton International Airport elevation above the sea level in metres is 280.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Appleton International Airport __predicate__ location __object__ Greenville,_Wisconsin']
Text: ['Appleton International Airport can be found in Greenville, Wisconsin.']
Predicate: location

Triple: ['__subject__ Appleton International Airport __predicate__ locationIdentifier __object__ ATW']
Text: ['The location identifier for Appleton International Airport is ATW.']
Predicate: locationIdentifier

Triple: ['__subject__ Appleton International Airport __predicate__ operatingOrganisation __object__ Outagamie_County,_Wisconsin']
Text: ['The operating organization for Appleton International Airport is in Outagamie County, Wisconsin.']
Predicate: operatingOrganisation

Triple: ['__subject__ Appleton International Airport __predicate__ runwayLength __object__ 1982.0']
Text: ['The runway length of Appleton International Airport is 1,982.']
Predicate: runwayLength

Triple: ['__subject__ Appleton International Airport __predicate__ runwayName __object__ 12/30']
Text: ['The runway name of Appleton International Airport is 12/30.']
Predicate: runwayName

Triple: ['__subject__ Appleton International Airport __predicate__ runwayName __object__ 3/21']
Text: ['The runway name of Appleton International Airport is 3/21.']
Predicate: runwayName

Triple: ['__subject__ Ardmore Airport (New Zealand) __predicate__ 2ndRunwaySurfaceType __object__ Poaceae']
Text: ['Poaceae is the surface type of the second runway of Ardmore Airport, New Zealand.']
Predicate: 2ndRunwaySurfaceType

Triple: ['__subject__ Ardmore Airport (New Zealand) __predicate__ 3rdRunwayLengthFeet __object__ 1960']
Text: ['The 3rd runway at Ardmore Airport, New Zealand is 1960 feet in length.']
Predicate: 3rdRunwayLengthFeet

Triple: ['__subject__ Ardmore Airport (New Zealand) __predicate__ 3rdRunwaySurfaceType __object__ Poaceae']
Text: ["Ardmore Airport (New Zealand)'s 3rd runway surface type is Poaceae."]
Predicate: 3rdRunwaySurfaceType

Triple: ['__subject__ Ardmore Airport (New Zealand) __predicate__ elevationAboveTheSeaLevel __object__ 34.0']
Text: ['The Ardmore Airport in New Zealand is 34 meters above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Ardmore Airport (New Zealand) __predicate__ operatingOrganisation __object__ Civil_Aviation_Authority_of_New_Zealand']
Text: ['The Civil Aviation Authority of New Zealand is the operating organisation for Ardmore Airport, New Zealand.']
Predicate: operatingOrganisation

Triple: ['__subject__ Ardmore Airport (New Zealand) __predicate__ runwayLength __object__ 1411.0']
Text: ['The runway length of Ardmore Airport in New Zealand is 1,411.']
Predicate: runwayLength

Triple: ['__subject__ Ardmore Airport (New Zealand) __predicate__ runwayLength __object__ 597.0']
Text: ['Ardmore Airport (New Zealand) runway length is 597.0.']
Predicate: runwayLength

Triple: ['__subject__ Ardmore Airport (New Zealand) __predicate__ runwayName __object__ 03L/21R']
Text: ['03L/21R is the runway name of Ardmore Airport in New Zealand.']
Predicate: runwayName

Triple: ['__subject__ Ardmore Airport (New Zealand) __predicate__ runwayName __object__ 03R/21L']
Text: ['The runway at Ardmore Airport in New Zealand is called "03R/21L".']
Predicate: runwayName

Triple: ['__subject__ Ardmore Airport (New Zealand) __predicate__ runwayName __object__ 07/25']
Text: ['Ardmore Airport (New Zealand) runway name is 07/25.']
Predicate: runwayName

Triple: ['__subject__ Ashgabat International Airport __predicate__ 1stRunwayLengthFeet __object__ 12467']
Text: ['The length of the first runway at Ashgabat International Airport is 12467 feet.']
Predicate: 1stRunwayLengthFeet

Triple: ['__subject__ Ashgabat International Airport __predicate__ 3rdRunwayLengthFeet __object__ 2953']
Text: ["The Ashgabat International Airport's 3rd runway length in ft is 2953."]
Predicate: 3rdRunwayLengthFeet

Triple: ['__subject__ Ashgabat International Airport __predicate__ iataLocationIdentifier __object__ ASB']
Text: ['ASB is the IATA location identifier for Ashgabat International airport.']
Predicate: iataLocationIdentifier

Triple: ['__subject__ Ashgabat International Airport __predicate__ elevationAboveTheSeaLevelInMetres __object__ 211']
Text: ['Ashgabat International Airport is 211 metres above sea level.']
Predicate: elevationAboveTheSeaLevelInMetres

Triple: ['__subject__ Ashgabat International Airport __predicate__ location __object__ Ashgabat']
Text: ['Ashgabat International Airport is located in Ashgabat.']
Predicate: location

Triple: ['__subject__ Ashgabat International Airport __predicate__ operatingOrganisation __object__ Turkmenistan_Airlines']
Text: ['The operating organization for Ashgabat International Airport is called Turkmenistan Airlines.']
Predicate: operatingOrganisation

Triple: ['__subject__ Ashgabat International Airport __predicate__ runwayLength __object__ 2989.0']
Text: ['The runway length at Ashgabat International Airport is 2989.0 meters.']
Predicate: runwayLength

Triple: ['__subject__ Ashgabat International Airport __predicate__ runwayLength __object__ 3800.0']
Text: ['The runway length at Ashgabat International airport is 3800.0.']
Predicate: runwayLength

Triple: ['__subject__ Ashgabat International Airport __predicate__ runwayLength __object__ 900.0']
Text: ['The runway length at Ashgabat International Airport is 900.0.']
Predicate: runwayLength

Triple: ['__subject__ Ashgabat International Airport __predicate__ runwayName __object__ 12L/30R']
Text: ['12L/30R is the runway name of Ashgabat International Airport.']
Predicate: runwayName

Triple: ['__subject__ Ashgabat International Airport __predicate__ runwayName __object__ 12R/30L']
Text: ['12R/30L is the runway name of the Ashgabat International Airport.']
Predicate: runwayName

Triple: ['__subject__ Athens __predicate__ country __object__ Greece']
Text: ['Athens is located in the country of Greece.']
Predicate: country

Triple: ['__subject__ Athens International Airport __predicate__ cityServed __object__ Athens']
Text: ['The Athens International Airport serves the city of Athens.']
Predicate: cityServed

Triple: ['__subject__ Athens International Airport __predicate__ elevationAboveTheSeaLevelInMetres __object__ 94']
Text: ['Athens International Airport is 94 metres above sea level.']
Predicate: elevationAboveTheSeaLevelInMetres

Triple: ['__subject__ Athens International Airport __predicate__ runwayLength __object__ 3800.0']
Text: ['The runway length at Athens International Airport is 3,800.']
Predicate: runwayLength

Triple: ['__subject__ Athens International Airport __predicate__ runwayLength __object__ 4000.0']
Text: ['The runway length of Athens International Airport is 4000.0.']
Predicate: runwayLength

Triple: ['__subject__ Atlantic City, New Jersey __predicate__ country __object__ United_States']
Text: ['Atlantic City, New Jersey is in the U.S.A.']
Predicate: country

Triple: ['__subject__ Atlantic City, New Jersey __predicate__ isPartOf __object__ New_Jersey']
Text: ['Atlantic City, New Jersey is part of New Jersey.']
Predicate: isPartOf

Triple: ['__subject__ Atlantic City, New Jersey __predicate__ leader __object__ Don_Guardian']
Text: ['The leader of Atlantic City, New Jersey is Don Guardian.']
Predicate: leader

Triple: ['__subject__ Atlantic City International Airport __predicate__ icaoLocationIdentifier __object__ KACY']
Text: ["Atlantic City International Airport's ICAO Location Identifier is KACY."]
Predicate: icaoLocationIdentifier

Triple: ['__subject__ Atlantic City International Airport __predicate__ cityServed __object__ Atlantic_City,_New_Jersey']
Text: ['The Atlantic City International Airport serves Atlantic City, N.J.']
Predicate: cityServed

Triple: ['__subject__ Atlantic City International Airport __predicate__ elevationAboveTheSeaLevelInFeet __object__ 75']
Text: ['The elevation above sea level for Atlantic City International Airport is 75ft.']
Predicate: elevationAboveTheSeaLevelInFeet

Triple: ['__subject__ Atlantic City International Airport __predicate__ elevationAboveTheSeaLevel __object__ 23.0']
Text: ['The elevation above the sea level (in metres) of Atlantic City International Airport is 23.0.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Atlantic City International Airport __predicate__ location __object__ Egg_Harbor_Township,_New_Jersey']
Text: ['Atlantic City International Airport is in Egg Harbor Township, N.J.']
Predicate: location

Triple: ['__subject__ Atlantic City International Airport __predicate__ operatingOrganisation __object__ Port_Authority_of_New_York_and_New_Jersey']
Text: ['The Atlantic City International Airport is operated by the Port Authority of New York and New Jersey.']
Predicate: operatingOrganisation

Triple: ['__subject__ Atlantic City International Airport __predicate__ runwayLength __object__ 1873.0']
Text: ['The runway length of Atlantic City International Airport is 1,873.']
Predicate: runwayLength

Triple: ['__subject__ Atlantic City International Airport __predicate__ runwayLength __object__ 3048.0']
Text: ['The runway length of Atlantic City International Airport is 3048.0.']
Predicate: runwayLength

Triple: ['__subject__ Atlantic City International Airport __predicate__ runwayName __object__ 4/22']
Text: ['Atlantic City International Airport runway name is 4/22.']
Predicate: runwayName

Triple: ['__subject__ Atlantic City International Airport __predicate__ runwaySurfaceType __object__ Asphalt/Concrete']
Text: ['The runway surface at Atlantic City International Airport is made from asphalt and concrete.']
Predicate: runwaySurfaceType

Triple: ['__subject__ Belgium __predicate__ capital __object__ City_of_Brussels']
Text: ['The capital of Belgium is Brussels.']
Predicate: capital

Triple: ['__subject__ Belgium __predicate__ language __object__ French_language']
Text: ['French is the spoken language in Belgium.']
Predicate: language

Triple: ['__subject__ Belgium __predicate__ leader __object__ Charles_Michel']
Text: ["Belgium's leader is Charles Michel."]
Predicate: leader

Triple: ['__subject__ Belgium __predicate__ officialLanguage __object__ French_language']
Text: ['French is the official language of Belgium.']
Predicate: officialLanguage

Triple: ['__subject__ Belgium __predicate__ officialLanguage __object__ German_language']
Text: ['German is the official language of Belgium.']
Predicate: officialLanguage

Triple: ['__subject__ Civil Aviation Authority of New Zealand __predicate__ location __object__ Wellington']
Text: ['The Civil Aviation Authority of New Zealand is in Wellington.']
Predicate: location

Triple: ['__subject__ Curitiba __predicate__ country __object__ Brazil']
Text: ['Curitiba is located in Brazil.']
Predicate: country

Triple: ['__subject__ Curitiba __predicate__ isPartOf __object__ Paraná_(state)']
Text: ['Curitiba is part of the State of Paraná.']
Predicate: isPartOf

Triple: ['__subject__ Curitiba __predicate__ leader __object__ Democratic_Labour_Party_(Brazil)']
Text: ['Curitiba is led by the Democratic Labour Party (Brazil).']
Predicate: leader

Triple: ['__subject__ Denmark __predicate__ language __object__ Danish_language']
Text: ['Denmark language is Danish language.']
Predicate: language

Triple: ['__subject__ Denmark __predicate__ language __object__ Faroese_language']
Text: ['The Faroese language is spoken in Denmark.']
Predicate: language

Triple: ['__subject__ Denmark __predicate__ language __object__ German_language']
Text: ['German is the language spoken in Denmark.']
Predicate: language

Triple: ['__subject__ Denmark __predicate__ language __object__ Greenlandic_language']
Text: ['Greenlandic is the language spoken in Denmark.']
Predicate: language

Triple: ['__subject__ Denmark __predicate__ leader __object__ Margrethe_II_of_Denmark']
Text: ["Denmark's leader is Margrethe II of Denmark."]
Predicate: leader

Triple: ['__subject__ ENAIRE __predicate__ city __object__ Madrid']
Text: ['ENAIRE is in the city of Madrid.']
Predicate: city

Triple: ['__subject__ Egg Harbor Township, New Jersey __predicate__ country __object__ United_States']
Text: ['Egg Harbor Township, New Jersey is in the United States.']
Predicate: country

Triple: ['__subject__ Egg Harbor Township, New Jersey __predicate__ isPartOf __object__ Atlantic_County,_New_Jersey']
Text: ['Egg Harbor Township is a township in Atlantic County, New Jersey, United States.']
Predicate: isPartOf

Triple: ['__subject__ Egg Harbor Township, New Jersey __predicate__ isPartOf __object__ New_Jersey']
Text: ['Egg Harbor Township, New Jersey is part of New Jersey.']
Predicate: isPartOf

Triple: ['__subject__ Flemish Government __predicate__ jurisdiction __object__ Flanders']
Text: ['Flemish Government jurisdiction is Flanders.']
Predicate: jurisdiction

Triple: ['__subject__ Flemish Government __predicate__ jurisdiction __object__ Flemish_Region']
Text: ['Flemish Government jurisdiction is Flemish Region.']
Predicate: jurisdiction

Triple: ['__subject__ Flemish Region __predicate__ country __object__ Belgium']
Text: ['The Flemish region is in the country of Belgium.']
Predicate: country

Triple: ['__subject__ Greece __predicate__ demonym __object__ Greeks']
Text: ['Greece demonym is Greeks.']
Predicate: demonym

Triple: ['__subject__ Greece __predicate__ leader __object__ Alexis_Tsipras']
Text: ['Greece leader name is Alexis Tsipras.']
Predicate: leader

Triple: ['__subject__ Greece __predicate__ leader __object__ Prokopis_Pavlopoulos']
Text: ["Greece's leader name is Prokopis Pavlopoulos."]
Predicate: leader

Triple: ['__subject__ Greenville, Wisconsin __predicate__ isPartOf __object__ Clayton,_Winnebago_County,_Wisconsin']
Text: ['Greenville, Wisconsin, is part of Clayton Winnebago County, Wisconsin.']
Predicate: isPartOf

Triple: ['__subject__ Greenville, Wisconsin __predicate__ isPartOf __object__ Dale,_Wisconsin']
Text: ['Greenville, Wisconsin is part of Dale, Wisconsin.']
Predicate: isPartOf

Triple: ['__subject__ Greenville, Wisconsin __predicate__ isPartOf __object__ Ellington,_Wisconsin']
Text: ['Greenville, Wisconsin is part of Ellington, Wisconsin.']
Predicate: isPartOf

Triple: ['__subject__ Greenville, Wisconsin __predicate__ isPartOf __object__ Menasha_(town),_Wisconsin']
Text: ['Greenville, Wisconsin is part of Menasha, Wisconsin.']
Predicate: isPartOf

Triple: ['__subject__ Harrietstown, New York __predicate__ country __object__ United_States']
Text: ['Harrietstown, New York, is located in the United States.']
Predicate: country

Triple: ['__subject__ Harrietstown, New York __predicate__ isPartOf __object__ New_York']
Text: ['Harrietstown, New York is part of New York.']
Predicate: isPartOf

Triple: ['__subject__ India __predicate__ leader __object__ Narendra_Modi']
Text: ['Narendra Modi is the leader of India.']
Predicate: leader

Triple: ['__subject__ India __predicate__ leader __object__ T._S._Thakur']
Text: ['One of the leaders of India is called T. S. Thakur.']
Predicate: leader

Triple: ['__subject__ Indian Air Force __predicate__ aircraftHelicopter __object__ HAL_Light_Combat_Helicopter']
Text: ["India's Air Force has an aircraft-capable helicopter known as the HAL Light Combat Helicopter."]
Predicate: aircraftHelicopter

Triple: ['__subject__ Indian Air Force __predicate__ transportAircraft __object__ Boeing_C-17_Globemaster_III']
Text: ['The Boeing C-17 Globemaster III is a transport aircraft in the Indian Air Force.']
Predicate: transportAircraft

Triple: ['__subject__ Infraero __predicate__ location __object__ Brasília']
Text: ['Infraero is in Brasilia.']
Predicate: location

Triple: ['__subject__ Infraero __predicate__ location __object__ Brazil']
Text: ['Infraero location is in Brazil.']
Predicate: location

Triple: ['__subject__ Iraq __predicate__ currency __object__ Iraqi_dinar']
Text: ['The currency in Iraq is the Iraqi dinar.']
Predicate: currency

Triple: ['__subject__ Iraq __predicate__ language __object__ Kurdish_languages']
Text: ['The Kurdish languages are spoken in Iraq.']
Predicate: language

Triple: ['__subject__ Iraq __predicate__ leader __object__ Fuad_Masum']
Text: ['Iraq is led by Fuad Masum.']
Predicate: leader

Triple: ['__subject__ Iraq __predicate__ leader __object__ Haider_al-Abadi']
Text: ['Iraq leader name is Haider Al-Abadi.']
Predicate: leader

Triple: ['__subject__ Iraq __predicate__ officialLanguage __object__ Arabic']
Text: ['The official language of Iraq is Arabic.']
Predicate: officialLanguage

Triple: ['__subject__ Lahore __predicate__ country __object__ Pakistan']
Text: ['Lahore is in Pakistan.']
Predicate: country

Triple: ['__subject__ Lake Placid, New York __predicate__ country __object__ United_States']
Text: ['Lake Placid, New York is located in the United States.']
Predicate: country

Triple: ['__subject__ Lake Placid, New York __predicate__ isPartOf __object__ Essex_County,_New_York']
Text: ['Lake Placid, New York is part of Essex County, New York.']
Predicate: isPartOf

Triple: ['__subject__ Lake Placid, New York __predicate__ isPartOf __object__ New_York']
Text: ['Lake Placid, New York is part of New York.']
Predicate: isPartOf

Triple: ['__subject__ Luanda __predicate__ country __object__ Angola']
Text: ['Luanda is in the country of Angola.']
Predicate: country

Triple: ['__subject__ Madrid __predicate__ isPartOf __object__ Community_of_Madrid']
Text: ['Madrid is part of the community of Madrid.']
Predicate: isPartOf

Triple: ['__subject__ Madrid __predicate__ leaderParty __object__ Ahora_Madrid']
Text: ['Ahora Madrid is the leading party of Madrid.']
Predicate: leaderParty

Triple: ['__subject__ Maple Ridge Township, Alpena County, Michigan __predicate__ country __object__ United_States']
Text: ['Maple Ridge Township, Alpena County Michigan is in the United States.']
Predicate: country

Triple: ['__subject__ Pakistan __predicate__ leader __object__ Mamnoon_Hussain']
Text: ["Pakistan's leader is Mamnoon Hussain."]
Predicate: leader

Triple: ['__subject__ Pakistan __predicate__ leader __object__ Nawaz_Sharif']
Text: ["Pakistan's leader is Nawaz Sharif."]
Predicate: leader

Triple: ['__subject__ Pakistan Civil Aviation Authority __predicate__ headquarter __object__ Jinnah_International_Airport']
Text: ['The Pakistan Civil Aviation Authority is headquartered at Jinnah International Airport.']
Predicate: headquarter

Triple: ['__subject__ Pakistan Civil Aviation Authority __predicate__ location __object__ Jinnah_International_Airport']
Text: ["Pakistan Civil Aviation Authority's location is Jinnah International Airport."]
Predicate: location

Triple: ['__subject__ Paracuellos de Jarama __predicate__ country __object__ Spain']
Text: ['Paracuellos de Jarama is in Spain.']
Predicate: country

Triple: ['__subject__ Poaceae __predicate__ class __object__ Monocotyledon']
Text: ['Poaceae class is Monocotyledon.']
Predicate: class

Triple: ['__subject__ Poaceae __predicate__ division __object__ Flowering_plant']
Text: ['Poaceae belongs to the division of flowering plants.']
Predicate: division

Triple: ['__subject__ Poaceae __predicate__ order __object__ Commelinids']
Text: ['Poaceae belongs to the order of Commelinids.']
Predicate: order

Triple: ['__subject__ Poaceae __predicate__ order __object__ Poales']
Text: ['Poaceae is of the Poales order.']
Predicate: order

Triple: ['__subject__ Port Authority of New York and New Jersey __predicate__ headquarter __object__ New_York']
Text: ["Port Authority of New York and New Jersey's headquarter is New York."]
Predicate: headquarter

Triple: ['__subject__ Port Authority of New York and New Jersey __predicate__ regionServed __object__ New_York']
Text: ['The Port Authority of New York and New Jersey serves the New York region.']
Predicate: regionServed

Triple: ['__subject__ Punjab, Pakistan __predicate__ country __object__ Pakistan']
Text: ['Punjab is found in the country Pakistan.']
Predicate: country

Triple: ['__subject__ Punjab, Pakistan __predicate__ leader __object__ Malik_Muhammad_Rafique_Rajwana']
Text: ['Malik Muhammad Rafique Rajwana is a leader in the Punjab, Pakistan.']
Predicate: leader

Triple: ['__subject__ Punjab, Pakistan __predicate__ leader __object__ Shehbaz_Sharif']
Text: ['The leader of Punjab, Pakistan is Shehbaz Sharif.']
Predicate: leader

Triple: ['__subject__ Punjab, Pakistan __predicate__ leaderTitle __object__ Provincial_Assembly_of_the_Punjab']
Text: ['The Punjab, Pakistan, is led by the Provincial Assembly of the Punjab.']
Predicate: leaderTitle

Triple: ['__subject__ San Sebastián de los Reyes __predicate__ isPartOf __object__ Community_of_Madrid']
Text: ['San Sebastian de los Reyes is part of the Community of Madrid.']
Predicate: isPartOf

Triple: ["__subject__ San Sebastián de los Reyes __predicate__ leaderParty __object__ People's_Party_(Spain)"]
Text: ["The People's Party is the lead party of San Sebastian de los Reyes, Spain."]
Predicate: leaderParty

Triple: ['__subject__ Saranac Lake, New York __predicate__ country __object__ United_States']
Text: ['Saranac Lake, New York is located in the U.S.']
Predicate: country

Triple: ['__subject__ Saranac Lake, New York __predicate__ isPartOf __object__ Essex_County,_New_York']
Text: ['Saranac Lake, New York is part of Essex County, New York.']
Predicate: isPartOf

Triple: ['__subject__ Saranac Lake, New York __predicate__ isPartOf __object__ Harrietstown,_New_York']
Text: ['Saranac Lake, New York is part of Harrietstown, New York.']
Predicate: isPartOf

Triple: ['__subject__ South Jersey Transportation Authority __predicate__ leader __object__ Stephen_Dilts']
Text: ["South Jersey Transportation Authority's leader name is Stephen Dilts."]
Predicate: leader

Triple: ['__subject__ São José dos Pinhais __predicate__ isPartOf __object__ Paraná_(state)']
Text: ['São José dos Pinhais is part Of Paraná (state).']
Predicate: isPartOf

Triple: ['__subject__ São José dos Pinhais __predicate__ isPartOf __object__ South_Region,_Brazil']
Text: ['São José dos Pinhais is part of the south region of Brazil.']
Predicate: isPartOf

Triple: ['__subject__ Texas __predicate__ capital __object__ Austin,_Texas']
Text: ['Austin is the capital of Texas.']
Predicate: capital

Triple: ['__subject__ Texas __predicate__ country __object__ United_States']
Text: ['Texas is in the United States.']
Predicate: country

Triple: ['__subject__ Texas __predicate__ demonym __object__ Tejano']
Text: ['Texas demonym is Tejano.']
Predicate: demonym

Triple: ['__subject__ Texas __predicate__ demonym __object__ Texan']
Text: ['The people of Texas are known as Texans.']
Predicate: demonym

Triple: ['__subject__ Texas __predicate__ language __object__ English_language']
Text: ['English is spoken in Texas.']
Predicate: language

Triple: ['__subject__ Texas __predicate__ language __object__ Spanish_language']
Text: ['Spanish is spoken in Texas.']
Predicate: language

Triple: ['__subject__ Tirstrup __predicate__ country __object__ Denmark']
Text: ['Tirstrup is located in the country of Denmark.']
Predicate: country

Triple: ['__subject__ Tirstrup __predicate__ isPartOf __object__ Central_Denmark_Region']
Text: ['Tirstrup is part of the Central Denmark region.']
Predicate: isPartOf

Triple: ['__subject__ Tirstrup __predicate__ isPartOf __object__ Denmark']
Text: ['Tirstrup is part of Denmark.']
Predicate: isPartOf

Triple: ['__subject__ Turkmenistan Airlines __predicate__ headquarter __object__ Ashgabat']
Text: ['The headquarters of Turkmenistan Airlines are located in Ashgabat.']
Predicate: headquarter

Triple: ['__subject__ Turkmenistan Airlines __predicate__ headquarter __object__ Turkmenistan']
Text: ['The headquarters of Turkmenistan Airlines are located in Turkmenistan.']
Predicate: headquarter

Triple: ['__subject__ Turkmenistan Airlines __predicate__ hubAirport __object__ Ashgabat_International_Airport']
Text: ['The hub airport for Turkmenistan airlines is Ashgabat International airport.']
Predicate: hubAirport

Triple: ['__subject__ Turkmenistan Airlines __predicate__ hubAirport __object__ Turkmenabat_Airport']
Text: ['The hub airport for Turkmenistan Airlines is Turkmenabat Airport.']
Predicate: hubAirport

Triple: ['__subject__ Turkmenistan Airlines __predicate__ hubAirport __object__ Turkmenbashi_International_Airport']
Text: ['The hub airport for Turkmenistan Airlines is Turkmenbashi International Airport.']
Predicate: hubAirport

Triple: ['__subject__ United States Air Force __predicate__ aircraftFighter __object__ General_Dynamics_F-16_Fighting_Falcon']
Text: ['United States Air FOrce aircraft fighter is General Dynamics F-16 Fighting Falcon.']
Predicate: aircraftFighter

Triple: ['__subject__ United States Air Force __predicate__ aircraftFighter __object__ McDonnell_Douglas_F-15_Eagle']
Text: ["United States Air Force's aircraft fighter is called McDonnell Douglas F-15 Eagle."]
Predicate: aircraftFighter

Triple: ['__subject__ United States Air Force __predicate__ attackAircraft __object__ Lockheed_AC-130']
Text: ['The Lockheed AC-130 can be found on USAF aircraft carriers.']
Predicate: attackAircraft

Triple: ['__subject__ United States Air Force __predicate__ battle __object__ Invasion_of_Grenada']
Text: ['One of the noted United States Air Force battles was the Invasion of Grenada.']
Predicate: battle

Triple: ['__subject__ United States Air Force __predicate__ battle __object__ Korean_War']
Text: ['The United States Air Force fought battles in the Korean war.']
Predicate: battle

Triple: ['__subject__ United States Air Force __predicate__ battle __object__ Operation_Enduring_Freedom']
Text: ['The Operation Enduring Freedom is one of the battles of the United States Air Force.']
Predicate: battle

Triple: ['__subject__ United States Air Force __predicate__ battle __object__ United_States_invasion_of_Panama']
Text: ['The USAF was involved in the Invasion of Panama.']
Predicate: battle

Triple: ['__subject__ United States Air Force __predicate__ transportAircraft __object__ Lockheed_C-130_Hercules']
Text: ['Lockheed C-130 Hercules is a transport aircraft in the United States Air Force.']
Predicate: transportAircraft

Triple: ['__subject__ Uttar Pradesh __predicate__ isPartOf __object__ Awadh']
Text: ['Uttar Pradesh is part of Awadh.']
Predicate: isPartOf

Triple: ['__subject__ Uttar Pradesh __predicate__ isPartOf __object__ Bundelkhand']
Text: ['Uttar Pradesh is part of Bundelkhand.']
Predicate: isPartOf

Triple: ['__subject__ Uttar Pradesh __predicate__ leader __object__ Ram_Naik']
Text: ['Ram Naik is the leader in Uttar Pradesh.']
Predicate: leader

Triple: ['__subject__ Wilson Township, Alpena County, Michigan __predicate__ country __object__ United_States']
Text: ['Wilson Township, in Alpena County, Michigan is in the U.S.A.']
Predicate: country

Triple: ['__subject__ Wilson Township, Alpena County, Michigan __predicate__ isPartOf __object__ United_States']
Text: ['Wilson Township, Alpena County, Michigan is part of the United States.']
Predicate: isPartOf

Triple: ['__subject__ Ícolo e Bengo __predicate__ country __object__ Angola']
Text: ['Ícolo e Bengo is in Angola.']
Predicate: country

Triple: ['__subject__ Ícolo e Bengo __predicate__ isPartOf __object__ Luanda_Province']
Text: ['Ícolo e Bengo is in the Luanda Province.']
Predicate: isPartOf

Triple: ['__subject__ Aaron Bertram __predicate__ associatedBand/associatedMusicalArtist __object__ Kids_Imagine_Nation']
Text: ['Aaron Bertram is an artist with the band Kids Imagine Nation.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Bertram __predicate__ associatedBand/associatedMusicalArtist __object__ Suburban_Legends']
Text: ['Aaron Bertram plays for the Suburban Legends band.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Bertram __predicate__ background __object__ non_vocal_instrumentalist']
Text: ['Aaron Bertram has a background with a non vocal instrument.']
Predicate: background

Triple: ['__subject__ Aaron Bertram __predicate__ birthDate __object__ 1981-04-03']
Text: ["Aaron Bertram's birth date is 1981-04-03."]
Predicate: birthDate

Triple: ['__subject__ Aaron Bertram __predicate__ genre __object__ Ska_punk']
Text: ["Aaron Bertram's musical genre is Ska punk."]
Predicate: genre

Triple: ['__subject__ Aaron Deer __predicate__ associatedBand/associatedMusicalArtist __object__ John_Wilkes_Booze']
Text: ['Aaron Deer is a musician for the band John Wilkes Booze.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Deer __predicate__ associatedBand/associatedMusicalArtist __object__ Wee_Giant']
Text: ['Aaron Deer is an artist for the band Wee Giant.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Deer __predicate__ background __object__ solo_singer']
Text: ['Aaron Deer is a solo singer.']
Predicate: background

Triple: ['__subject__ Aaron Deer __predicate__ genre __object__ Indie_rock']
Text: ['The musical genre of Aaron Deer is indie rock.']
Predicate: genre

Triple: ['__subject__ Aaron Deer __predicate__ genre __object__ Psychedelia']
Text: ['Aaron Deer performs Psychedelia music.']
Predicate: genre

Triple: ['__subject__ Aaron Deer __predicate__ instrument __object__ Bass_guitar']
Text: ['Aaron deer plays the bass guitar.']
Predicate: instrument

Triple: ['__subject__ Aaron Deer __predicate__ instrument __object__ Guitar']
Text: ['Aaron Deer plays the guitar.']
Predicate: instrument

Triple: ['__subject__ Aaron Deer __predicate__ instrument __object__ Keyboard_instrument']
Text: ["Aaron Deer's instrument is the keyboard."]
Predicate: instrument

Triple: ['__subject__ Aaron Deer __predicate__ instrument __object__ Piano']
Text: ['Aaron Deer plays the piano.']
Predicate: instrument

Triple: ['__subject__ Aaron Deer __predicate__ instrument __object__ Singing']
Text: ['Aaron Deer is a singer.']
Predicate: instrument

Triple: ['__subject__ Aaron Deer __predicate__ origin __object__ Indiana']
Text: ['Aaron Deer comes from Indiana.']
Predicate: origin

Triple: ['__subject__ Aaron Deer __predicate__ origin __object__ Indianapolis']
Text: ['Aaron Deer is from Indianapolis.']
Predicate: origin

Triple: ['__subject__ Aaron Deer __predicate__ origin __object__ United_States']
Text: ['Aaron Deer was born in the United States.']
Predicate: origin

Triple: ['__subject__ Aaron Turner __predicate__ activeYearsStartYear __object__ 1995']
Text: ['Aaron Turner started performing in 1995.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Aaron Turner __predicate__ associatedBand/associatedMusicalArtist __object__ Greymachine']
Text: ['Aaron Turner is associated with the group Greymachine.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Turner __predicate__ associatedBand/associatedMusicalArtist __object__ House_of_Low_Culture']
Text: ['Aaron Turner performed for House of Low Culture.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Turner __predicate__ associatedBand/associatedMusicalArtist __object__ Isis_(band)']
Text: ['Aaron Turner is an artist for the band Isis.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Turner __predicate__ associatedBand/associatedMusicalArtist __object__ Lotus_Eaters_(band)']
Text: ['Aaron Turner is a musician in the Lotus Eaters band.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Turner __predicate__ associatedBand/associatedMusicalArtist __object__ Mamiffer']
Text: ['Aaron Turner performs for Mamiffer.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Turner __predicate__ associatedBand/associatedMusicalArtist __object__ Old_Man_Gloom']
Text: ['Aaron Turner played for Old Man Gloom.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Turner __predicate__ associatedBand/associatedMusicalArtist __object__ Sumac_(band)']
Text: ['Aaron Turner performed with the band Sumac.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Turner __predicate__ associatedBand/associatedMusicalArtist __object__ Twilight_(band)']
Text: ['Aaron Turner played with the band Twilight.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aaron Turner __predicate__ genre __object__ Ambient_music']
Text: ['Aaron Turner performs ambient music.']
Predicate: genre

Triple: ['__subject__ Aaron Turner __predicate__ genre __object__ Doom_metal']
Text: ['Aaron Turner is an exponent of Doom metal.']
Predicate: genre

Triple: ['__subject__ Aaron Turner __predicate__ genre __object__ Drone_music']
Text: ['Drone music is a genre of Aaron Turner.']
Predicate: genre

Triple: ['__subject__ Aaron Turner __predicate__ genre __object__ Electroacoustic_music']
Text: ['Aaron Turner plays electroacoustic music.']
Predicate: genre

Triple: ['__subject__ Aaron Turner __predicate__ genre __object__ Post-metal']
Text: ["Aaron Turner's genre is post-metal."]
Predicate: genre

Triple: ['__subject__ Aaron Turner __predicate__ genre __object__ Sludge_metal']
Text: ['Aaron Turner is closely associated with the genre sludge metal.']
Predicate: genre

Triple: ['__subject__ Aaron Turner __predicate__ instrument __object__ Electric_guitar']
Text: ['Aaron Turner plays the electric guitar.']
Predicate: instrument

Triple: ['__subject__ Aaron Turner __predicate__ instrument __object__ Singing']
Text: ['Aaron Turner sings for a living.']
Predicate: instrument

Triple: ['__subject__ Aaron Turner __predicate__ origin __object__ Massachusetts']
Text: ['Aaron Turner is from Massachusetts.']
Predicate: origin

Triple: ['__subject__ Aaron Turner __predicate__ origin __object__ United_States']
Text: ['Aaron Turner was born in the United States.']
Predicate: origin

Triple: ['__subject__ Abradab __predicate__ activeYearsStartYear __object__ 1994']
Text: ['Abradab started performing in 1994.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Abradab __predicate__ associatedBand/associatedMusicalArtist __object__ Kaliber_44']
Text: ['Abradab is an artist for the band Kaliber 44.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Abradab __predicate__ birthPlace __object__ Katowice']
Text: ['Abradab was born in Katowice.']
Predicate: birthPlace

Triple: ['__subject__ Abradab __predicate__ origin __object__ Katowice']
Text: ['The musician Abradab originates from Katowice.']
Predicate: origin

Triple: ['__subject__ Abradab __predicate__ origin __object__ Poland']
Text: ['Abradab originated from Poland.']
Predicate: origin

Triple: ['__subject__ Ace Wilder __predicate__ background __object__ solo_singer']
Text: ['Ace Wilder has a background as a solo singer.']
Predicate: background

Triple: ['__subject__ Ace Wilder __predicate__ birthPlace __object__ Stockholm']
Text: ['Ace Wilder was born in Stockholm.']
Predicate: birthPlace

Triple: ['__subject__ Ace Wilder __predicate__ birthPlace __object__ Sweden']
Text: ['Sweden is the birthplace of Ace Wilder.']
Predicate: birthPlace

Triple: ['__subject__ Ace Wilder __predicate__ birthYear __object__ 1982']
Text: ['Ace Wilder was born in 1982.']
Predicate: birthYear

Triple: ['__subject__ Ace Wilder __predicate__ genre __object__ Electropop']
Text: ['Ace Wilder performs electropop music.']
Predicate: genre

Triple: ['__subject__ Ace Wilder __predicate__ genre __object__ Hip_hop_music']
Text: ['Ace Wilder is an exponent of Hip hop music.']
Predicate: genre

Triple: ['__subject__ Ace Wilder __predicate__ occupation __object__ Singing']
Text: ["Ace Wilder's occupation is a singer."]
Predicate: occupation

Triple: ['__subject__ Ace Wilder __predicate__ occupation __object__ Songwriter']
Text: ['Ace Wilder is a songwriter.']
Predicate: occupation

Triple: ['__subject__ Ace Wilder __predicate__ recordLabel __object__ Warner_Music_Group']
Text: ['The record label of Ace Wilder is Warner Music Group.']
Predicate: recordLabel

Triple: ['__subject__ Agustín Barboza __predicate__ background __object__ solo_singer']
Text: ['Agustin Barboza started out as a solo singer.']
Predicate: background

Triple: ['__subject__ Agustín Barboza __predicate__ birthDate __object__ 1913-05-05']
Text: ['Agustin Barboza was born on the 5th May 1913.']
Predicate: birthDate

Triple: ['__subject__ Agustín Barboza __predicate__ birthPlace __object__ Asunción']
Text: ['Agustín Barboza was born in Asunción.']
Predicate: birthPlace

Triple: ['__subject__ Agustín Barboza __predicate__ birthPlace __object__ Paraguay']
Text: ['The birth place of Agustin Barboza is Paraguay.']
Predicate: birthPlace

Triple: ['__subject__ Agustín Barboza __predicate__ deathPlace __object__ Asunción']
Text: ['Agustin Barboza died in Asuncion.']
Predicate: deathPlace

Triple: ['__subject__ Agustín Barboza __predicate__ deathPlace __object__ Paraguay']
Text: ['The birth place of Agustin Barboza was Paraguay.']
Predicate: deathPlace

Triple: ['__subject__ Ahmet Ertegun __predicate__ alternativeName __object__ A. Nugetre']
Text: ['The alternative name of Ahmet Ertegun is A. Nugetre.']
Predicate: alternativeName

Triple: ['__subject__ Ahmet Ertegun __predicate__ background __object__ non_performing_personnel']
Text: ['Ahmet Ertegun started out as a non performing personnel.']
Predicate: background

Triple: ['__subject__ Ahmet Ertegun __predicate__ birthPlace __object__ Istanbul']
Text: ['Istanbul was the birthplace of Ahmet Ertegun.']
Predicate: birthPlace

Triple: ['__subject__ Ahmet Ertegun __predicate__ birthYear __object__ 1923']
Text: ['Ahmet Ertegun was born in 1923.']
Predicate: birthYear

Triple: ['__subject__ Ahmet Ertegun __predicate__ deathPlace __object__ New_York_City']
Text: ['Ahmet Ertegun died in New York City.']
Predicate: deathPlace

Triple: ['__subject__ Ahmet Ertegun __predicate__ deathPlace __object__ United_States']
Text: ['Ahmet Ertegun died in the United States.']
Predicate: deathPlace

Triple: ['__subject__ Ahmet Ertegun __predicate__ genre __object__ Blues']
Text: ['The music genre for Ahmet Ertegun is blues.']
Predicate: genre

Triple: ['__subject__ Ahmet Ertegun __predicate__ genre __object__ Rhythm_and_blues']
Text: ["Ahmet Ertegun's genre is rhythm and blues."]
Predicate: genre

Triple: ['__subject__ Ahmet Ertegun __predicate__ genre __object__ Rock_and_roll']
Text: ['Ahmet Ertegun performs rock and roll music.']
Predicate: genre

Triple: ['__subject__ Ahmet Ertegun __predicate__ origin __object__ United_States']
Text: ['Ahmet Ertegun is from the United States.']
Predicate: origin

Triple: ['__subject__ Ahmet Ertegun __predicate__ origin __object__ Washington,_D.C.']
Text: ['Ahmet Ertegun originates from Washington D.C.']
Predicate: origin

Triple: ['__subject__ Al Anderson (NRBQ band) __predicate__ activeYearsStartYear __object__ 1966']
Text: ['Al Anderson from NRBQ band started his career in 1966.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Al Anderson (NRBQ band) __predicate__ associatedBand/associatedMusicalArtist __object__ NRBQ']
Text: ['Al Anderson plays with the band NRBQ.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Al Anderson (NRBQ band) __predicate__ associatedBand/associatedMusicalArtist __object__ The_Wildweeds']
Text: ['Al Anderson from the NRBQ band was a member of The Wildweeds.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Al Anderson (NRBQ band) __predicate__ birthDate __object__ 1947-03-13']
Text: ['Al Anderson was born on the 13/03/1947.']
Predicate: birthDate

Triple: ['__subject__ Al Anderson (NRBQ band) __predicate__ birthPlace __object__ Windsor, Connecticut, United States']
Text: ['Al Anderson, part of the band NRBQ, was born in Windsor, Connecticut, United States.']
Predicate: birthPlace

Triple: ['__subject__ Al Anderson (NRBQ band) __predicate__ birthPlace __object__ United_States']
Text: ['Al Anderson, member of the band NRBQ, was born in the United States.']
Predicate: birthPlace

Triple: ['__subject__ Al Anderson (NRBQ band) __predicate__ birthPlace __object__ Windsor,_Connecticut']
Text: ['Al Anderson of the NRBQ band was born in Windsor, Connecticut.']
Predicate: birthPlace

Triple: ['__subject__ Al Anderson (NRBQ band) __predicate__ genre __object__ Country_music']
Text: ['Al Anderson (NRBQ band) performs country music.']
Predicate: genre

Triple: ['__subject__ Al Anderson (NRBQ band) __predicate__ genre __object__ Rock_music']
Text: ['Al Anderson, a member of the band NRBQ, performs rock music.']
Predicate: genre

Triple: ['__subject__ Al Anderson (NRBQ band) __predicate__ instrument __object__ Guitar']
Text: ['Al Anderson plays the guitar for the band NRBQ.']
Predicate: instrument

Triple: ['__subject__ Al Anderson (NRBQ band) __predicate__ instrument __object__ Singing']
Text: ['Al Anderson is a singer for the band NRBQ.']
Predicate: instrument

Triple: ['__subject__ Alan Frew __predicate__ activeYearsStartYear __object__ 1983']
Text: ['Alan Frew started performing in 1983.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Alan Frew __predicate__ background __object__ solo_singer']
Text: ["Alan Frew's background is that of solo singer."]
Predicate: background

Triple: ['__subject__ Alan Frew __predicate__ birthPlace __object__ Coatbridge']
Text: ['The birth place of Alan Frew is Coatbridge.']
Predicate: birthPlace

Triple: ['__subject__ Alan Frew __predicate__ birthPlace __object__ Scotland']
Text: ['Alan Frew was born in Scotland.']
Predicate: birthPlace

Triple: ['__subject__ Alan Frew __predicate__ birthPlace __object__ United_Kingdom']
Text: ['Alan Frew was born in the United Kingdom.']
Predicate: birthPlace

Triple: ['__subject__ Alan Frew __predicate__ birthYear __object__ 1956']
Text: ['Alan Frew was born in 1956.']
Predicate: birthYear

Triple: ['__subject__ Alan Frew __predicate__ genre __object__ Alternative_rock']
Text: ['Alan Frew performs alternative rock music.']
Predicate: genre

Triple: ['__subject__ Alan Frew __predicate__ occupation __object__ Musician']
Text: ['Alan Frew is a musician.']
Predicate: occupation

Triple: ['__subject__ Alan Frew __predicate__ occupation __object__ Public_speaking']
Text: ['Alan Frew is a public speaker.']
Predicate: occupation

Triple: ['__subject__ Alan Frew __predicate__ origin __object__ Canada']
Text: ['Alan Frew comes from Canada.']
Predicate: origin

Triple: ['__subject__ Alan Frew __predicate__ origin __object__ Newmarket,_Ontario']
Text: ['Alan Frew is from Newmarket, Ontario.']
Predicate: origin

Triple: ['__subject__ Albennie Jones __predicate__ activeYearsEndYear __object__ 1950']
Text: ['Albennie Jones stopped performing in 1950.']
Predicate: activeYearsEndYear

Triple: ['__subject__ Albennie Jones __predicate__ activeYearsStartYear __object__ 1930']
Text: ['Albennie Jones began his musical career in 1930.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Albennie Jones __predicate__ background __object__ solo_singer']
Text: ['Albennie Jones is a solo singer.']
Predicate: background

Triple: ['__subject__ Albennie Jones __predicate__ birthPlace __object__ United_States']
Text: ['Albennie Jones was born in the United States.']
Predicate: birthPlace

Triple: ['__subject__ Albennie Jones __predicate__ birthYear __object__ 1914']
Text: ['Albennie Jones was born in 1914.']
Predicate: birthYear

Triple: ['__subject__ Albennie Jones __predicate__ genre __object__ Blues']
Text: ['Albennie Jones played blues music.']
Predicate: genre

Triple: ['__subject__ Albennie Jones __predicate__ genre __object__ Jazz']
Text: ['Albennie Jones is a jazz artist.']
Predicate: genre

Triple: ['__subject__ Albennie Jones __predicate__ genre __object__ Rhythm_and_blues']
Text: ['Albennie Jones is a performer of rhythm and blues.']
Predicate: genre

Triple: ['__subject__ Aleksandra Kovač __predicate__ activeYearsStartYear __object__ 1990']
Text: ['Aleksandra Kovač began her musical career in 1990.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Aleksandra Kovač __predicate__ associatedBand/associatedMusicalArtist __object__ Bebi_Dol']
Text: ['Aleksandra Kovač is associated with the musical artist Bebi Dol.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aleksandra Kovač __predicate__ associatedBand/associatedMusicalArtist __object__ K2_(Kovač_sisters_duo)']
Text: ['Aleksandra Kovač is an artist for the band K2.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aleksandra Kovač __predicate__ associatedBand/associatedMusicalArtist __object__ Kristina_Kovač']
Text: ['Aleksandra Kovac is musically involved with Kristina Kovac.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Aleksandra Kovač __predicate__ birthPlace __object__ Belgrade']
Text: ['Aleksandra Kovac was born in Belgrade.']
Predicate: birthPlace

Triple: ['__subject__ Aleksandra Kovač __predicate__ birthPlace __object__ Serbia']
Text: ['Aleksandra Kovac was born in Serbia.']
Predicate: birthPlace

Triple: ['__subject__ Aleksandra Kovač __predicate__ birthPlace __object__ Socialist_Republic_of_Serbia']
Text: ["Aleksandra Kovač's place of birth was the Socialist Republic of Serbia."]
Predicate: birthPlace

Triple: ['__subject__ Aleksandra Kovač __predicate__ birthYear __object__ 1972']
Text: ['Aleksandra Kovac was born in 1972.']
Predicate: birthYear

Triple: ['__subject__ Aleksandra Kovač __predicate__ genre __object__ Funk']
Text: ['Aleksandra Kovač performs funk music.']
Predicate: genre

Triple: ['__subject__ Aleksandra Kovač __predicate__ genre __object__ Pop_music']
Text: ['The musical genre of Aleksandra Kovac is pop music.']
Predicate: genre

Triple: ['__subject__ Alex Day __predicate__ activeYearsStartYear __object__ 2006']
Text: ['Alex Day became active in music in 2006.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Alex Day __predicate__ associatedBand/associatedMusicalArtist __object__ Chameleon_Circuit_(band)']
Text: ['Alex Day plays with the band Chameleon Circuit.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Alex Day __predicate__ associatedBand/associatedMusicalArtist __object__ Charlie_McDonnell']
Text: ['Alex Day is associated with the musical artist Charlie McDonnell.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Alex Day __predicate__ background __object__ solo_singer']
Text: ['Alex Day is a solo singer.']
Predicate: background

Triple: ['__subject__ Alex Day __predicate__ birthPlace __object__ Hornchurch']
Text: ['Alex Day was born in Hornchurch.']
Predicate: birthPlace

Triple: ['__subject__ Alex Day __predicate__ birthPlace __object__ London_Borough_of_Havering']
Text: ['Alex Day was born in the London Borough of Havering.']
Predicate: birthPlace

Triple: ['__subject__ Alex Day __predicate__ birthPlace __object__ United_Kingdom']
Text: ['Alex Day was born in the United Kingdom.']
Predicate: birthPlace

Triple: ['__subject__ Alex Day __predicate__ genre __object__ Acoustic_music']
Text: ['Acoustic music is Alex Day’s genre.']
Predicate: genre

Triple: ['__subject__ Alex Day __predicate__ genre __object__ Electronic_music']
Text: ['Alex Day performs electronic music.']
Predicate: genre

Triple: ['__subject__ Alex Day __predicate__ genre __object__ Folk_music']
Text: ['Alex Day performs folk music.']
Predicate: genre

Triple: ['__subject__ Alfred Garth Jones __predicate__ birthPlace __object__ England']
Text: ['Alfred Garth Jones was born in England.']
Predicate: birthPlace

Triple: ['__subject__ Alfred Garth Jones __predicate__ birthPlace __object__ Manchester']
Text: ['Alfred Garth Jones was born in Manchester.']
Predicate: birthPlace

Triple: ['__subject__ Alfred Garth Jones __predicate__ birthYear __object__ 1872']
Text: ['Alfred Garth Jones was born in 1872.']
Predicate: birthYear

Triple: ['__subject__ Alfred Garth Jones __predicate__ deathDate __object__ c. 1944']
Text: ['Alfred Garth Jones died in around 1944.']
Predicate: deathDate

Triple: ['__subject__ Alfred Garth Jones __predicate__ deathPlace __object__ Sidcup']
Text: ['Alfred Garth Jones died in Sidcup.']
Predicate: deathPlace

Triple: ['__subject__ Alfred Garth Jones __predicate__ nationality __object__ United_Kingdom']
Text: ['Alfred Garth Jones was born in the United Kingdom.']
Predicate: nationality

Triple: ['__subject__ Alfred Garth Jones __predicate__ professionalField __object__ Illustration']
Text: ['Alfred Garth Jones makes a living as an Illustrator.']
Predicate: professionalField

Triple: ['__subject__ Alfredo Zitarrosa __predicate__ associatedBand/associatedMusicalArtist __object__ Ciro_Pérez']
Text: ['Alfredo Zitarrosa is associated with the musical artist Ciro Pérez.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Alfredo Zitarrosa __predicate__ associatedBand/associatedMusicalArtist __object__ Yamandú_Palacios']
Text: ['Alfredo Zitarrosa is associated with Yamandú Palacios.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Alfredo Zitarrosa __predicate__ background __object__ solo_singer']
Text: ['Alfredo Zitarrosa has a background as a solo singer.']
Predicate: background

Triple: ['__subject__ Alfredo Zitarrosa __predicate__ birthPlace __object__ Uruguay']
Text: ['Alfredo Zitarrosa was born in Uruguay.']
Predicate: birthPlace

Triple: ['__subject__ Alfredo Zitarrosa __predicate__ deathPlace __object__ Montevideo']
Text: ['Alfredo Zitarrosa died in Montevideo.']
Predicate: deathPlace

Triple: ['__subject__ Alfredo Zitarrosa __predicate__ genre __object__ Candombe']
Text: ["Alfredo Zitarrosa's musical genre is Candombe."]
Predicate: genre

Triple: ['__subject__ Alfredo Zitarrosa __predicate__ genre __object__ Taquirari']
Text: ['The musical genre of Alfredo Zitarrosa is Taquirari.']
Predicate: genre

Triple: ['__subject__ Alfredo Zitarrosa __predicate__ genre __object__ Zamba_(artform)']
Text: ['Alfredo Zitarrosa performs Zamba music.']
Predicate: genre

Triple: ['__subject__ Alfredo Zitarrosa __predicate__ recordLabel __object__ Odeon_Records']
Text: ['Alfredo Zitarrosa is signed with the record label Odeon Records.']
Predicate: recordLabel

Triple: ['__subject__ Alfredo Zitarrosa __predicate__ recordLabel __object__ Orfeo_(Uruguayan_record_label)']
Text: ['Alfredo Zitarrosa belongs to the Orfeo record label.']
Predicate: recordLabel

Triple: ["__subject__ Alison O'Donnell __predicate__ associatedBand/associatedMusicalArtist __object__ Bajik"]
Text: ["Alison O'Donnell is associated with Bajik."]
Predicate: associatedBand/associatedMusicalArtist

Triple: ["__subject__ Alison O'Donnell __predicate__ associatedBand/associatedMusicalArtist __object__ Flibbertigibbet"]
Text: ["Alison O'Donnell was a member of the Flibbertigibbet band."]
Predicate: associatedBand/associatedMusicalArtist

Triple: ["__subject__ Alison O'Donnell __predicate__ associatedBand/associatedMusicalArtist __object__ Head_South_By_Weaving"]
Text: ["Alison O'Donnell is musically associated with the band Head South By Weaving."]
Predicate: associatedBand/associatedMusicalArtist

Triple: ["__subject__ Alison O'Donnell __predicate__ associatedBand/associatedMusicalArtist __object__ Mellow_Candle"]
Text: ["Alison O'Donnell is an artist for the band Mellow Candle."]
Predicate: associatedBand/associatedMusicalArtist

Triple: ["__subject__ Alison O'Donnell __predicate__ associatedBand/associatedMusicalArtist __object__ Plastik_Mak"]
Text: ["Alison O'Donnell is associated with Plastik Mak."]
Predicate: associatedBand/associatedMusicalArtist

Triple: ["__subject__ Alison O'Donnell __predicate__ associatedBand/associatedMusicalArtist __object__ The_Owl_Service_(band)"]
Text: ["Alison O'Donnell has collaborated with the band The Owl Service."]
Predicate: associatedBand/associatedMusicalArtist

Triple: ["__subject__ Alison O'Donnell __predicate__ associatedBand/associatedMusicalArtist __object__ United_Bible_Studies"]
Text: ["Alison O'Donnell is a musician for the band United Bible Studies."]
Predicate: associatedBand/associatedMusicalArtist

Triple: ["__subject__ Alison O'Donnell __predicate__ genre __object__ Folk_music"]
Text: ["Alison O'Donnell performs folk music."]
Predicate: genre

Triple: ["__subject__ Alison O'Donnell __predicate__ genre __object__ Folk_music_of_Ireland"]
Text: ["Folk music of Ireland is the genre performed by Alison O'Donnell."]
Predicate: genre

Triple: ["__subject__ Alison O'Donnell __predicate__ genre __object__ Folk_rock"]
Text: ["Alison O'Donnell's genre is folk rock."]
Predicate: genre

Triple: ["__subject__ Alison O'Donnell __predicate__ genre __object__ Psychedelic_folk"]
Text: ["Alison O'Donnell genre is Psychedelic folk."]
Predicate: genre

Triple: ["__subject__ Alison O'Donnell __predicate__ instrument __object__ Autoharp"]
Text: ["Alison O'Donnell can play the autoharp."]
Predicate: instrument

Triple: ["__subject__ Alison O'Donnell __predicate__ instrument __object__ Bodhrán"]
Text: ["Alison O'Donnell plays the bodhrán."]
Predicate: instrument

Triple: ["__subject__ Alison O'Donnell __predicate__ recordLabel __object__ Deram_Records"]
Text: ["Alison O'Donnell is signed with the record label Deram Records."]
Predicate: recordLabel

Triple: ["__subject__ Alison O'Donnell __predicate__ recordLabel __object__ Floating_World_Records"]
Text: ["The label Floating World Records signed Alison O'Donnell."]
Predicate: recordLabel

Triple: ["__subject__ Alison O'Donnell __predicate__ recordLabel __object__ Fruits_de_Mer_Records"]
Text: ["Alison O'Donnell's record label is Fruits de Mer Records."]
Predicate: recordLabel

Triple: ["__subject__ Alison O'Donnell __predicate__ recordLabel __object__ Kissing_Spell_Records"]
Text: ["Alison O'Donnell is signed to Kissing Spell Records."]
Predicate: recordLabel

Triple: ["__subject__ Alison O'Donnell __predicate__ recordLabel __object__ Osmosys_Records"]
Text: ["Alison O'Donnell is signed with Osmosys Records."]
Predicate: recordLabel

Triple: ["__subject__ Alison O'Donnell __predicate__ recordLabel __object__ Stanyan_Records"]
Text: ["Alison O'Donnell is signed with the record label Stanyan Records."]
Predicate: recordLabel

Triple: ["__subject__ Alison O'Donnell __predicate__ recordLabel __object__ Static_Caravan_Recordings"]
Text: ["Alison O'Donnell's record label is Static Caravan Recordings."]
Predicate: recordLabel

Triple: ['__subject__ Allen Forrest __predicate__ activeYearsStartYear __object__ 2005']
Text: ['Allen Forrest started his career in 2005.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Allen Forrest __predicate__ alternativeName __object__ Matchstik, Match, Allan, Forrester, Alan, Foster, Forest Matchstick, Matchstix, Allen Forrest']
Text: ['Allen Forrest has various alternative names such as Matchstik, Match, Allan, Forrester, Alan, Foster, Forest Matchstick, Matchstix, Allen Forrest.']
Predicate: alternativeName

Triple: ['__subject__ Allen Forrest __predicate__ associatedBand/associatedMusicalArtist __object__ The_Black_Eyed_Peas']
Text: ['Allen Forrest is associated with the band The Black Eyed Peas.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Allen Forrest __predicate__ background __object__ solo_singer']
Text: ['Allen Forrest is a solo singer.']
Predicate: background

Triple: ['__subject__ Allen Forrest __predicate__ birthPlace __object__ Fort Campbell, KY, raised in Dothan, AL']
Text: ['Allen Forrest was born in Fort Campbell, KY and was raised in Dothan, AL.']
Predicate: birthPlace

Triple: ['__subject__ Allen Forrest __predicate__ birthPlace __object__ Dothan,_Alabama']
Text: ['Allen Forrest was born in Dothan, Alabama.']
Predicate: birthPlace

Triple: ['__subject__ Allen Forrest __predicate__ birthPlace __object__ Fort_Campbell']
Text: ['Allen Forrest was born in Fort Campbell.']
Predicate: birthPlace

Triple: ['__subject__ Allen Forrest __predicate__ birthYear __object__ 1981']
Text: ['Allen Forrest was born in 1981.']
Predicate: birthYear

Triple: ['__subject__ Allen Forrest __predicate__ genre __object__ Acoustic_music']
Text: ['A music genre for Allen Forrest is acoustic.']
Predicate: genre

Triple: ['__subject__ Allen Forrest __predicate__ genre __object__ Hip_hop_music']
Text: ['Allen Forrest performs hip hop music.']
Predicate: genre

Triple: ['__subject__ Allen Forrest __predicate__ genre __object__ Rhythm_and_blues']
Text: ['Allen Forrest performs rhythm and blues music.']
Predicate: genre

Triple: ['__subject__ Alligator Records __predicate__ genre __object__ Blues']
Text: ['Alligator Records main genre of music is the blues.']
Predicate: genre

Triple: ['__subject__ Alternative rock __predicate__ musicFusionGenre __object__ Nu_metal']
Text: ['Nu metal is a music fusion genre of alternative rock.']
Predicate: musicFusionGenre

Triple: ['__subject__ Alternative rock __predicate__ musicSubgenre __object__ Christian_alternative_rock']
Text: ['Alternative rock has the sub genre Christian alternative rock.']
Predicate: musicSubgenre

Triple: ['__subject__ Alternative rock __predicate__ stylisticOrigin __object__ New_wave_music']
Text: ['Alternative rock originated from new wave music.']
Predicate: stylisticOrigin

Triple: ['__subject__ Alternative rock __predicate__ stylisticOrigin __object__ Punk_rock']
Text: ['Alternative rock has its stylistic origins in Punk rock.']
Predicate: stylisticOrigin

Triple: ['__subject__ Anders Osborne __predicate__ activeYearsStartYear __object__ 1989']
Text: ['Anders Osborne started performing in 1989.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Anders Osborne __predicate__ associatedBand/associatedMusicalArtist __object__ Billy_Iuso']
Text: ['Anders Osborne is associated with the musical artist Billy Iuso.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Anders Osborne __predicate__ associatedBand/associatedMusicalArtist __object__ Galactic']
Text: ['Anders Osborne has worked with the band Galactic.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Anders Osborne __predicate__ associatedBand/associatedMusicalArtist __object__ Kirk_Joseph']
Text: ['Anders Osborne has collaborated with Kirk Joseph.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Anders Osborne __predicate__ associatedBand/associatedMusicalArtist __object__ Phil_Lesh_and_Friends']
Text: ['Anders Osborne is associated with Phil Lesh and Friends.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Anders Osborne __predicate__ associatedBand/associatedMusicalArtist __object__ Tab_Benoit']
Text: ['Anders Osborne has worked with Tab Benoit.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Anders Osborne __predicate__ associatedBand/associatedMusicalArtist __object__ Theresa_Andersson']
Text: ['Anders Osborne is associated with the musical artist Theresa Andersson.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Anders Osborne __predicate__ associatedBand/associatedMusicalArtist __object__ Voice_of_the_Wetlands_All-Stars']
Text: ['Anders Osborne is associated with Voice of the Wetlands All-Stars.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Anders Osborne __predicate__ genre __object__ Blues']
Text: ["Anders Osborne's genre is Blues."]
Predicate: genre

Triple: ['__subject__ Anders Osborne __predicate__ genre __object__ Rock_music']
Text: ["Anders Osborne's genre is rock music."]
Predicate: genre

Triple: ['__subject__ Anders Osborne __predicate__ occupation __object__ Guitarist']
Text: ['Anders Osborne is a guitarist.']
Predicate: occupation

Triple: ['__subject__ Anders Osborne __predicate__ occupation __object__ Singing']
Text: ['Anders Osborne is a singer.']
Predicate: occupation

Triple: ['__subject__ Anders Osborne __predicate__ recordLabel __object__ Okeh_Records']
Text: ['The record label of Anders Osborne is Okeh records.']
Predicate: recordLabel

Triple: ['__subject__ Anders Osborne __predicate__ recordLabel __object__ Rabadash_Records']
Text: ['Anders Osborne is signed to the record label Rabadash Records.']
Predicate: recordLabel

Triple: ['__subject__ Andra (singer) __predicate__ activeYearsStartYear __object__ 2000']
Text: ['The singer called Andra became active in the year 2000.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Andra (singer) __predicate__ associatedBand/associatedMusicalArtist __object__ Andreea_Bălan']
Text: ['Andra is a singer associated with Andreea Balan.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Andra (singer) __predicate__ associatedBand/associatedMusicalArtist __object__ CRBL']
Text: ['The singer Andra is associated with the band CRBL.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Andra (singer) __predicate__ associatedBand/associatedMusicalArtist __object__ Marius_Moga']
Text: ['Andra (singer) is associated with Marius Moga.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Andra (singer) __predicate__ associatedBand/associatedMusicalArtist __object__ Puya_(singer)']
Text: ['Andra is a singer associated with the singer Puya.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Andra (singer) __predicate__ background __object__ solo_singer']
Text: ['Andra began her career as a solo singer.']
Predicate: background

Triple: ['__subject__ Andra (singer) __predicate__ birthPlace __object__ Câmpia_Turzii']
Text: ["The singer Andra's birth place is Câmpia Turzii."]
Predicate: birthPlace

Triple: ['__subject__ Andra (singer) __predicate__ birthPlace __object__ Romania']
Text: ['The singer Andra was born in Romania.']
Predicate: birthPlace

Triple: ['__subject__ Andra (singer) __predicate__ birthYear __object__ 1986']
Text: ['Andra (singer) was born in 1986.']
Predicate: birthYear

Triple: ['__subject__ Andra (singer) __predicate__ genre __object__ Dance-pop']
Text: ['The musical genre of the singer Andra is dance pop.']
Predicate: genre

Triple: ['__subject__ Andra (singer) __predicate__ genre __object__ Pop_music']
Text: ['Andra sings pop music.']
Predicate: genre

Triple: ['__subject__ Andra (singer) __predicate__ occupation __object__ singer, Reality television judge']
Text: ['Andra makes a living as a singer and a reality television judge.']
Predicate: occupation

Triple: ['__subject__ Andra (singer) __predicate__ occupation __object__ Singing']
Text: ['Andra sings for a living.']
Predicate: occupation

Triple: ['__subject__ Andrew Rayel __predicate__ associatedBand/associatedMusicalArtist __object__ Armin Van Buuren, Bobina, Mark Sixma, Jonathan Mendelsohn, Christian Burns, Jwaydan, Alexander Popov, Jano, Alexandre Bergheau, Jonny Rose, Sylvia Tosun, Lira Yin, Alexandra Badoi']
Text: ['Andrew Rayel is associated with a number of musical artists, these include: Armin Van Buuren, Bobina, Mark Sixma, Jonathan Mendelsohn, Christian Burns, Jwaydan, Alexander Popov, Jano, Alexandre Bergheau, Jonny Rose, Sylvia Tosun, Lira Yin, and Alexandra Badoi.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Andrew Rayel __predicate__ associatedBand/associatedMusicalArtist __object__ Armin_van_Buuren']
Text: ['Andrew Rayel is associated with the musical artist Armin van Buuren.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Andrew Rayel __predicate__ associatedBand/associatedMusicalArtist __object__ Bobina']
Text: ['Andrew Rayel is associated with the musical artist, Bobina.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Andrew Rayel __predicate__ associatedBand/associatedMusicalArtist __object__ Jonathan_Mendelsohn']
Text: ['Andrew Rayel is associated with the musical artist Jonathan Mendelsohn.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Andrew Rayel __predicate__ associatedBand/associatedMusicalArtist __object__ Mark_Sixma']
Text: ['Andrew Rayel is associated with Mark Sixma.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Andrew Rayel __predicate__ genre __object__ Trance_music']
Text: ['The musical genre of Andrew Rayel is trance music.']
Predicate: genre

Triple: ['__subject__ Andrew Rayel __predicate__ instrument __object__ Piano']
Text: ['Andrew Rayel plays the piano.']
Predicate: instrument

Triple: ['__subject__ Andrew Rayel __predicate__ instrument __object__ String_instrument']
Text: ['Andrew Rayel was a string instrumentalist.']
Predicate: instrument

Triple: ['__subject__ Andrew White (musician) __predicate__ activeYearsStartYear __object__ 2003']
Text: ['Andrew White started his musical career in 2003.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Andrew White (musician) __predicate__ associatedBand/associatedMusicalArtist __object__ Kaiser_Chiefs']
Text: ['The band Kaiser Chiefs included the member Andrew White (musician).']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Andrew White (musician) __predicate__ background __object__ non_vocal_instrumentalist']
Text: ['The musician Andrew White is a non-vocal instrumentalist.']
Predicate: background

Triple: ['__subject__ Andrew White (musician) __predicate__ recordLabel __object__ Fiction']
Text: ['The musician Andrew White was signed to the record label Fiction.']
Predicate: recordLabel

Triple: ['__subject__ Andrew White (musician) __predicate__ recordLabel __object__ Polydor_Records']
Text: ['Andrew White is a musician signed to Polydor Records.']
Predicate: recordLabel

Triple: ['__subject__ Andrew White (musician) __predicate__ recordLabel __object__ Universal_Records_(defunct_record_label)']
Text: ["The musician Andrew White's record label is the (now defunct) Universal Records."]
Predicate: recordLabel

Triple: ['__subject__ Armin van Buuren __predicate__ genre __object__ House_music']
Text: ['Armin van Buuren plays House music.']
Predicate: genre

Triple: ['__subject__ Black metal __predicate__ musicFusionGenre __object__ Death_metal']
Text: ['Death metal is a musical fusion of black metal.']
Predicate: musicFusionGenre

Triple: ['__subject__ Canada __predicate__ language __object__ French_language']
Text: ['The French language is spoken in Canada.']
Predicate: language

Triple: ['__subject__ Canada __predicate__ officialLanguage __object__ French_language']
Text: ['The official language of Canada is French.']
Predicate: officialLanguage

Triple: ['__subject__ Christian Burns __predicate__ genre __object__ House_music']
Text: ['Christian Burns performs house music.']
Predicate: genre

Triple: ['__subject__ Christian Burns __predicate__ genre __object__ Pop_music']
Text: ['Christian Burns performs pop music.']
Predicate: genre

Triple: ['__subject__ Country music __predicate__ instrument __object__ Banjo']
Text: ['The Banjo instrument is closely associated with country music.']
Predicate: instrument

Triple: ['__subject__ Country music __predicate__ stylisticOrigin __object__ Blues']
Text: ['Country music originated from blues music.']
Predicate: stylisticOrigin

Triple: ['__subject__ Deram Records __predicate__ genre __object__ Pop_music']
Text: ['Deram Records deal with the pop music genre.']
Predicate: genre

Triple: ['__subject__ Electropop __predicate__ stylisticOrigin __object__ Disco']
Text: ['The stylistic origin of electropop is disco.']
Predicate: stylisticOrigin

Triple: ['__subject__ Hip hop music __predicate__ derivative __object__ Drum_and_bass']
Text: ['Drum and bass is a derivative of Hip hop music.']
Predicate: derivative

Triple: ['__subject__ Hip hop music __predicate__ stylisticOrigin __object__ Disco']
Text: ['Hip hop music has its origins in Disco.']
Predicate: stylisticOrigin

Triple: ['__subject__ Hip hop music __predicate__ stylisticOrigin __object__ Jazz']
Text: ['Hip Hop music has its stylistic origins in Jazz.']
Predicate: stylisticOrigin

Triple: ['__subject__ Indie rock __predicate__ instrument __object__ Guitar']
Text: ['The guitar is played in indie rock music.']
Predicate: instrument

Triple: ['__subject__ Indie rock __predicate__ stylisticOrigin __object__ Garage_rock']
Text: ['Indie rock has its stylistic origins in Garage rock.']
Predicate: stylisticOrigin

Triple: ['__subject__ Jazz __predicate__ derivative __object__ Funk']
Text: ['Funk is a derivative of Jazz.']
Predicate: derivative

Triple: ['__subject__ Jazz __predicate__ instrument __object__ Clarinet']
Text: ['The clarinet is used in Jazz music.']
Predicate: instrument

Triple: ['__subject__ Jazz __predicate__ musicFusionGenre __object__ Afrobeat']
Text: ['Afrobeat is a fusion genre of Jazz.']
Predicate: musicFusionGenre

Triple: ['__subject__ Jazz __predicate__ stylisticOrigin __object__ Folk_music']
Text: ['Jazz has its stylistic origins in folk music.']
Predicate: stylisticOrigin

Triple: ['__subject__ Jwaydan Moyine __predicate__ associatedBand/associatedMusicalArtist __object__ John_Digweed']
Text: ['Jwaydan Moyine is associated with the musical artist John Digweed.']
Predicate: associatedBand/associatedMusicalArtist

Triple: ['__subject__ Kill Rock Stars __predicate__ location __object__ Portland,_Oregon']
Text: ['Kill Rock Stars is located in Portland, Oregon.']
Predicate: location

Triple: ['__subject__ London __predicate__ governingBody __object__ Greater_London_Authority']
Text: ['London is governed by the Greater London Authority.']
Predicate: governingBody

Triple: ['__subject__ London __predicate__ leader __object__ Boris_Johnson']
Text: ['Boris Johnson is a leader in London.']
Predicate: leader

Triple: ['__subject__ London __predicate__ leaderTitle __object__ European_Parliament']
Text: ['The leader of London is the European Parliament.']
Predicate: leaderTitle

Triple: ['__subject__ London __predicate__ leaderTitle __object__ Parliament_of_the_United_Kingdom']
Text: ['The London government is known as the Parliament of the U.K.']
Predicate: leaderTitle

Triple: ['__subject__ Manchester __predicate__ leader __object__ Labour_Party_(UK)']
Text: ['The Labour Party (UK) is the leader of Manchester.']
Predicate: leader

Triple: ['__subject__ Montevideo __predicate__ country __object__ Uruguay']
Text: ['Montevideo is in the country of Uruguay.']
Predicate: country

Triple: ['__subject__ Montevideo __predicate__ leader __object__ Daniel_Martínez_(politician)']
Text: ["The politician, Daniel Martinez, is Montevideo's leader."]
Predicate: leader

Triple: ['__subject__ NRBQ __predicate__ genre __object__ Country_music']
Text: ['The musical genre of the band NRBQ is country music.']
Predicate: genre

Triple: ['__subject__ Paraguay __predicate__ ethnicGroup __object__ Mestizo']
Text: ['Paraguay has a ethnic group called the Mestizo.']
Predicate: ethnicGroup

Triple: ['__subject__ Paraguay __predicate__ language __object__ Spanish_language']
Text: ['The language is Paraguay is Spanish.']
Predicate: language

Triple: ['__subject__ Paraguay __predicate__ leader __object__ Juan_Afara']
Text: ['The leader of Paraguay is called Juan Afara.']
Predicate: leader

Triple: ['__subject__ Philips Records __predicate__ parentCompany __object__ Universal_Music_Group']
Text: ['Universal Music group is the parent company of Philips Records.']
Predicate: parentCompany

Triple: ['__subject__ Poland __predicate__ ethnicGroup __object__ Kashubians']
Text: ['Kashubians are an ethnic group of Poland.']
Predicate: ethnicGroup

Triple: ['__subject__ Pop music __predicate__ musicFusionGenre __object__ Disco']
Text: ['Disco music is a fusion genre of pop music.']
Predicate: musicFusionGenre

Triple: ['__subject__ Post-metal __predicate__ instrument __object__ Cello']
Text: ['Post-metal music uses the cello.']
Predicate: instrument

Triple: ['__subject__ Rhythm and blues __predicate__ derivative __object__ Disco']
Text: ['Disco is a derivative of rhythm and blues.']
Predicate: derivative

Triple: ['__subject__ Rhythm and blues __predicate__ derivative __object__ Funk']
Text: ['Funk is a derivative of rhythm and blues.']
Predicate: derivative

Triple: ['__subject__ Rhythm and blues __predicate__ stylisticOrigin __object__ Blues']
Text: ['Rhythm and blues music originated from the blues.']
Predicate: stylisticOrigin

Triple: ['__subject__ Rock and roll __predicate__ stylisticOrigin __object__ Country_music']
Text: ['Rock and roll originated from country music.']
Predicate: stylisticOrigin

Triple: ['__subject__ Rock music __predicate__ musicFusionGenre __object__ Bhangra_(music)']
Text: ['A musical fusion of rock music is bhangra music.']
Predicate: musicFusionGenre

Triple: ['__subject__ Rock music __predicate__ stylisticOrigin __object__ Blues']
Text: ['Rock music originated from blues music.']
Predicate: stylisticOrigin

Triple: ['__subject__ Rock music __predicate__ stylisticOrigin __object__ Country_music']
Text: ['Rock music originated from country music.']
Predicate: stylisticOrigin

Triple: ['__subject__ Rock music __predicate__ stylisticOrigin __object__ Folk_music']
Text: ['Rock music has its stylistic origins in folk music.']
Predicate: stylisticOrigin

Triple: ['__subject__ Ska punk __predicate__ stylisticOrigin __object__ Punk_rock']
Text: ['Ska punk originated from punk rock music.']
Predicate: stylisticOrigin

Triple: ['__subject__ Ska punk __predicate__ stylisticOrigin __object__ Ska']
Text: ['Ska punk originated from ska music.']
Predicate: stylisticOrigin

Triple: ['__subject__ Suburban Legends __predicate__ bandMember __object__ Brian_Robertson_(trombonist)']
Text: ['Brian Robertson plays the trombone in the band Suburban Legends.']
Predicate: bandMember

Triple: ['__subject__ Suburban Legends __predicate__ genre __object__ Pop_music']
Text: ["Suburban Legends' genre is pop music."]
Predicate: genre

Triple: ['__subject__ Suburban Legends __predicate__ genre __object__ Rock_music']
Text: ["The band Suburban Legends' genre is Rock music."]
Predicate: genre

Triple: ['__subject__ Suburban Legends __predicate__ genre __object__ Ska']
Text: ['Suburban Legends performs Ska music.']
Predicate: genre

Triple: ['__subject__ Synthpop __predicate__ derivative __object__ House_music']
Text: ['Synthpop is derived from house music.']
Predicate: derivative

Triple: ['__subject__ Synthpop __predicate__ stylisticOrigin __object__ Disco']
Text: ['Synthpop originated from Disco.']
Predicate: stylisticOrigin

Triple: ['__subject__ Synthpop __predicate__ stylisticOrigin __object__ New_wave_music']
Text: ['Synthpop is derived from New wave music.']
Predicate: stylisticOrigin

Triple: ['__subject__ Trance music __predicate__ stylisticOrigin __object__ House_music']
Text: ['Trance music originated from house music.']
Predicate: stylisticOrigin

Triple: ['__subject__ Trance music __predicate__ stylisticOrigin __object__ Pop_music']
Text: ['Trance music has its origins in Pop music.']
Predicate: stylisticOrigin

Triple: ['__subject__ United Kingdom __predicate__ capital __object__ London']
Text: ['London is the capital of the United Kingdom.']
Predicate: capital

Triple: ['__subject__ United Kingdom __predicate__ leader __object__ Elizabeth_II']
Text: ['The leader of the United Kingdom is Elizabeth II.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ African_Americans']
Text: ['African Americans are an ethnic group in the United States.']
Predicate: ethnicGroup

Triple: ['__subject__ Uruguay __predicate__ anthem __object__ National_Anthem_of_Uruguay']
Text: ['Uruguay’s national anthem is called the National Anthem of Uruguay.']
Predicate: anthem

Triple: ['__subject__ Uruguay __predicate__ currency __object__ Uruguayan_peso']
Text: ['The Uruguayan currency is the Uruguayan peso.']
Predicate: currency

Triple: ['__subject__ Uruguay __predicate__ demonym __object__ Uruguayans']
Text: ['People in Uruguay are known as Uruguayans.']
Predicate: demonym

Triple: ['__subject__ Uruguay __predicate__ language __object__ Spanish_language']
Text: ['Spanish is spoken in Uruguay.']
Predicate: language

Triple: ['__subject__ Uruguay __predicate__ leader __object__ Raúl_Fernando_Sendic_Rodríguez']
Text: ["Raúl Fernando Sendic Rodríguez is Uruguay's leader."]
Predicate: leader

Triple: ['__subject__ Uruguay __predicate__ leader __object__ Tabaré_Vázquez']
Text: ["Uruguay's leader is Tabaré Vázquez."]
Predicate: leader

Triple: ['__subject__ Alan Bean __predicate__ almaMater __object__ UT Austin, B.S. 1955']
Text: ['The alma mater of Alan Bean is UT Austin. He graduated from it with a B.S. in 1955.']
Predicate: almaMater

Triple: ['__subject__ Alan Bean __predicate__ birthDate __object__ 1932-03-15']
Text: ['Alan Bean was born on the 15th of March 1932.']
Predicate: birthDate

Triple: ['__subject__ Alan Bean __predicate__ birthName __object__ Alan LaVern Bean']
Text: ['Alan Bean\'s full name was "Alan LaVern Bean".']
Predicate: birthName

Triple: ['__subject__ Alan Bean __predicate__ birthPlace __object__ Wheeler,_Texas']
Text: ['Alan Bean was born in Wheeler, Texas.']
Predicate: birthPlace

Triple: ['__subject__ Alan Bean __predicate__ dateOfRetirement __object__ June 1981']
Text: ['Alan Bean retired on June 1981.']
Predicate: dateOfRetirement

Triple: ['__subject__ Alan Bean __predicate__ occupation __object__ Test_pilot']
Text: ['Alan Bean was a test pilot.']
Predicate: occupation

Triple: ['__subject__ Alan Bean __predicate__ status __object__ Retired']
Text: ['Alan Bean is retired.']
Predicate: status

Triple: ['__subject__ Alan Bean __predicate__ timeInSpace __object__ 100305.0(minutes)']
Text: ['Alan Bean spent 100305.0 minutes in Space.']
Predicate: timeInSpace

Triple: ['__subject__ Alan Bean __predicate__ mission __object__ Apollo_12']
Text: ['Alan Bean was a part of the crew of Apollo 12.']
Predicate: mission

Triple: ['__subject__ Alan Bean __predicate__ selectedByNasa __object__ 1963']
Text: ['Alan Bean was selected by Nasa in 1963.']
Predicate: selectedByNasa

Triple: ['__subject__ Alan Shepard __predicate__ almaMater __object__ NWC, M.A. 1957']
Text: ['Alan Shepard graduated from NWC with an M.A. in 1957.']
Predicate: almaMater

Triple: ['__subject__ Alan Shepard __predicate__ birthDate __object__ 1923-11-18']
Text: ['Alan Shepard was born November 18th, 1923.']
Predicate: birthDate

Triple: ['__subject__ Alan Shepard __predicate__ birthPlace __object__ New_Hampshire']
Text: ["Alan Shepard's birth place was New Hampshire."]
Predicate: birthPlace

Triple: ['__subject__ Alan Shepard __predicate__ dateOfRetirement __object__ 1974-08-01']
Text: ['Alan Shepard retired on 1974-08-01.']
Predicate: dateOfRetirement

Triple: ['__subject__ Alan Shepard __predicate__ deathDate __object__ 1998-07-21']
Text: ['Alan Shepard died on the 21st of July, 1998.']
Predicate: deathDate

Triple: ['__subject__ Alan Shepard __predicate__ nationality __object__ United_States']
Text: ['The nationality of Alan Shepard is United States.']
Predicate: nationality

Triple: ['__subject__ Alan Shepard __predicate__ occupation __object__ Test_pilot']
Text: ["Alan Shepard's occupation was a test pilot."]
Predicate: occupation

Triple: ['__subject__ Alan Shepard __predicate__ servedAsChiefOfTheAstronautOfficeIn __object__ 1963']
Text: ['Alan Shepard was the Chief of the Astronaut Office in 1963.']
Predicate: servedAsChiefOfTheAstronautOfficeIn

Triple: ['__subject__ Alan Shepard __predicate__ status __object__ Deceased']
Text: ['Alan Shepard is dead.']
Predicate: status

Triple: ['__subject__ Alan Shepard __predicate__ timeInSpace __object__ 13017.0(minutes)']
Text: ["Alan Shepard's time in space amounted to 13017.0 minutes."]
Predicate: timeInSpace

Triple: ['__subject__ Alan Shepard __predicate__ title __object__ Chief_of_the_Astronaut_Office']
Text: ['Alan Shepard was the Chief of the Astronaut Office.']
Predicate: title

Triple: ['__subject__ Alan Shepard __predicate__ mission __object__ Apollo_14']
Text: ['Alan Shepard was a crew member of Apollo 14.']
Predicate: mission

Triple: ['__subject__ Alan Shepard __predicate__ ribbonAward __object__ American Defense Service ribbon.svg']
Text: ['Alan Shepard was awarded the american defence service ribbon.']
Predicate: ribbonAward

Triple: ['__subject__ Alan Shepard __predicate__ selectedByNasa __object__ 1959']
Text: ['NASA selected Alan Shepard in 1959.']
Predicate: selectedByNasa

Triple: ['__subject__ Apollo 11 __predicate__ operator __object__ NASA']
Text: ['Apollo 11 was operated by NASA.']
Predicate: operator

Triple: ['__subject__ Apollo 12 __predicate__ backupPilot __object__ Alfred_Worden']
Text: ['Alfred Worden was a backup pilot of Apollo 12.']
Predicate: backupPilot

Triple: ['__subject__ Apollo 12 __predicate__ commander __object__ David_Scott']
Text: ['Apollo 12 was commanded by David Scott.']
Predicate: commander

Triple: ['__subject__ Apollo 12 __predicate__ operator __object__ NASA']
Text: ['The operator of Apollo 12 was NASA.']
Predicate: operator

Triple: ['__subject__ Apollo 8 __predicate__ commander __object__ Frank_Borman']
Text: ['Frank Borman was an Apollo 8 Commander.']
Predicate: commander

Triple: ['__subject__ Apollo 8 __predicate__ crewMembers __object__ Frank_Borman']
Text: ['Frank Borman was a member of the crew on Apollo 8.']
Predicate: crewMembers

Triple: ['__subject__ British Hong Kong __predicate__ representative __object__ Chris_Patten']
Text: ['Chris Patten served as a representative of British Hong Kong.']
Predicate: representative

Triple: ['__subject__ Buzz Aldrin __predicate__ alternativeName __object__ Edwin E. Aldrin, Jr.']
Text: ['Edwin E. Aldrin, Jr. was commonly known as Buzz Aldrin.']
Predicate: alternativeName

Triple: ['__subject__ Buzz Aldrin __predicate__ awards __object__ 20']
Text: ["The number of Buzz Aldrin's awards are 20."]
Predicate: awards

Triple: ['__subject__ Buzz Aldrin __predicate__ birthDate __object__ 1930-01-20']
Text: ["Buzz Aldrin's birth date was 1930 01 20."]
Predicate: birthDate

Triple: ['__subject__ Buzz Aldrin __predicate__ birthName __object__ Edwin Eugene Aldrin Jr.']
Text: ["Buzz Aldrin's birth name is Edwin Eugene Aldrin Jr."]
Predicate: birthName

Triple: ['__subject__ Buzz Aldrin __predicate__ birthPlace __object__ Glen_Ridge,_New_Jersey']
Text: ['Buzz Aldrin was born in Glen Ridge, New Jersey.']
Predicate: birthPlace

Triple: ['__subject__ Buzz Aldrin __predicate__ dateOfRetirement __object__ 1971-07-01']
Text: ['Buzz Aldrin retired on the 7th of January 1971.']
Predicate: dateOfRetirement

Triple: ['__subject__ Buzz Aldrin __predicate__ occupation __object__ Fighter_pilot']
Text: ['Buzz Aldrin was a fighter pilot.']
Predicate: occupation

Triple: ['__subject__ Buzz Aldrin __predicate__ status __object__ Retired']
Text: ['Buzz Aldrin is retired.']
Predicate: status

Triple: ['__subject__ Buzz Aldrin __predicate__ timeInSpace __object__ 52.0(minutes)']
Text: ['Buzz Aldrin was in space for 52 minutes.']
Predicate: timeInSpace

Triple: ['__subject__ Buzz Aldrin __predicate__ ribbonAward __object__ Legion of Merit ribbon.svg']
Text: ['Buzz Aldrin was awarded the Legion of Merit ribbon.']
Predicate: ribbonAward

Triple: ['__subject__ California __predicate__ fossil __object__ Smilodon']
Text: ['Smilodon is a fossil from California.']
Predicate: fossil

Triple: ['__subject__ California __predicate__ senators __object__ Dianne_Feinstein']
Text: ['The Senator representing California was Dianne Feinstein.']
Predicate: senators

Triple: ['__subject__ Dallas __predicate__ part __object__ Collin_County,_Texas']
Text: ['Dallas is in Collin County, Texas.']
Predicate: part

Triple: ['__subject__ Dallas __predicate__ partsType __object__ List_of_counties_in_Texas']
Text: ['Dallas is a county in Texas.']
Predicate: partsType

Triple: ['__subject__ Distinguished Service Medal (United States Navy) __predicate__ higher __object__ Department_of_Commerce_Gold_Medal']
Text: ['The Distinguished service medal from the Navy is higher than the department of commerce gold medal.']
Predicate: higher

Triple: ['__subject__ Elliot See __predicate__ almaMater __object__ University_of_Texas_at_Austin']
Text: ['Elliot See was a student at University of Texas at Austin.']
Predicate: almaMater

Triple: ['__subject__ Elliot See __predicate__ birthDate __object__ 1927-07-23']
Text: ['Elliot See was born on the 23rd of July 1927.']
Predicate: birthDate

Triple: ['__subject__ Elliot See __predicate__ birthPlace __object__ Dallas']
Text: ['Elliot See was born in Dallas.']
Predicate: birthPlace

Triple: ['__subject__ Elliot See __predicate__ nationality __object__ United_States']
Text: ['The nationality of Elliot See is United States.']
Predicate: nationality

Triple: ['__subject__ Elliot See __predicate__ selectedByNasa __object__ 1962']
Text: ['NASA selected Elliot See in 1962.']
Predicate: selectedByNasa

Triple: ['__subject__ Glen Ridge, New Jersey __predicate__ isPartOf __object__ Essex_County,_New_Jersey']
Text: ['Glen Ridge is in the Essex County in New Jersey.']
Predicate: isPartOf

Triple: ['__subject__ New Hampshire __predicate__ bird __object__ Purple_finch']
Text: ['The purple finch is a native bird to New Hampshire.']
Predicate: bird

Triple: ['__subject__ St. Louis __predicate__ isPartOf __object__ Kingdom_of_France']
Text: ['St. Louis was situated in the Kingdom of France.']
Predicate: isPartOf

Triple: ['__subject__ St. Louis __predicate__ leader __object__ Francis_G._Slay']
Text: ["The name of St Louis' leader is Francis G. Slay."]
Predicate: leader

Triple: ['__subject__ United States __predicate__ leader __object__ Joe_Biden']
Text: ['Joe Biden is the United States leader.']
Predicate: leader

Triple: ['__subject__ University of Texas at Austin __predicate__ affiliation __object__ University_of_Texas_System']
Text: ['University of Texas at Austin is affiliated with University of Texas System.']
Predicate: affiliation

Triple: ['__subject__ University of Texas at Austin __predicate__ competeIn __object__ Big_12_Conference']
Text: ['The University of Texas at Austin is competing in the Big 12 Conference.']
Predicate: competeIn

Triple: ['__subject__ University of Texas at Austin __predicate__ president __object__ Gregory_L._Fenves']
Text: ['Gregory L. Fenves is the President of University of Texas at Austin.']
Predicate: president

Triple: ['__subject__ William Anders __predicate__ almaMater __object__ AFIT, M.S. 1962']
Text: ['In 1962, William Anders received an M.S. from his alma mater AFIT.']
Predicate: almaMater

Triple: ['__subject__ William Anders __predicate__ birthDate __object__ 1933-10-17']
Text: ['William Anders was born on October 17th, 1933.']
Predicate: birthDate

Triple: ['__subject__ William Anders __predicate__ birthPlace __object__ British_Hong_Kong']
Text: ['William Anders was born in British Hong Kong.']
Predicate: birthPlace

Triple: ['__subject__ William Anders __predicate__ dateOfRetirement __object__ 1969-09-01']
Text: ['William Anders retired on September 1st, 1969.']
Predicate: dateOfRetirement

Triple: ['__subject__ William Anders __predicate__ nationality __object__ United_States']
Text: ['William Anders has a nationality that is of the United States.']
Predicate: nationality

Triple: ['__subject__ William Anders __predicate__ occupation __object__ Fighter_pilot']
Text: ['William Anders was a Fighter pilot.']
Predicate: occupation

Triple: ['__subject__ William Anders __predicate__ servedAsChiefOfTheAstronautOfficeIn __object__ 1976']
Text: ['William Anders served as Chief of the Astronaut Office in 1976.']
Predicate: servedAsChiefOfTheAstronautOfficeIn

Triple: ['__subject__ William Anders __predicate__ status __object__ Retired']
Text: ['William Anders is retired.']
Predicate: status

Triple: ['__subject__ William Anders __predicate__ timeInSpace __object__ 8820.0(minutes)']
Text: ['William anders spent 8820 minutes in space.']
Predicate: timeInSpace

Triple: ['__subject__ William Anders __predicate__ title __object__ United_States_Ambassador_to_Norway']
Text: ['William Anders serves as Ambassador to Norway in the United States.']
Predicate: title

Triple: ['__subject__ William Anders __predicate__ mission __object__ Apollo_8']
Text: ['William Anders served as a crew member on Apollo 8.']
Predicate: mission

Triple: ['__subject__ William Anders __predicate__ selectedByNasa __object__ 1963']
Text: ['William Anders was selected by NASA in 1963.']
Predicate: selectedByNasa

Triple: ['__subject__ A.C. Milan __predicate__ league __object__ Serie_A']
Text: ['A.C. Milan play in Serie A.']
Predicate: league

Triple: ['__subject__ A.C. Milan __predicate__ manager __object__ Siniša_Mihajlović']
Text: ['Siniša Mihajlović is the manager for A.C. Milan.']
Predicate: manager

Triple: ['__subject__ A.S. Roma __predicate__ league __object__ Serie_A']
Text: ['A.S. Roma plays in the Serie A.']
Predicate: league

Triple: ['__subject__ A.S. Roma __predicate__ position __object__ Serie_A']
Text: ["A.S. Roma's position is the Serie A."]
Predicate: position

Triple: ['__subject__ AZ Alkmaar __predicate__ ground __object__ AFAS_Stadion']
Text: ['AFAS Stadion is the ground of AZ Alkmaar.']
Predicate: ground

Triple: ['__subject__ Aaron Boogaard __predicate__ birthDate __object__ 1986-08-11']
Text: ['Aaron Boogaard was born 11/08/1986.']
Predicate: birthDate

Triple: ['__subject__ Aaron Boogaard __predicate__ birthPlace __object__ Regina,_Saskatchewan']
Text: ["Aaron Boogaard's birthplace is Regina, Saskatchewan."]
Predicate: birthPlace

Triple: ['__subject__ Aaron Boogaard __predicate__ birthPlace __object__ Saskatchewan']
Text: ['Aaron Boogaard was born in Saskatchewan.']
Predicate: birthPlace

Triple: ['__subject__ Aaron Boogaard __predicate__ birthYear __object__ 1986']
Text: ['Aaron Boogaard was born in 1986.']
Predicate: birthYear

Triple: ['__subject__ Aaron Boogaard __predicate__ club __object__ Wichita_Thunder']
Text: ["Aaron Boogaard's club is Wichita Thunder."]
Predicate: club

Triple: ['__subject__ Aaron Boogaard __predicate__ draftTeam __object__ Minnesota_Wild']
Text: ["Aaron Boogaard's draft team is Minnesota Wild."]
Predicate: draftTeam

Triple: ['__subject__ Aaron Boogaard __predicate__ height __object__ 1.905']
Text: ['Aaron Boogaard is 1.905m high.']
Predicate: height

Triple: ['__subject__ Aaron Hunt __predicate__ birthPlace __object__ Goslar']
Text: ['Aaron Hunt was born in Goslar.']
Predicate: birthPlace

Triple: ['__subject__ Aaron Hunt __predicate__ birthPlace __object__ West_Germany']
Text: ['Aaron Hunt was born in West Germany.']
Predicate: birthPlace

Triple: ['__subject__ Aaron Hunt __predicate__ club __object__ Germany_national_under-21_football_team']
Text: ['Aaron Hunt plays for the German National Under 21 football team.']
Predicate: club

Triple: ['__subject__ Aaron Hunt __predicate__ club __object__ Germany_national_youth_football_team']
Text: ['Aaron Hunt played for the Germany national youth football team.']
Predicate: club

Triple: ['__subject__ Aaron Hunt __predicate__ club __object__ Goslarer_SC_08']
Text: ['Aaron Hunt plays for Goslarer SC 08.']
Predicate: club

Triple: ['__subject__ Aaron Hunt __predicate__ club __object__ Hamburger_SV']
Text: ['Aaron Hunt plays for the club, Hamburger SV.']
Predicate: club

Triple: ['__subject__ Aaron Hunt __predicate__ club __object__ SV_Werder_Bremen_II']
Text: ['Aaron Hunt plays for SV Werder Bremen II.']
Predicate: club

Triple: ['__subject__ Aaron Hunt __predicate__ club __object__ VfL_Wolfsburg']
Text: ["Aaron Hunt's club is VfL Wolfsburg."]
Predicate: club

Triple: ['__subject__ Aaron Hunt __predicate__ youthclub __object__ Goslarer_SC_08']
Text: ['Aaron Hunt played for the Goslarer SC 08 youth team.']
Predicate: youthclub

Triple: ['__subject__ Aaron Hunt __predicate__ youthclub __object__ SV_Werder_Bremen']
Text: ["Aaron Hunt's is in the youth club SV Werder Bremen."]
Predicate: youthclub

Triple: ['__subject__ Abel Hernández __predicate__ birthPlace __object__ Pando,_Uruguay']
Text: ["Abel Hernandez's birthplace is Pando, Uruguay."]
Predicate: birthPlace

Triple: ['__subject__ Abel Hernández __predicate__ birthPlace __object__ Uruguay']
Text: ['Abel Hernández was born in Uruguay.']
Predicate: birthPlace

Triple: ['__subject__ Abel Hernández __predicate__ club __object__ Central_Español']
Text: ["Abel Hernández's club is Central Español."]
Predicate: club

Triple: ['__subject__ Abel Hernández __predicate__ club __object__ Hull_City_A.F.C.']
Text: ["Abel Hernández's club is Hull City A.F.C."]
Predicate: club

Triple: ['__subject__ Abel Hernández __predicate__ club __object__ Peñarol']
Text: ["Abel Hernandez's club is Penarol."]
Predicate: club

Triple: ['__subject__ Abel Hernández __predicate__ club __object__ U.S._Città_di_Palermo']
Text: ["Abel Hernandez's club is US Citta di Palermo."]
Predicate: club

Triple: ['__subject__ Abel Hernández __predicate__ club __object__ Uruguay_national_under-20_football_team']
Text: ["Abel Hernandez's club is the Uruguay national under 20 football team."]
Predicate: club

Triple: ['__subject__ Abel Hernández __predicate__ youthclub __object__ Central_Español']
Text: ['Abel Hernández played youth football for Central Español.']
Predicate: youthclub

Triple: ['__subject__ Abel Hernández __predicate__ youthclub __object__ Peñarol']
Text: ['In his youth, Abel Hernández played for Peñarol.']
Predicate: youthclub

Triple: ['__subject__ Abner (footballer) __predicate__ birthDate __object__ 1996-05-30']
Text: ['The footballer Abner was born on 30/05/1996.']
Predicate: birthDate

Triple: ['__subject__ Abner (footballer) __predicate__ birthPlace __object__ Londrina']
Text: ['Abner (a footballer) was born in Londrina.']
Predicate: birthPlace

Triple: ['__subject__ Abner (footballer) __predicate__ club __object__ Brazil_national_under-17_football_team']
Text: ['The footballer Abner plays for the Brazilian national under 17 football team.']
Predicate: club

Triple: ['__subject__ Abner (footballer) __predicate__ club __object__ Brazil_national_under-20_football_team']
Text: ['The footballer Abner has represented the Brazil national under 20 team.']
Predicate: club

Triple: ['__subject__ Abner (footballer) __predicate__ club __object__ Coritiba_Foot_Ball_Club']
Text: ['Abner plays for the Coritiba Football Club.']
Predicate: club

Triple: ['__subject__ Abner (footballer) __predicate__ club __object__ Real_Madrid_Castilla']
Text: ['Footballer, Abner plays for the club, Real Madrid Castilla.']
Predicate: club

Triple: ['__subject__ Abner (footballer) __predicate__ currentclub __object__ Real_Madrid_Castilla']
Text: ['Abner is a footballer with the Real Madrid Castilla club.']
Predicate: currentclub

Triple: ['__subject__ Accrington Stanley F.C. __predicate__ ground __object__ Accrington']
Text: ["Accrington Stanley F.C.'s ground is Accrington."]
Predicate: ground

Triple: ['__subject__ Adam Maher __predicate__ club __object__ AZ_Alkmaar']
Text: ["Adam Maher's club is AZ Alkmaar."]
Predicate: club

Triple: ['__subject__ Adam Maher __predicate__ currentclub __object__ PSV_Eindhoven']
Text: ['The current club that Adam Maher plays for is PSV Eindhoven.']
Predicate: currentclub

Triple: ['__subject__ Adam McQuaid __predicate__ birthDate __object__ 1986-10-12']
Text: ['Adam McQuaid was born in October 12th 1986.']
Predicate: birthDate

Triple: ['__subject__ Adam McQuaid __predicate__ birthPlace __object__ Canada']
Text: ['Adam McQuaid was born in Canada.']
Predicate: birthPlace

Triple: ['__subject__ Adam McQuaid __predicate__ birthPlace __object__ Prince_Edward_Island']
Text: ['Adam McQuaid was born on Prince Edward Island.']
Predicate: birthPlace

Triple: ['__subject__ Adam McQuaid __predicate__ birthYear __object__ 1986']
Text: ["Adam McQuaid's year of birth is 1986."]
Predicate: birthYear

Triple: ['__subject__ Adam McQuaid __predicate__ club __object__ Boston_Bruins']
Text: ['Adam McQuaid played for the club Boston Bruins.']
Predicate: club

Triple: ['__subject__ Adam McQuaid __predicate__ draftTeam __object__ Columbus_Blue_Jackets']
Text: ["Adam McQuaid's draft team was the Columbus Blue Jackets."]
Predicate: draftTeam

Triple: ['__subject__ Adam McQuaid __predicate__ height __object__ 1.9558']
Text: ["Adam McQuaid's height is 1.9558."]
Predicate: height

Triple: ['__subject__ Adam McQuaid __predicate__ weight __object__ 94.8024 (kilograms)']
Text: ['Adam McQuaid weighs 94.8024 kilograms.']
Predicate: weight

Triple: ['__subject__ Ahmad Kadhim Assad __predicate__ birthDate __object__ 1976-07-01']
Text: ['Ahmad Kadhim Assad was born on the 01-07-1976.']
Predicate: birthDate

Triple: ['__subject__ Ahmad Kadhim Assad __predicate__ club __object__ Al-Jaish_SC_(Syria)']
Text: ['Ahmad Kadhim Assad plays for Al-Jaish SC in Syria.']
Predicate: club

Triple: ['__subject__ Ahmad Kadhim Assad __predicate__ club __object__ Al-Naft']
Text: ['Ahmad Kadhim Assad is in the Al-Naft club.']
Predicate: club

Triple: ['__subject__ Ahmad Kadhim Assad __predicate__ club __object__ Al-Quwa_Al-Jawiya']
Text: ['Ahmad Kadhim Assad is in the Al-Quwa Al-Jawiya club.']
Predicate: club

Triple: ['__subject__ Ahmad Kadhim Assad __predicate__ club __object__ Al-Talaba_SC']
Text: ['Ahmad Kadhim Assad plays for Al Talaba SC.']
Predicate: club

Triple: ["__subject__ Ahmad Kadhim Assad __predicate__ club __object__ Al-Zawra'a_SC"]
Text: ["Ahmad Kadhim Assad's club is Al-Zawra'a SC."]
Predicate: club

Triple: ['__subject__ Ahmad Kadhim Assad __predicate__ club __object__ Al_Shorta_SC']
Text: ["Ahmad Kadhim Assad's club is Al Shorta SC."]
Predicate: club

Triple: ['__subject__ Ahmad Kadhim Assad __predicate__ club __object__ Esteghlal_Ahvaz_F.C.']
Text: ['Ahmad Kadhim Assad played for Esteghlal Ahvaz F.C.']
Predicate: club

Triple: ['__subject__ Ahmad Kadhim Assad __predicate__ club __object__ Steel_Azin_F.C.']
Text: ["Ahmad Kadhim Assad's club is Steel Azin F.C."]
Predicate: club

Triple: ['__subject__ Akeem Adams __predicate__ birthPlace __object__ Point Fortin, Trinidad and Tobago']
Text: ["Akeem Adams' birthplace was Point Fortin, Trinidad and Tobago."]
Predicate: birthPlace

Triple: ['__subject__ Akeem Adams __predicate__ club __object__ Central_F.C.']
Text: ["Akeem Adams' club is Central FC."]
Predicate: club

Triple: ['__subject__ Akeem Adams __predicate__ club __object__ Ferencvárosi_TC']
Text: ['Akeem Adams club is Ferencvarosi TC.']
Predicate: club

Triple: ['__subject__ Akeem Adams __predicate__ club __object__ T&TEC_Sports_Club']
Text: ['Akeem Adams plays for T&TEC Sports Club.']
Predicate: club

Triple: ['__subject__ Akeem Adams __predicate__ club __object__ Trinidad_and_Tobago_national_football_team']
Text: ['Akeem Adams plays for the Trinidad and Tobago national football team.']
Predicate: club

Triple: ['__subject__ Akeem Adams __predicate__ club __object__ Trinidad_and_Tobago_national_under-17_football_team']
Text: ["Akeem Adams's club is the Trinidad and Tobago national under 17 football team."]
Predicate: club

Triple: ['__subject__ Akeem Adams __predicate__ club __object__ Trinidad_and_Tobago_national_under-20_football_team']
Text: ['Akeem Adams played in the Trinidad and Tobago national under-20 football team.']
Predicate: club

Triple: ['__subject__ Akeem Adams __predicate__ club __object__ United_Petrotrin_F.C.']
Text: ['Akeem Adams played for United Petrotrin F.C.']
Predicate: club

Triple: ['__subject__ Akeem Adams __predicate__ club __object__ W_Connection_F.C.']
Text: ['Akeem Adams is in the W Connection FC club.']
Predicate: club

Triple: ['__subject__ Akeem Adams __predicate__ deathPlace __object__ Budapest']
Text: ['Budapest is the death place of Akeem Adams.']
Predicate: deathPlace

Triple: ['__subject__ Akeem Ayers __predicate__ activeYearsStartYear __object__ 2011']
Text: ['Akeem Ayers started his career in 2011.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Akeem Ayers __predicate__ birthDate __object__ 1989-07-10']
Text: ['Akeem Ayers was born July 10th, 1989.']
Predicate: birthDate

Triple: ['__subject__ Akeem Ayers __predicate__ birthPlace __object__ Raleigh,_North_Carolina']
Text: ['Akeem Ayers birth place is Raleigh, North Carolina.']
Predicate: birthPlace

Triple: ['__subject__ Akeem Ayers __predicate__ birthYear __object__ 1989']
Text: ['Akeem Ayers was born in 1989.']
Predicate: birthYear

Triple: ['__subject__ Akeem Ayers __predicate__ currentteam __object__ Los Angeles Rams']
Text: ['The current team of Akeem Ayers is the Los Angeles Rams.']
Predicate: currentteam

Triple: ['__subject__ Akeem Ayers __predicate__ debutTeam __object__ Tennessee_Titans']
Text: ['Akeem Ayers made his debut for the Tennessee Titans.']
Predicate: debutTeam

Triple: ['__subject__ Akeem Ayers __predicate__ draftPick __object__ 39']
Text: ['Akeem Ayers was number 39 in the draft pick.']
Predicate: draftPick

Triple: ['__subject__ Akeem Ayers __predicate__ draftRound __object__ 2']
Text: ['Akeem Ayers was in draft round 2.']
Predicate: draftRound

Triple: ['__subject__ Akeem Ayers __predicate__ formerTeam __object__ Los_Angeles_Rams']
Text: ["Akeem Ayers' former team was the Los Angeles Rams."]
Predicate: formerTeam

Triple: ['__subject__ Akeem Ayers __predicate__ formerTeam __object__ New_England_Patriots']
Text: ["Akeem Ayers's former team is the New England Patriots."]
Predicate: formerTeam

Triple: ['__subject__ Akeem Ayers __predicate__ formerTeam __object__ St._Louis_Rams']
Text: ['Akeem Ayers used to play for the St. Louis Rams.']
Predicate: formerTeam

Triple: ['__subject__ Akeem Ayers __predicate__ formerTeam __object__ Tennessee_Titans']
Text: ['Akeem Ayers used to play for Tennessee Titans.']
Predicate: formerTeam

Triple: ['__subject__ Akeem Dent __predicate__ birthDate __object__ 1987-09-27']
Text: ['Akeem Dent was born on 27/09/1987.']
Predicate: birthDate

Triple: ['__subject__ Akeem Dent __predicate__ birthPlace __object__ Atlanta, Georgia']
Text: ["Akeem Dent's place of birth is Atlanta, Georgia."]
Predicate: birthPlace

Triple: ['__subject__ Akeem Dent __predicate__ birthPlace __object__ Atlanta']
Text: ['Akeem Dent was born in Atlanta.']
Predicate: birthPlace

Triple: ['__subject__ Akeem Dent __predicate__ birthYear __object__ 1987']
Text: ['Akeem Dent was born in the Year 1987.']
Predicate: birthYear

Triple: ['__subject__ Akeem Dent __predicate__ club __object__ Houston_Texans']
Text: ["Akeem Dent's club is the Houston Texans."]
Predicate: club

Triple: ['__subject__ Akeem Dent __predicate__ debutTeam __object__ Atlanta_Falcons']
Text: ["Akeem Dent's first team were the Atlanta Falcons."]
Predicate: debutTeam

Triple: ['__subject__ Akeem Dent __predicate__ formerTeam __object__ Houston_Texans']
Text: ['Akeem Dent used to play for Houston Texans.']
Predicate: formerTeam

Triple: ['__subject__ Akeem Dent __predicate__ playerNumber __object__ 50']
Text: ['Akeem Dent is a player number 50.']
Predicate: playerNumber

Triple: ['__subject__ Akeem Dent __predicate__ position __object__ Linebacker']
Text: ["Akeem Dent's position is a linebacker."]
Predicate: position

Triple: ['__subject__ Akeem Priestley __predicate__ birthPlace __object__ Jamaica']
Text: ["Akeem Priestley's birth place is Jamaica."]
Predicate: birthPlace

Triple: ['__subject__ Akeem Priestley __predicate__ birthPlace __object__ Kingston,_Jamaica']
Text: ["Akeem Priestley's birth place was Kingston in Jamaica."]
Predicate: birthPlace

Triple: ['__subject__ Akeem Priestley __predicate__ club __object__ Antigua_GFC']
Text: ['Akeem Priestley played for Antigua GFC.']
Predicate: club

Triple: ['__subject__ Akeem Priestley __predicate__ club __object__ Dayton_Dutch_Lions']
Text: ["Akeem Priestley's club is Dayton Dutch Lions."]
Predicate: club

Triple: ['__subject__ Akeem Priestley __predicate__ club __object__ Harbour_View_F.C.']
Text: ["Akeem Priestley's club is Harbour View FC."]
Predicate: club

Triple: ['__subject__ Akeem Priestley __predicate__ club __object__ Jacksonville_Dolphins']
Text: ['Akeem Priestley plays for Jacksonville Dolphins.']
Predicate: club

Triple: ['__subject__ Akeem Priestley __predicate__ club __object__ Jamaica_national_football_team']
Text: ['Akeem Priestley represented the Jamaica national football team.']
Predicate: club

Triple: ['__subject__ Akeem Priestley __predicate__ club __object__ Orange_County_Blues_FC']
Text: ['Akeem Priestley plays for Orange County Blues FC.']
Predicate: club

Triple: ['__subject__ Akeem Priestley __predicate__ club __object__ RoPS']
Text: ['Akeem Priestley’s club is RoPS.']
Predicate: club

Triple: ['__subject__ Akeem Priestley __predicate__ club __object__ Sheikh_Russel_KC']
Text: ['Akeem Priestley played for Sheikh Russel KC.']
Predicate: club

Triple: ['__subject__ Akeem Priestley __predicate__ youthclub __object__ Connecticut_Huskies']
Text: ["Akeem Priestley's youth club was the Connecticut Huskies."]
Predicate: youthclub

Triple: ['__subject__ Akeem Priestley __predicate__ youthclub __object__ Harbour_View_F.C.']
Text: ["Akeem Priestley's youth club was Harbour View F.C."]
Predicate: youthclub

Triple: ['__subject__ Al-Khor Sports Club __predicate__ ground __object__ Al_Khor']
Text: ['Al-Khor Sports Club is located in Al-Khor.']
Predicate: ground

Triple: ['__subject__ Al-Khor Sports Club __predicate__ position __object__ Qatar_Stars_League']
Text: ['Al Khor Sports Club plays in the Qatar Stars League.']
Predicate: position

Triple: ['__subject__ Al-Wakrah Sport Club __predicate__ league __object__ Qatar_Stars_League']
Text: ['Al-Wakrah Sport Club is in the Qatar Stars League.']
Predicate: league

Triple: ['__subject__ Al-Wakrah Sport Club __predicate__ position __object__ Qatar_Stars_League']
Text: ['Al-Wakrah Sport Club position is in the Qatar Stars League.']
Predicate: position

Triple: ['__subject__ Al Kharaitiyat SC __predicate__ ground __object__ Al_Khor']
Text: ["Al Kharaitiyat SC's ground is Al Khor."]
Predicate: ground

Triple: ['__subject__ Al Kharaitiyat SC __predicate__ league __object__ Qatar_Stars_League']
Text: ['The league that Al Kharaitiyat SC play in is the Qatar Stars League.']
Predicate: league

Triple: ['__subject__ Al Kharaitiyat SC __predicate__ manager __object__ Amar_Osim']
Text: ['Amar Osim is the manager of Al Kharaitiyat SC.']
Predicate: manager

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ birthPlace __object__ Iraq']
Text: ['Iraq is the birth place of Alaa Abdul Zahra.']
Predicate: birthPlace

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ club __object__ Al-Khor_Sports_Club']
Text: ['Alaa Abdul-Zahra is in the Al-Khor Sports Club.']
Predicate: club

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ club __object__ Al-Merrikh_SC']
Text: ['Alaa Abdul Zahra has played for Al Merrikh SC.']
Predicate: club

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ club __object__ Al-Wakrah_Sport_Club']
Text: ['Alaa Abdul-Zahra plays for the Al-Wakrah Sport Club.']
Predicate: club

Triple: ["__subject__ Alaa Abdul-Zahra __predicate__ club __object__ Al-Zawra'a_SC"]
Text: ["Alaa Abdul Zahra played for the club Al-Zawra'a SC."]
Predicate: club

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ club __object__ Al_Kharaitiyat_SC']
Text: ["Alaa Abdul Zahra's club is AL Kharaitiyat SC."]
Predicate: club

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ club __object__ Al_Shorta_SC']
Text: ["Alaa Abdul-Zahra's club is Al Shorta SC."]
Predicate: club

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ club __object__ Duhok_SC']
Text: ["Alaa Abdul-Zahra's club is Duhok SC."]
Predicate: club

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ club __object__ Iraq_national_under-20_football_team']
Text: ['Alaa Abdul Zahra plays for the Iraq national under 20 football team.']
Predicate: club

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ club __object__ Iraq_national_under-23_football_team']
Text: ['Alaa Abdul Zahra plays for the Iraq national under 23 football team.']
Predicate: club

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ club __object__ Shabab_Al-Ordon_Club']
Text: ["Alaa Abdul-Zahra's club is Shabab Al-Ordon Club."]
Predicate: club

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ club __object__ Tractor_Sazi_F.C.']
Text: ["Alaa Abdul-Zahra's club is Tractor Sazi FC."]
Predicate: club

Triple: ['__subject__ Alaa Abdul-Zahra __predicate__ position __object__ Forward_(football)']
Text: ["Alaa Abdul Zahra's football position is Forward."]
Predicate: position

Triple: ['__subject__ Alan Martin (footballer) __predicate__ birthDate __object__ 1989-01-01']
Text: ['Alan Martin (footballer) was born on 01/01/1989.']
Predicate: birthDate

Triple: ['__subject__ Alan Martin (footballer) __predicate__ club __object__ Aldershot_Town_F.C.']
Text: ['Alan Martin is a footballer for Aldershot Town FC.']
Predicate: club

Triple: ['__subject__ Alan Martin (footballer) __predicate__ club __object__ Ayr_United_F.C.']
Text: ['Alan Martin is a footballer for Ayr United FC.']
Predicate: club

Triple: ['__subject__ Alan Martin (footballer) __predicate__ club __object__ Barrow_A.F.C.']
Text: ['The footballer Alan Martin plays for Barrow AFC.']
Predicate: club

Triple: ['__subject__ Alan Martin (footballer) __predicate__ club __object__ Clyde_F.C.']
Text: ['Alan Martin is a footballer for the Clyde FC club.']
Predicate: club

Triple: ['__subject__ Alan Martin (footballer) __predicate__ club __object__ Leeds_United_F.C.']
Text: ['Alan Martin is a footballer for Leeds United FC.']
Predicate: club

Triple: ['__subject__ Alan Martin (footballer) __predicate__ club __object__ Motherwell_F.C.']
Text: ["Alan Martin's football club is Motherwell FC."]
Predicate: club

Triple: ['__subject__ Alan Martin (footballer) __predicate__ club __object__ Scotland_national_under-21_football_team']
Text: ['The footballer Alan Martin plays in the Scottish National under 21 football team.']
Predicate: club

Triple: ['__subject__ Alan Martin (footballer) __predicate__ height __object__ 185.42 (centimetres)']
Text: ['Footballer, Alan Martin is 185,42 centimetres tall.']
Predicate: height

Triple: ['__subject__ Aleksander Barkov, Jr. __predicate__ birthPlace __object__ Tampere, Finland']
Text: ['Aleksander Barkov Jr was born in Tampere, Finland.']
Predicate: birthPlace

Triple: ['__subject__ Aleksander Barkov, Jr. __predicate__ birthPlace __object__ Tampere']
Text: ['Aleksander Barkov, Jr. was born in Tampere.']
Predicate: birthPlace

Triple: ['__subject__ Aleksander Barkov, Jr. __predicate__ birthYear __object__ 1995']
Text: ['Aleksander Barkov, Jr. was born in 1995.']
Predicate: birthYear

Triple: ['__subject__ Aleksander Barkov, Jr. __predicate__ draftTeam __object__ Florida_Panthers']
Text: ["Aleksander Barkov Jr's draft team is the Florida Panthers."]
Predicate: draftTeam

Triple: ['__subject__ Aleksander Barkov, Jr. __predicate__ formerTeam __object__ Tappara']
Text: ['Aleksander Barkov Jr previously played for the team Tappara.']
Predicate: formerTeam

Triple: ['__subject__ Aleksander Barkov, Jr. __predicate__ position __object__ Centre_(ice_hockey)']
Text: ["Aleksander Barkov Jr's position in ice hockey is centre."]
Predicate: position

Triple: ['__subject__ Aleksander Barkov, Jr. __predicate__ weight __object__ 96.1632 (kilograms)']
Text: ["Aleksander Barkov Jr's weight is 96.1632 kg."]
Predicate: weight

Triple: ['__subject__ Aleksandr Chumakov __predicate__ birthPlace __object__ Moscow']
Text: ['Aleksandr Chumakov was born in Moscow.']
Predicate: birthPlace

Triple: ['__subject__ Aleksandr Chumakov __predicate__ birthPlace __object__ Soviet_Union']
Text: ['Aleksandr Chumakov was born in the Soviet Union.']
Predicate: birthPlace

Triple: ['__subject__ Aleksandr Chumakov __predicate__ birthYear __object__ 1948']
Text: ['Aleksandr Chumakov was born in 1948.']
Predicate: birthYear

Triple: ['__subject__ Aleksandr Chumakov __predicate__ club __object__ FC_Torpedo_Moscow']
Text: ['The club Aleksandr Chumakov plays for is FC Torpedo Moscow.']
Predicate: club

Triple: ['__subject__ Aleksandr Chumakov __predicate__ club __object__ Soviet_Union_national_football_team']
Text: ['Aleksandr Chumakov plays for the Soviet Union national football team.']
Predicate: club

Triple: ['__subject__ Aleksandr Chumakov __predicate__ deathPlace __object__ Moscow, Russia']
Text: ['Aleksandr Chumakov died in Moscow, in Russia.']
Predicate: deathPlace

Triple: ['__subject__ Aleksandr Chumakov __predicate__ deathPlace __object__ Moscow']
Text: ['Aleksandr Chumakov died in Moscow.']
Predicate: deathPlace

Triple: ['__subject__ Aleksandr Chumakov __predicate__ deathPlace __object__ Russia']
Text: ['Aleksandr Chumakov died in Russia.']
Predicate: deathPlace

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ club __object__ FC_Alania_Vladikavkaz']
Text: ['Aleksandr Prudnikov plays for FC Alania Vladikavkaz.']
Predicate: club

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ club __object__ FC_Anzhi_Makhachkala']
Text: ['Aleksandr Prudnikov plays for FC Anzhi Makhachkala.']
Predicate: club

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ club __object__ FC_Dynamo_Moscow']
Text: ["Aleksandr Prudnikov's club is FC Dynamo Moscow."]
Predicate: club

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ club __object__ FC_Kuban_Krasnodar']
Text: ['Aleksandr Prudnikov plays for FC Kuban Krasnodar.']
Predicate: club

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ club __object__ FC_Rubin_Kazan']
Text: ['Aleksandr Prudnikov plays for FC Rubin Kazan.']
Predicate: club

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ club __object__ FC_Spartak_Moscow']
Text: ["Aleksandr Prudnikov's club is FC Spartak Moscow."]
Predicate: club

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ club __object__ FC_Terek_Grozny']
Text: ['Aleksandr Prudnikov plays for FC Terek Grozny.']
Predicate: club

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ club __object__ FC_Tom_Tomsk']
Text: ['Aleksandr Prudnikov plays for FC Tom Tomsk.']
Predicate: club

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ club __object__ Russia_national_football_B_team']
Text: ['Aleksandr Prudnikov plays for the Russia national football B team.']
Predicate: club

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ club __object__ Russia_national_under-21_football_team']
Text: ['Aleksandr Prudnikov played for the Russia national under 21 football team.']
Predicate: club

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ club __object__ Sparta_Prague']
Text: ["Aleksandr Prudnikov's club is called Sparta Prague."]
Predicate: club

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ currentclub __object__ FC_Amkar_Perm']
Text: ["Aleksandr Prudnikov's current club is FC Amkar Perm."]
Predicate: currentclub

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ height __object__ 185.0 (centimetres)']
Text: ['Aleksandr Prudnikov is 185 cm tall.']
Predicate: height

Triple: ['__subject__ Aleksandr Prudnikov __predicate__ youthclub __object__ FC_Spartak_Moscow']
Text: ["Aleksandr Prudnikov played for FC Spartak Moscow's youth team."]
Predicate: youthclub

Triple: ['__subject__ Aleksandre Guruli __predicate__ birthPlace __object__ Georgian_Soviet_Socialist_Republic']
Text: ['Aleksandre Guruli was born in Georgia, in the Soviet Socialist Republic.']
Predicate: birthPlace

Triple: ['__subject__ Aleksandre Guruli __predicate__ club __object__ AS_Lyon-Duchère']
Text: ['Aleksandre Guruli played for the club AS Lyon-Duchère.']
Predicate: club

Triple: ['__subject__ Aleksandre Guruli __predicate__ club __object__ AZAL_PFK']
Text: ['Aleksandre Guruli played for AZAL PFK.']
Predicate: club

Triple: ['__subject__ Aleksandre Guruli __predicate__ club __object__ FC_Dila_Gori']
Text: ["Aleksandre Guruli's club is FC Dila Gori."]
Predicate: club

Triple: ['__subject__ Aleksandre Guruli __predicate__ club __object__ FC_Dinamo_Batumi']
Text: ['Aleksandre Guruli played for FC Dinamo Batumi.']
Predicate: club

Triple: ['__subject__ Aleksandre Guruli __predicate__ club __object__ FC_Karpaty_Lviv']
Text: ['Aleksandre Guruli played for FC Karpaty Lviv.']
Predicate: club

Triple: ['__subject__ Aleksandre Guruli __predicate__ club __object__ FC_Zestafoni']
Text: ['Aleksandre Guruli is in the FC Zestafoni club.']
Predicate: club

Triple: ['__subject__ Aleksandre Guruli __predicate__ club __object__ Georgia_national_football_team']
Text: ['Aleksandre Guruli played for the Georgia national football team.']
Predicate: club

Triple: ['__subject__ Aleksandre Guruli __predicate__ club __object__ Olympique_Lyonnais']
Text: ["Aleksandre Guruli's club is Olympique Lyonnais."]
Predicate: club

Triple: ['__subject__ Aleksandre Guruli __predicate__ club __object__ US_Boulogne']
Text: ["Aleksandre Guruli's club is US Boulogne."]
Predicate: club

Triple: ['__subject__ Aleksandre Guruli __predicate__ club __object__ US_Lesquin']
Text: ["Aleksandre Guruli's club is US Lesquin."]
Predicate: club

Triple: ['__subject__ Aleksandre Guruli __predicate__ height __object__ 178.0 (centimetres)']
Text: ["Aleksandre Guruli's height is 178.0 centimetres."]
Predicate: height

Triple: ['__subject__ Alessio Romagnoli __predicate__ birthPlace __object__ Anzio']
Text: ['Alessio Romagnoli was born in Anzio.']
Predicate: birthPlace

Triple: ['__subject__ Alessio Romagnoli __predicate__ birthPlace __object__ Italy']
Text: ['Alessio Romagnoli was born in Italy.']
Predicate: birthPlace

Triple: ['__subject__ Alessio Romagnoli __predicate__ club __object__ A.C._Milan']
Text: ['Alessio Romagnoli plays for A.C. Milan.']
Predicate: club

Triple: ['__subject__ Alessio Romagnoli __predicate__ club __object__ Italy_national_under-16_football_team']
Text: ['Alessio Romagnoli played for the Italian national under 16 football team.']
Predicate: club

Triple: ['__subject__ Alessio Romagnoli __predicate__ club __object__ Italy_national_under-17_football_team']
Text: ["Alessio Romagnoli is in the club Italy national under 17's."]
Predicate: club

Triple: ['__subject__ Alessio Romagnoli __predicate__ club __object__ Italy_national_under-19_football_team']
Text: ["Alessio Romagnoli's club is the Italy national under 19 football team."]
Predicate: club

Triple: ['__subject__ Alessio Romagnoli __predicate__ club __object__ U.C._Sampdoria']
Text: ['Alessio Romagnoli plays for the club U.C. Sampdoria.']
Predicate: club

Triple: ['__subject__ Alessio Romagnoli __predicate__ currentclub __object__ A.C._Milan']
Text: ["Alessio Romagnoli's current club is AC Milan."]
Predicate: currentclub

Triple: ['__subject__ Alessio Romagnoli __predicate__ position __object__ Defender_(football)']
Text: ['Footballer Alessio Romagnoli plays as a Defender.']
Predicate: position

Triple: ['__subject__ Alex Plante __predicate__ birthDate __object__ 1989-05-09']
Text: ['Alex Plante was born on 1989-05-09.']
Predicate: birthDate

Triple: ['__subject__ Alex Plante __predicate__ birthPlace __object__ Brandon,_Manitoba']
Text: ['Alex Plante was born in Brandon, Manitoba.']
Predicate: birthPlace

Triple: ['__subject__ Alex Plante __predicate__ birthPlace __object__ Canada']
Text: ['Alex Plante was born in Canada.']
Predicate: birthPlace

Triple: ['__subject__ Alex Plante __predicate__ birthYear __object__ 1989']
Text: ['Alex Plante was born in 1989.']
Predicate: birthYear

Triple: ['__subject__ Alex Plante __predicate__ club __object__ Anyang_Halla']
Text: ['Alex Plante has played for the club Anyang Halla.']
Predicate: club

Triple: ['__subject__ Alex Tyus __predicate__ activeYearsStartYear __object__ 2011']
Text: ['Alex Tyus started playing in 2011.']
Predicate: activeYearsStartYear

Triple: ['__subject__ Alex Tyus __predicate__ birthDate __object__ 1988-01-08']
Text: ['Alex Tyus was born on the 8th January 1988.']
Predicate: birthDate

Triple: ['__subject__ Alex Tyus __predicate__ birthPlace __object__ St._Louis']
Text: ['Alex Tyus was born in St Louis.']
Predicate: birthPlace

Triple: ['__subject__ Alex Tyus __predicate__ club __object__ Anadolu_Efes_S.K.']
Text: ['Alex Tyus plays for Anadolu Efes S.K.']
Predicate: club

Triple: ['__subject__ Alex Tyus __predicate__ club __object__ Maccabi_Ashdod_B.C.']
Text: ["Alex Tyus's club is Maccabi Ashdod BC."]
Predicate: club

Triple: ['__subject__ Alex Tyus __predicate__ club __object__ Maccabi_Tel_Aviv_B.C.']
Text: ['Alex Tyus plays for the club, Maccabi Tel Aviv B.C.']
Predicate: club

Triple: ['__subject__ Alex Tyus __predicate__ club __object__ Pallacanestro_Cantù']
Text: ["Alex Tyus' club is Pallacanestro Cantu."]
Predicate: club

Triple: ["__subject__ Alex Tyus __predicate__ college __object__ Florida_Gators_men's_basketball"]
Text: ["Alex Tyus played for the college Florida Gators men's basketball team."]
Predicate: college

Triple: ['__subject__ Alex Tyus __predicate__ draftYear __object__ 2011']
Text: ['Alex Tyus had been drafted in 2011.']
Predicate: draftYear

Triple: ['__subject__ Alex Tyus __predicate__ height __object__ 2.032']
Text: ['Alex Tyus is 2.032m tall.']
Predicate: height

Triple: ['__subject__ Alex Tyus __predicate__ league __object__ Euroleague']
Text: ['Alex Tyus plays in the Euroleague.']
Predicate: league

Triple: ['__subject__ Alex Tyus __predicate__ weight __object__ 99.792 (kilograms)']
Text: ['Alex Tyus weighs 99.792 kg.']
Predicate: weight

Triple: ['__subject__ Anadolu Efes S.K. __predicate__ coach __object__ Dušan_Ivković']
Text: ['Dušan Ivković is the coach of Anadolu Efes S.K.']
Predicate: coach

Triple: ['__subject__ Atlanta Falcons __predicate__ coach __object__ Dan_Quinn_(American_football)']
Text: ['Dan Quinn is the coach of the American football team the Atlanta Falcons.']
Predicate: coach

Triple: ['__subject__ Atlanta Falcons __predicate__ owner __object__ Arthur_Blank']
Text: ['The owner of the Atlanta Falcons is Arthur Blank.']
Predicate: owner

Triple: ['__subject__ Boston Bruins __predicate__ city __object__ Boston']
Text: ['The Boston Bruins are from Boston.']
Predicate: city

Triple: ['__subject__ Brandon, Manitoba __predicate__ leader __object__ Conservative_Party_of_Canada']
Text: ['The leader of Brandon, Manitoba is the Conservative Party of Canada.']
Predicate: leader

Triple: ['__subject__ Brandon, Manitoba __predicate__ leader __object__ Larry_Maguire']
Text: ['The leader of Brandon Manitoba is Larry Maguire.']
Predicate: leader

Triple: ['__subject__ C.D. FAS __predicate__ league __object__ Salvadoran_Primera_División']
Text: ["CD FAS's league is the Salvadoran Primera Division."]
Predicate: league

Triple: ['__subject__ C.D. FAS __predicate__ position __object__ Salvadoran_Primera_División']
Text: ['C.D. FAS play in the Salvadoran Primera Division.']
Predicate: position

Triple: ['__subject__ Canada __predicate__ anthem __object__ O_Canada']
Text: ['O Canada is the national anthem of Canada.']
Predicate: anthem

Triple: ['__subject__ Canada __predicate__ ethnicGroup __object__ Asian_Canadians']
Text: ['Asian Canadians are one of the ethnic groups in Canada.']
Predicate: ethnicGroup

Triple: ['__subject__ Canada __predicate__ ethnicGroup __object__ Black_Canadians']
Text: ['Black Canadians are one of the ethnic groups of Canada.']
Predicate: ethnicGroup

Triple: ['__subject__ Canada __predicate__ language __object__ French_language']
Text: ['One of the languages in Canada is French.']
Predicate: language

Triple: ['__subject__ Canada __predicate__ leader __object__ Elizabeth_II']
Text: ['The leader of Canada is Elizabeth II.']
Predicate: leader

Triple: ['__subject__ Central Español __predicate__ league __object__ Uruguayan_Segunda_División']
Text: ['Central Español play in the Uruguayan Segunda División.']
Predicate: league

Triple: ['__subject__ Clyde F.C. __predicate__ ground __object__ Broadwood_Stadium']
Text: ['Clyde F.C. play at the Broadwood Stadium.']
Predicate: ground

Triple: ['__subject__ Clyde F.C. __predicate__ manager __object__ Barry_Ferguson']
Text: ['Barry Ferguson is the manager for Clyde F.C.']
Predicate: manager

Triple: ['__subject__ Columbus Blue Jackets __predicate__ generalManager __object__ Jarmo_Kekäläinen']
Text: ["Columbus Blue Jackets' general manager is Jarmo Kekalainen."]
Predicate: generalManager

Triple: ['__subject__ Crewe Alexandra F.C. __predicate__ manager __object__ Steve_Davis_(footballer)']
Text: ['Footballer, Steve Davis, manages Crewe Alexandra F.C.']
Predicate: manager

Triple: ['__subject__ Esteghlal Ahvaz F.C. __predicate__ manager __object__ Adnan_Hamad']
Text: ['Adnan Hamad is the manager of Esteghlal Ahvaz F.C.']
Predicate: manager

Triple: ['__subject__ FC Amkar Perm __predicate__ manager __object__ Gadzhi_Gadzhiyev']
Text: ['Gadzhi Gadzhiyev is the manager of FC Amkar Perm.']
Predicate: manager

Triple: ['__subject__ FC Dinamo Batumi __predicate__ manager __object__ Levan_Khomeriki']
Text: ['Levan Khomeriki is the manager of FC Dinamo Batumi.']
Predicate: manager

Triple: ['__subject__ FC Samtredia __predicate__ ground __object__ Erosi_Manjgaladze_Stadium']
Text: ['Erosi Manjgaladze Stadium is the ground of FC Samtredia.']
Predicate: ground

Triple: ['__subject__ FC Spartak Moscow __predicate__ chairman __object__ Sergey_Rodionov']
Text: ['The chairman of FC Spartak Moscow is Sergey Rodionov.']
Predicate: chairman

Triple: ['__subject__ FC Spartak Moscow __predicate__ ground __object__ Otkrytiye_Arena']
Text: ["FC Spartak Moscow's grounds are the Otkrytiye Arena."]
Predicate: ground

Triple: ['__subject__ FC Terek Grozny __predicate__ manager __object__ Rashid_Rakhimov']
Text: ["FC Terek Grozny's manager is Rashid Rakhimov."]
Predicate: manager

Triple: ['__subject__ FC Torpedo Moscow __predicate__ chairman __object__ Aleksandr_Tukmanov']
Text: ['The chairman of FC Torpedo Moscow is Aleksandr Tukmanov.']
Predicate: chairman

Triple: ['__subject__ FC Torpedo Moscow __predicate__ season __object__ 2014–15_Russian_Premier_League']
Text: ['FC Torpedo Moscow played in the 2014-15 Russian Premier League.']
Predicate: season

Triple: ['__subject__ Ferencvárosi TC __predicate__ manager __object__ Thomas_Doll']
Text: ['Thomas Doll is the manager for Ferencvárosi TC.']
Predicate: manager

Triple: ['__subject__ Finland __predicate__ currency __object__ Euro']
Text: ['The Euro is the currency in Finland.']
Predicate: currency

Triple: ['__subject__ Finland __predicate__ demonym __object__ Finns']
Text: ['Finns is a demonym of Finland.']
Predicate: demonym

Triple: ['__subject__ Finland __predicate__ language __object__ Sami_languages']
Text: ['The languages of Finland are Sami languages.']
Predicate: language

Triple: ['__subject__ Finland __predicate__ leader __object__ Sauli_Niinistö']
Text: ['The leader in Finland is Sauli Niinisto.']
Predicate: leader

Triple: ['__subject__ Finland __predicate__ officialLanguage __object__ Finnish_language']
Text: ['The official language in Finland is Finnish.']
Predicate: officialLanguage

Triple: ['__subject__ Hamburger SV __predicate__ league __object__ Bundesliga']
Text: ['Hamburger SV compete in the Bundesliga.']
Predicate: league

Triple: ['__subject__ Hamilton Academical F.C. __predicate__ ground __object__ Hamilton,_South_Lanarkshire']
Text: ['The ground of Hamilton Academical F.C. is located in Hamilton, South Lanarkshire.']
Predicate: ground

Triple: ['__subject__ Hamilton Academical F.C. __predicate__ ground __object__ New_Douglas_Park']
Text: ['New Douglas Park is the home of Hamilton Academical F.C.']
Predicate: ground

Triple: ['__subject__ Houston Texans __predicate__ city __object__ Houston']
Text: ['The home of the Houston Texans is the city of Houston.']
Predicate: city

Triple: ['__subject__ Houston Texans __predicate__ city __object__ Texas']
Text: ['Texas is the home of Houston Texans.']
Predicate: city

Triple: ['__subject__ Houston Texans __predicate__ owner __object__ Bob_McNair']
Text: ['Bob McNair is the owner of the Houston Texans.']
Predicate: owner

Triple: ['__subject__ Hull City A.F.C. __predicate__ manager __object__ Steve_Bruce']
Text: ["Hull City AFC's manager is Steve Bruce."]
Predicate: manager

Triple: ['__subject__ Italy national under-17 football team __predicate__ coach __object__ Alessandro_Dal_Canto']
Text: ['Alessandro Dal Canto is the coach of the Italian national under-17 football team.']
Predicate: coach

Triple: ['__subject__ Jacksonville Dolphins __predicate__ city __object__ Jacksonville,_Florida']
Text: ['Jacksonville Dolphins play in Jacksonville, Florida.']
Predicate: city

Triple: ['__subject__ Jacksonville Dolphins __predicate__ stadium __object__ John_Sessions_Stadium']
Text: ['John Sessions Stadium is the home of the Jacksonville Dolphins.']
Predicate: stadium

Triple: ['__subject__ Jacksonville Dolphins __predicate__ universityTeam __object__ Jacksonville_University']
Text: ['The Jackson University team is known as the Jacksonville Dolphins.']
Predicate: universityTeam

Triple: ['__subject__ Jamaica __predicate__ leader __object__ Elizabeth_II']
Text: ["Jamaica's leader is Elizabeth II."]
Predicate: leader

Triple: ['__subject__ Jamaica __predicate__ leader __object__ Patrick_Allen_(politician)']
Text: ['The leader of Jamaica is Patrick Allen.']
Predicate: leader

Triple: ['__subject__ Los Angeles Rams __predicate__ city __object__ Los_Angeles']
Text: ['Los Angeles Rams are based in LA.']
Predicate: city

Triple: ['__subject__ Los Angeles Rams __predicate__ city __object__ Los_Angeles_Memorial_Coliseum']
Text: ['Los Angeles Rams play at the Los Angeles Memorial Coliseum.']
Predicate: city

Triple: ['__subject__ Los Angeles Rams __predicate__ coach __object__ Jeff_Fisher']
Text: ['The coach of the Los Angeles Rams is Jeff Fisher.']
Predicate: coach

Triple: ['__subject__ Minnesota Wild __predicate__ generalManager __object__ Chuck_Fletcher']
Text: ['Chuck Fletcher is the general manager of the Minnesota Wild.']
Predicate: generalManager

Triple: ['__subject__ Moscow __predicate__ leader __object__ Sergey_Sobyanin']
Text: ['The leader in Moscow is Sergey Sobyanin.']
Predicate: leader

Triple: ['__subject__ National Hockey League __predicate__ mostChampions __object__ Montreal_Canadiens']
Text: ['Montreal Canadiens have won the National Hockey League the most times.']
Predicate: mostChampions

Triple: ['__subject__ Olympique Lyonnais __predicate__ chairman __object__ Jean-Michel_Aulas']
Text: ['Jean-Michel Aulas is the chairman of Olympique Lyonnais.']
Predicate: chairman

Triple: ['__subject__ Orange County Blues FC __predicate__ manager __object__ Oliver_Wyss']
Text: ['The manager of the Orange County Blues FC is Oliver Wyss.']
Predicate: manager

Triple: ['__subject__ PSV Eindhoven __predicate__ manager __object__ Phillip_Cocu']
Text: ['Phillip Cocu is the manager of PSV Eindhoven.']
Predicate: manager

Triple: ['__subject__ Pallacanestro Cantù __predicate__ league __object__ Lega_Basket_Serie_A']
Text: ['Pallacanestro Cantu is in the Lega Basket Serie A league.']
Predicate: league

Triple: ['__subject__ Peñarol __predicate__ league __object__ Uruguayan_Primera_División']
Text: ['Penarol plays in the Uruguayan Primera División.']
Predicate: league

Triple: ['__subject__ Real Madrid Castilla __predicate__ manager __object__ Luis_Miguel_Ramis']
Text: ['Luis Miguel Ramis is the manager for Real Madrid Castilla.']
Predicate: manager

Triple: ['__subject__ Regina, Saskatchewan __predicate__ leaderTitle __object__ Legislative_Assembly_of_Saskatchewan']
Text: ['The Legislative Assembly of Saskatchewan governs Regina, Saskatchewan.']
Predicate: leaderTitle

Triple: ['__subject__ RoPS __predicate__ league __object__ Veikkausliiga']
Text: ['RoPS plays in the Veikkausliiga.']
Predicate: league

Triple: ['__subject__ Russia __predicate__ language __object__ Russian_language']
Text: ['The language in Russia is Russian.']
Predicate: language

Triple: ['__subject__ Russia __predicate__ leader __object__ Sergey_Naryshkin']
Text: ["The Russian leader's name is Sergey Naryshkin."]
Predicate: leader

Triple: ['__subject__ Russia __predicate__ leader __object__ Valentina_Matviyenko']
Text: ['Valentina Matviyenko is a leader in Russia.']
Predicate: leader

Triple: ['__subject__ Russia __predicate__ leader __object__ Vladimir_Putin']
Text: ['The leader of Russia is Vladimir Putin.']
Predicate: leader

Triple: ['__subject__ SV Werder Bremen __predicate__ league __object__ Bundesliga']
Text: ['SV Werder Bremen play in the Bundesliga.']
Predicate: league

Triple: ['__subject__ SV Werder Bremen __predicate__ manager __object__ Viktor_Skrypnyk']
Text: ['The manager of SV Werder Bremen is Viktor Skrypnyk.']
Predicate: manager

Triple: ['__subject__ SV Werder Bremen II __predicate__ league __object__ 3._Liga']
Text: ['SV Werder Bremen II play in the 3. Liga.']
Predicate: league

Triple: ['__subject__ SV Werder Bremen II __predicate__ manager __object__ Alexander_Nouri']
Text: ['The manager of SV Werder Bremen II is Alexander Nouri.']
Predicate: manager

Triple: ['__subject__ Scotland national under-19 football team __predicate__ coach __object__ Scot_Gemmill']
Text: ['Scot Gemmill is the coach of the Scottish national under 19 football team.']
Predicate: coach

Triple: ['__subject__ Scotland national under-21 football team __predicate__ coach __object__ Ricky_Sbragia']
Text: ['Ricky Sbragia is the coach of the Scotland national under 21 football team.']
Predicate: coach

Triple: ['__subject__ Shabab Al-Ordon Club __predicate__ league __object__ Jordan_Premier_League']
Text: ['Shabab Al-Ordon Club is in the Jordan Premier League.']
Predicate: league

Triple: ['__subject__ St. Louis __predicate__ isPartOf __object__ French_First_Republic']
Text: ['St Louis is part of the French First Republic.']
Predicate: isPartOf

Triple: ['__subject__ St. Louis __predicate__ isPartOf __object__ Greater_St._Louis']
Text: ['St. Louis is a part of greater St. Louis.']
Predicate: isPartOf

Triple: ['__subject__ St. Louis __predicate__ isPartOf __object__ Kingdom_of_France']
Text: ['St. Louis is part of the Kingdom of France.']
Predicate: isPartOf

Triple: ['__subject__ St. Louis __predicate__ isPartOf __object__ Spain']
Text: ['St Louis is part of Spain.']
Predicate: isPartOf

Triple: ['__subject__ St. Louis __predicate__ leader __object__ Francis_G._Slay']
Text: ['Francis G. Slay is the leader of St. Louis.']
Predicate: leader

Triple: ['__subject__ St. Louis Rams __predicate__ coach __object__ Jeff_Fisher']
Text: ['Jeff Fisher is the coach of the St Louis Rams.']
Predicate: coach

Triple: ['__subject__ St. Louis Rams __predicate__ coach __object__ Joe_Vitt']
Text: ['Joe Vitt is the coach for the St. Louis Rams.']
Predicate: coach

Triple: ['__subject__ St. Louis Rams __predicate__ coach __object__ Steve_Spagnuolo']
Text: ['Steve Spagnuolo is the coach of the St. Louis Rams.']
Predicate: coach

Triple: ["__subject__ Steel Azin F.C. __predicate__ league __object__ Iran_Football's_3rd_Division"]
Text: ["Steel Azin F.C. play in Iran Football's 3rd Division."]
Predicate: league

Triple: ['__subject__ Tennessee Titans __predicate__ coach __object__ Mike_Mularkey']
Text: ['Mike Mularkey is the coach of the Tennessee Titans.']
Predicate: coach

Triple: ['__subject__ U.C. Sampdoria __predicate__ league __object__ Serie_A']
Text: ['UC Sampdoria play in the Serie A league.']
Predicate: league

Triple: ['__subject__ U.S. Città di Palermo __predicate__ league __object__ Serie_A']
Text: ['The US Citta di Palermo are in the Serie A League.']
Predicate: league

Triple: ['__subject__ U.S. Città di Palermo __predicate__ manager __object__ Giuseppe_Iachini']
Text: ['Giuseppe Iachini is the manager of U.S. Città di Palermo.']
Predicate: manager

Triple: ['__subject__ United Petrotrin F.C. __predicate__ ground __object__ Palo_Seco']
Text: ["United Petrotrin FC's ground is Palo Seco."]
Predicate: ground

Triple: ['__subject__ United Petrotrin F.C. __predicate__ ground __object__ Palo_Seco_Velodrome']
Text: ['The United Petrotrin F.C is playing in Palo Seco Velodrome.']
Predicate: ground

Triple: ['__subject__ VfL Wolfsburg __predicate__ league __object__ Bundesliga']
Text: ['The league Vfl Wolfsburg play in is Bundesliga.']
Predicate: league

Triple: ['__subject__ VfL Wolfsburg __predicate__ manager __object__ Dieter_Hecking']
Text: ["VfL Wolfsburg's manager is Dieter Hecking."]
Predicate: manager

Triple: ['__subject__ 103 Colmore Row __predicate__ architecturalStyle __object__ Brutalist_architecture']
Text: ['The architecture style of 103 Colmore Row falls under Brutalist architecture.']
Predicate: architecturalStyle

Triple: ['__subject__ 103 Colmore Row __predicate__ buildingStartDate __object__ 1973']
Text: ['1973 was the start date for the building at 103 Colmore Row.']
Predicate: buildingStartDate

Triple: ['__subject__ 103 Colmore Row __predicate__ completionDate __object__ 1976']
Text: ['103 Colmore Row was completed in 1976.']
Predicate: completionDate

Triple: ['__subject__ 103 Colmore Row __predicate__ floorCount __object__ 23']
Text: ['There are 23 floors at 103 Colmore Row.']
Predicate: floorCount

Triple: ['__subject__ 103 Colmore Row __predicate__ location __object__ Colmore Row, Birmingham, England']
Text: ['103 Colmore Row is located on Colmore Row, Birmingham, England.']
Predicate: location

Triple: ['__subject__ 103 Colmore Row __predicate__ location __object__ Birmingham']
Text: ['103 Colmore Row is located in Birmingham.']
Predicate: location

Triple: ['__subject__ 108 St Georges Terrace __predicate__ buildingStartDate __object__ 1981']
Text: ['The construction of 108 St Georges Terrace began in 1981.']
Predicate: buildingStartDate

Triple: ['__subject__ 108 St Georges Terrace __predicate__ completionDate __object__ 1988']
Text: ['108 St Georges Terrace was completed in 1988.']
Predicate: completionDate

Triple: ['__subject__ 108 St Georges Terrace __predicate__ cost __object__ 120 million (Australian dollars)']
Text: ['108 St Georges Terrace cost 120 million Australian dollars.']
Predicate: cost

Triple: ['__subject__ 108 St Georges Terrace __predicate__ floorArea __object__ 39500.0 (square metres)']
Text: ['108 St. Georges Terrace has a floor area of 39500.0 square metres.']
Predicate: floorArea

Triple: ['__subject__ 108 St Georges Terrace __predicate__ floorCount __object__ 50']
Text: ['108 St Georges Terrace has a floor count of 50.']
Predicate: floorCount

Triple: ['__subject__ 108 St Georges Terrace __predicate__ location __object__ Perth']
Text: ['The 108 St. Georges Terrace is located in Perth.']
Predicate: location

Triple: ['__subject__ 11 Diagonal Street __predicate__ architect __object__ Helmut_Jahn']
Text: ['The architect of 11 Diagonal Street is Helmut Jahn.']
Predicate: architect

Triple: ['__subject__ 11 Diagonal Street __predicate__ buildingStartDate __object__ 1978']
Text: ['The 11 Diagonal Street originated in 1978.']
Predicate: buildingStartDate

Triple: ['__subject__ 11 Diagonal Street __predicate__ floorArea __object__ 1200 (square metres)']
Text: ['11 Diagonal Street has a floor area of 1200 square metres.']
Predicate: floorArea

Triple: ['__subject__ 11 Diagonal Street __predicate__ floorCount __object__ 20']
Text: ['11 Diagonal Street has 20 floors.']
Predicate: floorCount

Triple: ['__subject__ 11 Diagonal Street __predicate__ location __object__ Johannesburg']
Text: ['11 Diagonal Street is in Johannesburg.']
Predicate: location

Triple: ['__subject__ 11 Diagonal Street __predicate__ owner __object__ Redefine_Properties_Limited']
Text: ['Redefine Properties Limited is the owner of 11 Diagonal Street.']
Predicate: owner

Triple: ['__subject__ 200 Public Square __predicate__ architect __object__ HOK_(firm)']
Text: ['The architect of 200 Public Square is HOK.']
Predicate: architect

Triple: ['__subject__ 200 Public Square __predicate__ floorArea __object__ 111484 (square metres)']
Text: ['200 Public Square has a floor area of 111484 square metres.']
Predicate: floorArea

Triple: ['__subject__ 200 Public Square __predicate__ floorCount __object__ 45']
Text: ['There are 45 floors at 200 Public Square.']
Predicate: floorCount

Triple: ['__subject__ 200 Public Square __predicate__ location __object__ Cleveland, Ohio 44114']
Text: ['200 Public Square is located in Cleveland, Ohio 44114.']
Predicate: location

Triple: ['__subject__ 200 Public Square __predicate__ location __object__ United States']
Text: ['200 Public Square is located in the United States.']
Predicate: location

Triple: ['__subject__ 200 Public Square __predicate__ location __object__ Cleveland']
Text: ['200 Public square is in Cleveland.']
Predicate: location

Triple: ['__subject__ 200 Public Square __predicate__ location __object__ Public_Square,_Cleveland']
Text: ['200 Public Square is located at Public Square, Cleveland.']
Predicate: location

Triple: ['__subject__ 20 Fenchurch Street __predicate__ architect __object__ Rafael_Viñoly']
Text: ['20 Fenchurch Street was designed by the architect Rafael Viñoly.']
Predicate: architect

Triple: ['__subject__ 20 Fenchurch Street __predicate__ completionDate __object__ April 2014']
Text: ['20 Fenchurch Street was completed in April of 2014.']
Predicate: completionDate

Triple: ['__subject__ 20 Fenchurch Street __predicate__ floorArea __object__ 62145.3 (square metres)']
Text: ['20 Fenchurch Street has a floor area of 62145.3 square metres.']
Predicate: floorArea

Triple: ['__subject__ 20 Fenchurch Street __predicate__ floorCount __object__ 34']
Text: ['There are 34 floors at 20 Fenchurch Street.']
Predicate: floorCount

Triple: ['__subject__ 20 Fenchurch Street __predicate__ location __object__ London']
Text: ['20 Fenchurch Street is located in London.']
Predicate: location

Triple: ['__subject__ 250 Delaware Avenue __predicate__ buildingStartDate __object__ January, 2014']
Text: ['The construction of 250 Delaware Avenue began in January 2014.']
Predicate: buildingStartDate

Triple: ['__subject__ 250 Delaware Avenue __predicate__ cost __object__ 110 million (dollars)']
Text: ['250 Delaware Avenue cost 110 million dollars.']
Predicate: cost

Triple: ['__subject__ 250 Delaware Avenue __predicate__ floorArea __object__ 30843.8 (square metres)']
Text: ['250 Delaware Avenue has a floor area of 30843.8 square metres.']
Predicate: floorArea

Triple: ['__subject__ 250 Delaware Avenue __predicate__ floorCount __object__ 12']
Text: ['250 Delaware Avenue has 12 floors.']
Predicate: floorCount

Triple: ['__subject__ 250 Delaware Avenue __predicate__ location __object__ Buffalo,_New_York']
Text: ['250 Delaware Avenue is a location in Buffalo, New York.']
Predicate: location

Triple: ['__subject__ 250 Delaware Avenue __predicate__ location __object__ United_States']
Text: ['250 Delaware Avenue is located in the United States.']
Predicate: location

Triple: ['__subject__ 300 North LaSalle __predicate__ architect __object__ Pickard_Chilton']
Text: ['Pickard Chilton is the architect of 300 North LaSalle.']
Predicate: architect

Triple: ['__subject__ 300 North LaSalle __predicate__ completionDate __object__ 2009']
Text: ['300 North LaSalle was completed in 2009.']
Predicate: completionDate

Triple: ['__subject__ 300 North LaSalle __predicate__ floorArea __object__ 120770.0 (square metres)']
Text: ['The floor area of 300 North LaSalle is 120770.0 square metres.']
Predicate: floorArea

Triple: ['__subject__ 300 North LaSalle __predicate__ location __object__ Illinois']
Text: ['300 North LaSalle is in Illinois.']
Predicate: location

Triple: ['__subject__ 320 South Boston Building __predicate__ completionDate __object__ 1929']
Text: ['The construction of 320 South Boston Building was completed in 1929.']
Predicate: completionDate

Triple: ['__subject__ 320 South Boston Building __predicate__ floorCount __object__ 22']
Text: ['There are 22 floors in 320 South Boston Building.']
Predicate: floorCount

Triple: ['__subject__ 320 South Boston Building __predicate__ formerName __object__ Exchange National Bank Building']
Text: ['320 South Boston Building was formerly called the Exchange National Bank Building.']
Predicate: formerName

Triple: ['__subject__ 320 South Boston Building __predicate__ height __object__ 121.92 (metres)']
Text: ['The 320 South Boston Building is 121.92 metres high.']
Predicate: height

Triple: ['__subject__ 3Arena __predicate__ architect __object__ Populous_(company)']
Text: ['The architect of 3Arena was the company Populous.']
Predicate: architect

Triple: ['__subject__ 3Arena __predicate__ buildingType __object__ Concert and events venue']
Text: ['The 3Arena is a concerts and events venue type building.']
Predicate: buildingType

Triple: ['__subject__ 3Arena __predicate__ completionDate __object__ December 2008']
Text: ['The completion date of 3Arena is December 2008.']
Predicate: completionDate

Triple: ['__subject__ 3Arena __predicate__ height __object__ 28.0 (metres)']
Text: ['The height of 3Arena is 28 metres.']
Predicate: height

Triple: ['__subject__ 3Arena __predicate__ location __object__ North Wall Quay']
Text: ['The 3Arena is located at the North Wall Quay.']
Predicate: location

Triple: ['__subject__ 3Arena __predicate__ location __object__ Dublin']
Text: ['The 3Arena is located in Dublin.']
Predicate: location

Triple: ['__subject__ 3Arena __predicate__ location __object__ North_Wall,_Dublin']
Text: ['3Arena is located at North Wall, Dublin.']
Predicate: location

Triple: ['__subject__ 3Arena __predicate__ owner __object__ Live_Nation_Entertainment']
Text: ['The owner of 3Arena is Live Nation Entertainment.']
Predicate: owner

Triple: ['__subject__ AC Hotel Bella Sky Copenhagen __predicate__ architect __object__ 3XN']
Text: ['3XN was the architect of the AC Hotel Bella Sky Copenhagen.']
Predicate: architect

Triple: ['__subject__ AC Hotel Bella Sky Copenhagen __predicate__ developer __object__ Bella_Center']
Text: ['The AC Hotel Bella Sky, Copenhagen was developed by the Bella Center.']
Predicate: developer

Triple: ['__subject__ AC Hotel Bella Sky Copenhagen __predicate__ floorCount __object__ 23']
Text: ['The AC Hotel Bella Sky Copenhagen has 23 floors.']
Predicate: floorCount

Triple: ['__subject__ AC Hotel Bella Sky Copenhagen __predicate__ location __object__ Copenhagen']
Text: ['The AC Hotel Bella Sky is in Copenhagen.']
Predicate: location

Triple: ['__subject__ AC Hotel Bella Sky Copenhagen __predicate__ location __object__ Denmark']
Text: ['AC Hotel Bella Sky is in Copenhagen, Denmark.']
Predicate: location

Triple: ['__subject__ AC Hotel Bella Sky Copenhagen __predicate__ owner __object__ Bella_Center']
Text: ['AC Hotel Bella Sky Copenhagen is owned by Bella Center.']
Predicate: owner

Triple: ['__subject__ AC Hotel Bella Sky Copenhagen __predicate__ tenant __object__ Marriott_International']
Text: ['Marriott International is the tenant of AC Hotel Bella Sky Copenhagen.']
Predicate: tenant

Triple: ['__subject__ Adare __predicate__ isPartOf __object__ Munster']
Text: ['Adare is part of Munster.']
Predicate: isPartOf

Triple: ['__subject__ Adare Manor __predicate__ architect __object__ Augustus_Pugin']
Text: ['The architect of Adare Manor is Augustus Pugin.']
Predicate: architect

Triple: ['__subject__ Adare Manor __predicate__ architect __object__ George_Richard_Pain']
Text: ['The architect of Adare Manor is George Richard Pain.']
Predicate: architect

Triple: ['__subject__ Adare Manor __predicate__ architect __object__ James_Pain']
Text: ['The architect of Adare Manor was James Pain.']
Predicate: architect

Triple: ['__subject__ Adare Manor __predicate__ architect __object__ Lewis_Nockalls_Cottingham']
Text: ['Adare Manor was designed by the architect Lewis Nockalls Cottingham.']
Predicate: architect

Triple: ['__subject__ Adare Manor __predicate__ architect __object__ Philip_Charles_Hardwick']
Text: ['Philip Charles Hardwick was the architect of Adare Manor.']
Predicate: architect

Triple: ['__subject__ Adare Manor __predicate__ completionDate __object__ 1862']
Text: ['The construction of Adare Manor was completed in 1862.']
Predicate: completionDate

Triple: ['__subject__ Adare Manor __predicate__ location __object__ Adare']
Text: ['Adare Manor is located in Adare.']
Predicate: location

Triple: ['__subject__ Adare Manor __predicate__ location __object__ County_Limerick']
Text: ['Adare Manor is located in County Limerick.']
Predicate: location

Triple: ['__subject__ Adare Manor __predicate__ owner __object__ J._P._McManus']
Text: ['J P McManus is the owner of Adare Manor.']
Predicate: owner

Triple: ['__subject__ Addis Ababa __predicate__ country __object__ Ethiopia']
Text: ['Addis Ababa is located in Ethiopia.']
Predicate: country

Triple: ['__subject__ Addis Ababa __predicate__ isPartOf __object__ Addis_Ababa_Stadium']
Text: ['Addis Ababa Stadium is part of Addid Ababa.']
Predicate: isPartOf

Triple: ['__subject__ Addis Ababa City Hall __predicate__ buildingStartDate __object__ 1961']
Text: ['Building started on the Addis Ababa City Hall in 1961.']
Predicate: buildingStartDate

Triple: ['__subject__ Addis Ababa City Hall __predicate__ buildingType __object__ Seat_of_local_government']
Text: ['The Addis Ababa City Hall is the seat of the local government.']
Predicate: buildingType

Triple: ['__subject__ Addis Ababa City Hall __predicate__ completionDate __object__ 1964']
Text: ['Addis Ababa City Hall was completed in 1964.']
Predicate: completionDate

Triple: ['__subject__ Addis Ababa City Hall __predicate__ country __object__ Ethiopia']
Text: ['Addis Ababa City Hall is located in the country of Ethiopia.']
Predicate: country

Triple: ['__subject__ Addis Ababa City Hall __predicate__ currentTenants __object__ Government of Addis Ababa']
Text: ['The Government of Addis Ababa is the current tenant of the Addis Ababa City Hall.']
Predicate: currentTenants

Triple: ['__subject__ Addis Ababa City Hall __predicate__ floorArea __object__ 140000.0 (square metres)']
Text: ['The floor area of Addis Ababa City Hall is 140000.0 (square metres).']
Predicate: floorArea

Triple: ['__subject__ Addis Ababa City Hall __predicate__ height __object__ 42 m']
Text: ['Addis Ababa City Hall has a height of 42 metres.']
Predicate: height

Triple: ['__subject__ Addis Ababa City Hall __predicate__ location __object__ Addis_Ababa']
Text: ['Addis Ababa City Hall is located in Addis Ababa.']
Predicate: location

Triple: ["__subject__ Adisham Hall __predicate__ address __object__ St. Benedict's Monastery, Adisham, Haputhale, Sri Lanka"]
Text: ["Adisham Hall is located on St. Benedict's Monastery, Adisham, Haputhale, Sri Lanka."]
Predicate: address

Triple: ['__subject__ Adisham Hall __predicate__ architecturalStyle __object__ Tudor and Jacabian']
Text: ['Adisham Halls Architectural style`is Tudor and Jacabian.']
Predicate: architecturalStyle

Triple: ['__subject__ Adisham Hall __predicate__ architecturalStyle __object__ Tudor_Revival_architecture']
Text: ['Adisham Hall has the Tudor Revival architectural style.']
Predicate: architecturalStyle

Triple: ['__subject__ Adisham Hall __predicate__ buildingStartDate __object__ 1927']
Text: ['Construction of Adisham Hall began in 1927.']
Predicate: buildingStartDate

Triple: ['__subject__ Adisham Hall __predicate__ completionDate __object__ 1931']
Text: ['Adisham Hall was completed in 1931.']
Predicate: completionDate

Triple: ['__subject__ Adisham Hall __predicate__ country __object__ Sri_Lanka']
Text: ['Adisham Hall is located in Sri Lanka.']
Predicate: country

Triple: ['__subject__ Adisham Hall __predicate__ location __object__ Haputale, Sri Lanka']
Text: ['Adisham Hall is located at Haputale, Sri Lanka.']
Predicate: location

Triple: ['__subject__ Adisham Hall __predicate__ location __object__ Sri_Lanka']
Text: ['Adisham Hall is located in Sri Lanka.']
Predicate: location

Triple: ['__subject__ Ahmedabad __predicate__ country __object__ India']
Text: ['Ahmedabad is in India.']
Predicate: country

Triple: ['__subject__ Akita, Akita __predicate__ country __object__ Japan']
Text: ['Akita Akita is found in the country of Japan.']
Predicate: country

Triple: ['__subject__ Akita, Akita __predicate__ isPartOf __object__ Akita_Prefecture']
Text: ['Akita, Akita is part of Akita Prefecture.']
Predicate: isPartOf

Triple: ['__subject__ Akita Museum of Art __predicate__ address __object__ 1-4-2 Nakadori']
Text: ['The address of Akita Museum of Art is "1-4-2 Nakadori".']
Predicate: address

Triple: ['__subject__ Akita Museum of Art __predicate__ architect __object__ Tadao_Ando']
Text: ['Tadao Ando is the architect who designed the Akita Museum of Art.']
Predicate: architect

Triple: ['__subject__ Akita Museum of Art __predicate__ floorArea __object__ 3746.66 (square metres)']
Text: ['The Akita Museum of Art has a floor area of 3746.66 (square metres).']
Predicate: floorArea

Triple: ['__subject__ Akita Museum of Art __predicate__ floorCount __object__ 3']
Text: ['The Akita Museum of Art has 3 floors.']
Predicate: floorCount

Triple: ['__subject__ Akita Museum of Art __predicate__ location __object__ Akita,_Akita']
Text: ['Akita Museum of Art is an art museum in the city of Akita.']
Predicate: location

Triple: ['__subject__ Akita Museum of Art __predicate__ location __object__ Akita_Prefecture']
Text: ['Akita Museum of Art is located in Akita Prefecture.']
Predicate: location

Triple: ['__subject__ Akita Prefecture __predicate__ country __object__ Japan']
Text: ['The Akita Prefecture is located in Japan.']
Predicate: country

Triple: ['__subject__ Alan B. Miller Hall __predicate__ address __object__ 101 Ukrop Way']
Text: ['The address of Alan B. Miller Hall is "101 Ukrop Way".']
Predicate: address

Triple: ['__subject__ Alan B. Miller Hall __predicate__ architect __object__ Robert_A._M._Stern']
Text: ['Robert A.M. Stern is the architect for Alan B. Miller Hall.']
Predicate: architect

Triple: ['__subject__ Alan B. Miller Hall __predicate__ architecturalStyle __object__ Georgian_architecture']
Text: ['The architectural style of the Alan B. Miller Hall is Georgian.']
Predicate: architecturalStyle

Triple: ['__subject__ Alan B. Miller Hall __predicate__ buildingStartDate __object__ 30 March 2007']
Text: ["Alan B. Miller Hall's building start date was in 30th March 2007."]
Predicate: buildingStartDate

Triple: ['__subject__ Alan B. Miller Hall __predicate__ completionDate __object__ 2009-06-01']
Text: ['Alan B. Miller Hall was completed on June 1st, 2009.']
Predicate: completionDate

Triple: ['__subject__ Alan B. Miller Hall __predicate__ cost __object__ 75.0 million (dollars)']
Text: ['The Alan B Miller Hall cost 75 million dollars.']
Predicate: cost

Triple: ['__subject__ Alan B. Miller Hall __predicate__ inaugurationDate __object__ 2009-10-02']
Text: ['Alan B. Miller Hall was inaugurated on 2009-10-02.']
Predicate: inaugurationDate

Triple: ['__subject__ Alan B. Miller Hall __predicate__ location __object__ Virginia']
Text: ['Alan B Miller Hall is located in Virginia.']
Predicate: location

Triple: ['__subject__ Alan B. Miller Hall __predicate__ location __object__ Williamsburg,_Virginia']
Text: ['The Alan B. Miller Hall is in Williamsburg, Virginia.']
Predicate: location

Triple: ['__subject__ Alan B. Miller Hall __predicate__ tenant __object__ Mason_School_of_Business']
Text: ['Mason School of Business is a tenant of the Alan B. Miller Hall.']
Predicate: tenant

Triple: ['__subject__ Alfred Giles (architect) __predicate__ birthPlace __object__ England']
Text: ['The architect Alfred Giles was born in England.']
Predicate: birthPlace

Triple: ['__subject__ Alfred Giles (architect) __predicate__ deathPlace __object__ Kendall_County,_Texas']
Text: ['The architect Alfred Giles died in Kendall County, Texas.']
Predicate: deathPlace

Triple: ['__subject__ Amdavad ni Gufa __predicate__ completionDate __object__ 1995']
Text: ['Amdavad ni Gufa was completed in 1995.']
Predicate: completionDate

Triple: ['__subject__ Amdavad ni Gufa __predicate__ country __object__ India']
Text: ['Amdavad ni Gufa is located in India.']
Predicate: country

Triple: ['__subject__ Amdavad ni Gufa __predicate__ location __object__ Ahmedabad']
Text: ['The location of Amdavad ni Gufa is Ahmedabad.']
Predicate: location

Triple: ['__subject__ Amdavad ni Gufa __predicate__ location __object__ Gujarat']
Text: ['Amdavad ni Gufa is located in Gujarat.']
Predicate: location

Triple: ['__subject__ Ampara Hospital __predicate__ bedCount __object__ 476']
Text: ['The bed count of Ampara Hospital is 476.']
Predicate: bedCount

Triple: ['__subject__ Ampara Hospital __predicate__ location __object__ Ampara']
Text: ['The Ampara Hospital is in Ampara.']
Predicate: location

Triple: ['__subject__ Ampara Hospital __predicate__ region __object__ Ampara_District']
Text: ['Ampara Hospital is located in the region of Ampara District.']
Predicate: region

Triple: ['__subject__ Ampara Hospital __predicate__ state __object__ Eastern_Province,_Sri_Lanka']
Text: ['Ampara Hospital is in Eastern Province, Sri Lanka.']
Predicate: state

Triple: ['__subject__ Ampara Hospital __predicate__ website __object__ <http://www.ghampara.gov.lk/>']
Text: ['Ampara Hospital has a website: http://www.ghampara.gov.lk/.']
Predicate: website

Triple: ['__subject__ Asher and Mary Isabelle Richardson House __predicate__ architect __object__ Alfred_Giles_(architect)']
Text: ['Alfred Giles was the architect of Asher and Mary Isabelle Richardson House.']
Predicate: architect

Triple: ['__subject__ Asher and Mary Isabelle Richardson House __predicate__ location __object__ Asherton,_Texas']
Text: ['Asher and Mary Isabelle Richardson House is located in Asherton, Texas.']
Predicate: location

Triple: ['__subject__ Asher and Mary Isabelle Richardson House __predicate__ location __object__ U.S._Route_83']
Text: ['Asher and Mary Isabelle Richardson House is located at U.S. Route 83.']
Predicate: location

Triple: ['__subject__ Asher and Mary Isabelle Richardson House __predicate__ yearOfConstruction __object__ 1911']
Text: ['Asher and Mary Isabelle Richardson House was built in 1911.']
Predicate: yearOfConstruction

Triple: ['__subject__ Asherton, Texas __predicate__ country __object__ United_States']
Text: ['Asherton Texas is in the United States.']
Predicate: country

Triple: ['__subject__ Asherton, Texas __predicate__ isPartOf __object__ Dimmit_County,_Texas']
Text: ['Asherton, Texas is part of Dimmit County, Texas.']
Predicate: isPartOf

Triple: ['__subject__ Asherton, Texas __predicate__ isPartOf __object__ United_States']
Text: ['Asherton, Texas is part of the United States.']
Predicate: isPartOf

Triple: ['__subject__ Asilomar Conference Grounds __predicate__ NationalRegisterOfHistoricPlacesReferenceNumber __object__ 87000823']
Text: ['Asilomar Conference Grounds has the reference number 87000823 in the National Register of Historic Places.']
Predicate: NationalRegisterOfHistoricPlacesReferenceNumber

Triple: ['__subject__ Asilomar Conference Grounds __predicate__ addedToTheNationalRegisterOfHistoricPlaces __object__ 1987-02-27']
Text: ['The Asilomar Conference Grounds were added to the National Register of Historic Places on 27 February 1987.']
Predicate: addedToTheNationalRegisterOfHistoricPlaces

Triple: ['__subject__ Asilomar Conference Grounds __predicate__ architecturalStyle __object__ American_Craftsman']
Text: ['The Asilomar Conference Grounds have the architectural style of American Craftsman.']
Predicate: architecturalStyle

Triple: ['__subject__ Asilomar Conference Grounds __predicate__ architecturalStyle __object__ Arts_and_Crafts_movement']
Text: ['Asilomar Conference Grounds has the architectural style of the Arts and Crafts Movement.']
Predicate: architecturalStyle

Triple: ['__subject__ Asilomar Conference Grounds __predicate__ location __object__ Asilomar Blvd., Pacific Grove, California']
Text: ['Asilomar Conference Grounds is located at Asilomar Blvd., Pacific Grove, California.']
Predicate: location

Triple: ['__subject__ Asilomar Conference Grounds __predicate__ location __object__ Pacific_Grove,_California']
Text: ['The Asilomar Conference Grounds is located at Pacific Grove, California.']
Predicate: location

Triple: ['__subject__ Asser Levy Public Baths __predicate__ NationalRegisterOfHistoricPlacesReferenceNumber __object__ 80002709']
Text: ['Asser Levy Public Baths has the reference number 80002709 in the National Register of Historic Places.']
Predicate: NationalRegisterOfHistoricPlacesReferenceNumber

Triple: ['__subject__ Asser Levy Public Baths __predicate__ addedToTheNationalRegisterOfHistoricPlaces __object__ 1980-04-23']
Text: ['Asser Levy Public Baths was added to the National Register of Historic Places on 1980-04-23.']
Predicate: addedToTheNationalRegisterOfHistoricPlaces

Triple: ['__subject__ Asser Levy Public Baths __predicate__ architecturalStyle __object__ Romanesque_Revival_architecture']
Text: ['The Asser Levy Public Baths have the Romanesque Revival style of architecture.']
Predicate: architecturalStyle

Triple: ['__subject__ Asser Levy Public Baths __predicate__ location __object__ Asser Levy Place and East 23rd Street']
Text: ['The Asser Levy Public Baths is in Asser Levy Place and East 23rd Street.']
Predicate: location

Triple: ['__subject__ Asser Levy Public Baths __predicate__ location __object__ 23rd_Street_(Manhattan)']
Text: ['Asser Levy Public Baths is located at 23rd Street (Manhattan).']
Predicate: location

Triple: ['__subject__ Asser Levy Public Baths __predicate__ location __object__ Avenue_A_(Manhattan)']
Text: ['Asser Levy Public Baths is located in Avenue A, Manhattan.']
Predicate: location

Triple: ['__subject__ Asser Levy Public Baths __predicate__ location __object__ Manhattan']
Text: ['Asser Levy Public Baths is located in Manhattan.']
Predicate: location

Triple: ['__subject__ Augustus Pugin __predicate__ birthPlace __object__ Bloomsbury']
Text: ['The birth place of Augustus Pugin is Bloomsbury.']
Predicate: birthPlace

Triple: ['__subject__ Augustus Pugin __predicate__ significantBuilding __object__ Palace_of_Westminster']
Text: ['One of the significant buildings designed by Augustus Pugin is the Palace Of Westminster.']
Predicate: significantBuilding

Triple: ['__subject__ Birmingham __predicate__ governingBody __object__ Birmingham_City_Council']
Text: ["Birmingham's governing body is Birmingham City Council."]
Predicate: governingBody

Triple: ['__subject__ Birmingham __predicate__ leader __object__ Andrew_Mitchell']
Text: ['Andrew Mitchell is the leader of Birmingham.']
Predicate: leader

Triple: ['__subject__ Birmingham __predicate__ leader __object__ Conservative_Party_(UK)']
Text: ['The leader of Birmingham is the Conservative Party (UK).']
Predicate: leader

Triple: ['__subject__ Birmingham __predicate__ leader __object__ John_Clancy_(Labour_politician)']
Text: ['Labour politician, John Clancy is the leader of Birmingham.']
Predicate: leader

Triple: ['__subject__ Birmingham __predicate__ leader __object__ Khalid_Mahmood_(British_politician)']
Text: ['Khalid Mahmood (British politician) is one of the leaders of Birmingham.']
Predicate: leader

Triple: ['__subject__ Birmingham __predicate__ leader __object__ Labour_Party_(UK)']
Text: ['Birmingham Council is led by the Labour Party (UK).']
Predicate: leader

Triple: ['__subject__ Birmingham __predicate__ leader __object__ Liberal_Democrats']
Text: ['The Liberal Democrats are the leaders of Birmingham.']
Predicate: leader

Triple: ['__subject__ Buffalo, New York __predicate__ isPartOf __object__ New_York']
Text: ['Buffalo New York is part of New York.']
Predicate: isPartOf

Triple: ['__subject__ Chicago __predicate__ country __object__ United_States']
Text: ['Chicago is located in the United States.']
Predicate: country

Triple: ['__subject__ Chicago __predicate__ isPartOf __object__ Cook_County,_Illinois']
Text: ['Chicago is part of Cook County, Illinois.']
Predicate: isPartOf

Triple: ['__subject__ Chicago __predicate__ isPartOf __object__ Illinois']
Text: ['Chicago is part of Illinois.']
Predicate: isPartOf

Triple: ['__subject__ Chicago __predicate__ leader __object__ Rahm_Emanuel']
Text: ['Rahm Emanuel is a leader in Chicago.']
Predicate: leader

Triple: ['__subject__ Chicago __predicate__ leader __object__ Susana_Mendoza']
Text: ['Susana Mendoza is the leader of Chicago.']
Predicate: leader

Triple: ['__subject__ Cleveland __predicate__ country __object__ United_States']
Text: ['Cleveland is located in the United States.']
Predicate: country

Triple: ['__subject__ Cleveland __predicate__ governingBody __object__ Cleveland_City_Council']
Text: ["Cleveland's governing body is Cleveland City Council."]
Predicate: governingBody

Triple: ['__subject__ Cleveland __predicate__ isPartOf __object__ Cuyahoga_County,_Ohio']
Text: ['Cleveland is part of Cuyahoga County, Ohio.']
Predicate: isPartOf

Triple: ['__subject__ Cleveland __predicate__ isPartOf __object__ Ohio']
Text: ['Cleveland is located within Ohio.']
Predicate: isPartOf

Triple: ['__subject__ Cleveland __predicate__ leader __object__ Frank_G._Jackson']
Text: ['Frank G Jackson is a leader in Cleveland.']
Predicate: leader

Triple: ['__subject__ College of William & Mary __predicate__ chancellor __object__ Robert_Gates']
Text: ['Robert Gates is the chancellor of the College of William & Mary.']
Predicate: chancellor

Triple: ['__subject__ County Limerick __predicate__ governmentType __object__ Limerick_City_and_County_Council']
Text: ['County Limerick is governed by the Limerick City and County Council.']
Predicate: governmentType

Triple: ['__subject__ Denmark __predicate__ capital __object__ Copenhagen']
Text: ['Copenhagen is the capital of Denmark.']
Predicate: capital

Triple: ['__subject__ Denmark __predicate__ language __object__ Faroese_language']
Text: ['The Faroese Language is spoken in Denmark.']
Predicate: language

Triple: ['__subject__ Denmark __predicate__ language __object__ German_language']
Text: ['One of the languages in Denmark is German.']
Predicate: language

Triple: ['__subject__ Denmark __predicate__ language __object__ Greenlandic_language']
Text: ['Greenlandic is one of the languages of Denmark.']
Predicate: language

Triple: ['__subject__ Denmark __predicate__ leader __object__ Lars_Løkke_Rasmussen']
Text: ["Lars Lokke Rasmussen is Denmark's leader."]
Predicate: leader

Triple: ['__subject__ Denmark __predicate__ leader __object__ Margrethe_II_of_Denmark']
Text: ['Margrethe II of Denmark is the leader of Denmark.']
Predicate: leader

Triple: ['__subject__ Dublin __predicate__ isPartOf __object__ Republic_of_Ireland']
Text: ['Dublin is part of the Republic of Ireland.']
Predicate: isPartOf

Triple: ['__subject__ Dublin __predicate__ leaderTitle __object__ Dáil_Éireann']
Text: ['Dáil Éireann is a leader in Dublin.']
Predicate: leaderTitle

Triple: ['__subject__ Dublin __predicate__ leaderTitle __object__ European_Parliament']
Text: ['Dublin is led by the European Parliament.']
Predicate: leaderTitle

Triple: ['__subject__ Eastern Province, Sri Lanka __predicate__ governingBody __object__ Eastern_Provincial_Council']
Text: ['The governing body of the Eastern Province Sri Lanka is the Eastern Provincial Council.']
Predicate: governingBody

Triple: ['__subject__ Eastern Province, Sri Lanka __predicate__ leader __object__ Austin_Fernando']
Text: ['The leader of the Eastern Province, Sri Lanka is Austin Fernando.']
Predicate: leader

Triple: ['__subject__ Ethiopia __predicate__ currency __object__ Ethiopian_birr']
Text: ["Ethiopia's currency is the Ethiopian Birr."]
Predicate: currency

Triple: ['__subject__ Ethiopia __predicate__ language __object__ Amharic']
Text: ['Amharic is a language found in Ethiopia.']
Predicate: language

Triple: ['__subject__ Ethiopia __predicate__ leader __object__ Hailemariam_Desalegn']
Text: ['The leader of Ethiopia is Hailemariam Desalegn.']
Predicate: leader

Triple: ['__subject__ George Winkler __predicate__ country __object__ United_States']
Text: ['George Winkler is from the United States.']
Predicate: country

Triple: ['__subject__ Gujarat __predicate__ leader __object__ Anandiben_Patel']
Text: ['Anandiben Patel is the leader of Gujarat.']
Predicate: leader

Triple: ['__subject__ Gujarat __predicate__ leaderTitle __object__ Gujarat_Legislative_Assembly']
Text: ["Gujarat's leader is known as the Gujarat Legislative Assembly."]
Predicate: leaderTitle

Triple: ['__subject__ Illinois __predicate__ capital __object__ Springfield,_Illinois']
Text: ['The capital of Illinois is Springfield, Illinois.']
Predicate: capital

Triple: ['__subject__ Illinois __predicate__ country __object__ United_States']
Text: ['Illinois is in the United States.']
Predicate: country

Triple: ['__subject__ Illinois __predicate__ language __object__ English_language']
Text: ['The English language is spoken in Illinois.']
Predicate: language

Triple: ['__subject__ India __predicate__ leader __object__ Narendra_Modi']
Text: ['Narendra Modi leads India.']
Predicate: leader

Triple: ['__subject__ India __predicate__ leader __object__ T._S._Thakur']
Text: ['T S Thakur is a leader in India.']
Predicate: leader

Triple: ['__subject__ Japan __predicate__ ethnicGroup __object__ Chinese_people_in_Japan']
Text: ['There is an ethnic group of Chinese people in Japan.']
Predicate: ethnicGroup

Triple: ['__subject__ Japan __predicate__ ethnicGroup __object__ Filipinos_in_Japan']
Text: ['One of the ethnic groups in Japan is the Filipinos.']
Predicate: ethnicGroup

Triple: ['__subject__ Japan __predicate__ ethnicGroup __object__ Japanese_people']
Text: ['The main ethnic group in Japan is the Japanese.']
Predicate: ethnicGroup

Triple: ['__subject__ Japan __predicate__ ethnicGroup __object__ Koreans_in_Japan']
Text: ['Japan has an ethnic group called Koreans in Japan.']
Predicate: ethnicGroup

Triple: ['__subject__ Japan __predicate__ ethnicGroup __object__ Vietnamese_people_in_Japan']
Text: ['There is an ethnic group of Vietnamese people in Japan.']
Predicate: ethnicGroup

Triple: ['__subject__ Japan __predicate__ leader __object__ Akihito']
Text: ['The leader of Japan is called Akihito.']
Predicate: leader

Triple: ['__subject__ Japan __predicate__ leader __object__ Shinzō_Abe']
Text: ['The leader of Japan is Shinzō Abe.']
Predicate: leader

Triple: ['__subject__ John Madin __predicate__ birthPlace __object__ Birmingham']
Text: ['John Madin was born in Birmingham.']
Predicate: birthPlace

Triple: ['__subject__ John Madin __predicate__ origin __object__ Birmingham']
Text: ['Birmingham is the home town of John Madin.']
Predicate: origin

Triple: ['__subject__ Julia Morgan __predicate__ birthPlace __object__ California']
Text: ['The birth place of Julia Morgan is California.']
Predicate: birthPlace

Triple: ['__subject__ Julia Morgan __predicate__ birthPlace __object__ San_Francisco']
Text: ['Julia Morgan was born in San Francisco.']
Predicate: birthPlace

Triple: ['__subject__ Julia Morgan __predicate__ significantBuilding __object__ Asilomar_State_Beach']
Text: ['One of the significant buildings designed by Julia Morgan is the Asilomar State Beach.']
Predicate: significantBuilding

Triple: ['__subject__ Julia Morgan __predicate__ significantBuilding __object__ Chinatown,_San_Francisco']
Text: ['Julia Morgan designed significant buildings in Chinatown, San Francisco.']
Predicate: significantBuilding

Triple: ['__subject__ Julia Morgan __predicate__ significantBuilding __object__ Riverside_Art_Museum']
Text: ["The Riverside Art Museum is one of Julia Morgan's significant buildings."]
Predicate: significantBuilding

Triple: ['__subject__ Julia Morgan __predicate__ significantProject __object__ Hearst_Castle']
Text: ['Hearst Castle was a significant project of Julia Morgan.']
Predicate: significantProject

Triple: ['__subject__ London __predicate__ leader __object__ Boris_Johnson']
Text: ['Boris Johnson is the leader in London.']
Predicate: leader

Triple: ['__subject__ London __predicate__ leaderTitle __object__ European_Parliament']
Text: ['London is led via the European Parliament.']
Predicate: leaderTitle

Triple: ['__subject__ London __predicate__ leaderTitle __object__ Parliament_of_the_United_Kingdom']
Text: ['The Parliament of the United Kingdom is the leader of London.']
Predicate: leaderTitle

Triple: ['__subject__ Manhattan __predicate__ leader __object__ Cyrus_Vance,_Jr.']
Text: ['The leader of Manhattan is Cyrus Vance Jr.']
Predicate: leader

Triple: ['__subject__ Manhattan __predicate__ leader __object__ Gale_Brewer']
Text: ['The leader of Manhattan is Gale Brewer.']
Predicate: leader

Triple: ['__subject__ Marriott International __predicate__ foundationPlace __object__ Washington,_D.C.']
Text: ['Marriott International was founded in Washington, D.C.']
Predicate: foundationPlace

Triple: ['__subject__ Marriott International __predicate__ location __object__ Bethesda,_Maryland']
Text: ['Marriott International is based in Bethesda, Maryland.']
Predicate: location

Triple: ['__subject__ Mason School of Business __predicate__ country __object__ United_States']
Text: ['The Mason School of Business is located in the United States.']
Predicate: country

Triple: ['__subject__ New York City __predicate__ country __object__ United_States']
Text: ['New York city is located in the U.S.']
Predicate: country

Triple: ['__subject__ New York City __predicate__ isPartOf __object__ Brooklyn']
Text: ['Brooklyn is part of New York City.']
Predicate: isPartOf

Triple: ['__subject__ New York City __predicate__ isPartOf __object__ Manhattan']
Text: ['Manhattan is part of New York City.']
Predicate: isPartOf

Triple: ['__subject__ New York City __predicate__ isPartOf __object__ New_York']
Text: ['New York City is part of New York.']
Predicate: isPartOf

Triple: ['__subject__ Pacific Grove, California __predicate__ country __object__ United_States']
Text: ['Pacific Grove, California is in the United States.']
Predicate: country

Triple: ['__subject__ Perth __predicate__ country __object__ Australia']
Text: ['Perth is located in Australia.']
Predicate: country

Triple: ['__subject__ Republic of Ireland __predicate__ currency __object__ Euro']
Text: ['The currency of the Republic of Ireland is the euro.']
Predicate: currency

Triple: ['__subject__ Republic of Ireland __predicate__ demonym __object__ Irish_people']
Text: ['Irish people are the inhabitants of the Republic of Ireland.']
Predicate: demonym

Triple: ['__subject__ Republic of Ireland __predicate__ language __object__ Irish_language']
Text: ['In the Republic of Ireland they speak Irish.']
Predicate: language

Triple: ['__subject__ Republic of Ireland __predicate__ leader __object__ Enda_Kenny']
Text: ['The leader of the Republic of Ireland is Enda Kenny.']
Predicate: leader

Triple: ['__subject__ South Africa __predicate__ demonym __object__ South_Africa']
Text: ['People from South Africa can say they are from South Africa.']
Predicate: demonym

Triple: ['__subject__ South Africa __predicate__ ethnicGroup __object__ Asian_South_Africans']
Text: ['In South Africa there is an ethnic group of Asian South Africans.']
Predicate: ethnicGroup

Triple: ['__subject__ South Africa __predicate__ ethnicGroup __object__ Coloured']
Text: ["One of South Africa's ethnic groups are the Coloured."]
Predicate: ethnicGroup

Triple: ['__subject__ South Africa __predicate__ leader __object__ Cyril_Ramaphosa']
Text: ['Cyril Ramaphosa is the leader of South Africa.']
Predicate: leader

Triple: ['__subject__ South Africa __predicate__ leader __object__ Jacob_Zuma']
Text: ["South Africa's leader is called Jacob Zuma."]
Predicate: leader

Triple: ['__subject__ Sri Lanka __predicate__ capital __object__ Sri_Jayawardenepura_Kotte']
Text: ['The capital of Sri Lanka is Sri Jayawardenepura Kotte.']
Predicate: capital

Triple: ['__subject__ Sri Lanka __predicate__ currency __object__ Sri_Lankan_rupee']
Text: ["Ski Lanka's currency is the Sri Lankan rupee."]
Predicate: currency

Triple: ['__subject__ Sri Lanka __predicate__ language __object__ Tamil_language']
Text: ['The language of Sri Lanka is the Tamil language.']
Predicate: language

Triple: ['__subject__ Sri Lanka __predicate__ leader __object__ Ranil_Wickremesinghe']
Text: ['Ranil Wickremesinghe is a leader of Sri Lanka.']
Predicate: leader

Triple: ['__subject__ United Kingdom __predicate__ currency __object__ Pound_sterling']
Text: ["The United Kingdom's currency is Pound sterling."]
Predicate: currency

Triple: ['__subject__ United Kingdom __predicate__ demonym __object__ British_people']
Text: ['The demonym for natives of the United kingdom is British people.']
Predicate: demonym

Triple: ['__subject__ United States __predicate__ capital __object__ Washington,_D.C.']
Text: ['Washington DC is the capital of the United States.']
Predicate: capital

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ African_Americans']
Text: ['One of the ethnic groups of the United States are the African Americans.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ Asian_Americans']
Text: ['An ethnic group of the United States is Asian Americans.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ White_Americans']
Text: ['One United States ethnic group is White Americans.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ language __object__ English_language']
Text: ['English is the language of the U.S.']
Predicate: language

Triple: ['__subject__ United States __predicate__ leader __object__ Barack_Obama']
Text: ['The leader of the United States was Barack Obama.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ leader __object__ Joe_Biden']
Text: ['Joe Biden is a leader of the United States.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ leader __object__ John_Roberts']
Text: ['The United States of America`s Chief Justice is John Roberts.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ leaderTitle __object__ President_of_the_United_States']
Text: ['The leader of the United States is known as the President of the United States.']
Predicate: leaderTitle

Triple: ['__subject__ Virginia __predicate__ country __object__ United_States']
Text: ['Virginia is in the United States.']
Predicate: country

Triple: ['__subject__ (15788) 1993 SB __predicate__ apoapsis __object__ 7715100000.0 (kilometres)']
Text: ['The apoapsis for (15788) 1993 SB is 7715100000.0 (kilometres).']
Predicate: apoapsis

Triple: ['__subject__ (15788) 1993 SB __predicate__ discoverer __object__ Alan_Fitzsimmons']
Text: ['Alan Fitzsimmons was the discoverer of 15788 1993 SB.']
Predicate: discoverer

Triple: ["__subject__ (15788) 1993 SB __predicate__ discoverer __object__ Donal_O'Ceallaigh"]
Text: ["The discoverer of (15788) 1993 SB is Donal O'Ceallaigh."]
Predicate: discoverer

Triple: ['__subject__ (15788) 1993 SB __predicate__ discoverer __object__ Iwan_P._Williams']
Text: ['Iwan P Williams discovered 15788 1993 SB.']
Predicate: discoverer

Triple: ['__subject__ (15788) 1993 SB __predicate__ discoverer __object__ Roque_de_los_Muchachos_Observatory']
Text: ['15788 1993 SB was discovered by Roque de los Muchachos Observatory.']
Predicate: discoverer

Triple: ['__subject__ (15788) 1993 SB __predicate__ epoch __object__ 2006-03-06']
Text: ['(15788) 1993 SB has an epoch date of March 6th 2006.']
Predicate: epoch

Triple: ['__subject__ (15788) 1993 SB __predicate__ orbitalPeriod __object__ 7729430000.0']
Text: ['(15788) 1993 SB has an orbital period of 7729430000.0.']
Predicate: orbitalPeriod

Triple: ['__subject__ (15788) 1993 SB __predicate__ periapsis __object__ 3997100000000.0']
Text: ['The periapsis of (15788) 1993 SB is 3997100000000.0.']
Predicate: periapsis

Triple: ['__subject__ (19255) 1994 VK8 __predicate__ apoapsis __object__ 6603633000.0 (kilometres)']
Text: ['(19255) 1994 VK8 has an apoapsis of 6603633000.0 kilometres.']
Predicate: apoapsis

Triple: ['__subject__ (19255) 1994 VK8 __predicate__ averageSpeed __object__ 4.56 (kilometrePerSeconds)']
Text: ['The average speed of (19255) 1994 VK8 is 4.56 km per sec.']
Predicate: averageSpeed

Triple: ['__subject__ (19255) 1994 VK8 __predicate__ epoch __object__ 2006-12-31']
Text: ['The epoch of (19255) 1994 VK8 is on 31 December 2006.']
Predicate: epoch

Triple: ['__subject__ (19255) 1994 VK8 __predicate__ escapeVelocity __object__ 0.0925 (kilometrePerSeconds)']
Text: ['(19255) 1994 VK8 has an escape velocity of 0.0925 kilometres per second.']
Predicate: escapeVelocity

Triple: ['__subject__ (19255) 1994 VK8 __predicate__ mass __object__ 5.6 (kilograms)']
Text: ['19255 1994 VK8 has a mass of 5.6 kgs.']
Predicate: mass

Triple: ['__subject__ (19255) 1994 VK8 __predicate__ orbitalPeriod __object__ 8788850000.0']
Text: ['(19255) 1994 VK8 has an orbital period of 8788850000.0.']
Predicate: orbitalPeriod

Triple: ['__subject__ (19255) 1994 VK8 __predicate__ periapsis __object__ 6155910000000.0']
Text: ['(19255) 1994 VK8 has a periapsis of 6155910000000.0.']
Predicate: periapsis

Triple: ['__subject__ (19255) 1994 VK8 __predicate__ temperature __object__ 43.0 (kelvins)']
Text: ['(19255) 1994 VK8 has a temperature of 43.0 kelvins.']
Predicate: temperature

Triple: ['__subject__ (29075) 1950 DA __predicate__ density __object__ 3.5 (kilograms)']
Text: ['(29075) 1950 DA has a density of 3.5 kilograms.']
Predicate: density

Triple: ['__subject__ (29075) 1950 DA __predicate__ epoch __object__ 2011-Aug-27']
Text: ['(29075) 1950 DA has an epoch date of August 27th 2011.']
Predicate: epoch

Triple: ['__subject__ (29075) 1950 DA __predicate__ mass __object__ 4.0 (kilograms)']
Text: ['(29075) 1950 DA has a mass of 4.0 kilograms.']
Predicate: mass

Triple: ['__subject__ (29075) 1950 DA __predicate__ orbitalPeriod __object__ 69862200.0']
Text: ['(29075) 1950 DA has an orbital period of 69862200.0.']
Predicate: orbitalPeriod

Triple: ['__subject__ (29075) 1950 DA __predicate__ periapsis __object__ 124950000000.0']
Text: ['(29075) 1950 DA has a periapsis of 124950000000.0.']
Predicate: periapsis

Triple: ['__subject__ (29075) 1950 DA __predicate__ rotationPeriod __object__ 7637.76']
Text: ['(29075) 1950 DA has a rotation period of 7637.76.']
Predicate: rotationPeriod

Triple: ['__subject__ (410777) 2009 FD __predicate__ density __object__ 1890.0 (kilogramPerCubicMetres)']
Text: ['(410777) 2009 FD has a density of 1890.0 kilograms per cubic metres.']
Predicate: density

Triple: ['__subject__ (410777) 2009 FD __predicate__ discoverer __object__ Spacewatch']
Text: ['410777 2009 FD was discovered by Spacewatch.']
Predicate: discoverer

Triple: ['__subject__ (410777) 2009 FD __predicate__ epoch __object__ 2015-06-27']
Text: ['The epoch date of 410777 2009 FD is 27 June 2015.']
Predicate: epoch

Triple: ['__subject__ (410777) 2009 FD __predicate__ mass __object__ 8.3 (kilograms)']
Text: ['410777 2009 FD has a mass of 8.3 kgs.']
Predicate: mass

Triple: ['__subject__ (410777) 2009 FD __predicate__ maximumTemperature __object__ 362.0 (kelvins)']
Text: ['The maximum temperature of 410777 2009 FD is 362.0 kelvins.']
Predicate: maximumTemperature

Triple: ['__subject__ (410777) 2009 FD __predicate__ meanTemperature __object__ 258.0 (kelvins)']
Text: ['(410777) 2009 FD has a mean temperature of 258.0 kelvins.']
Predicate: meanTemperature

Triple: ['__subject__ (410777) 2009 FD __predicate__ minimumTemperature __object__ 211.0 (kelvins)']
Text: ['(410777) 2009 FD has a minimum temperature of 211.0 kelvins.']
Predicate: minimumTemperature

Triple: ['__subject__ (410777) 2009 FD __predicate__ orbitalPeriod __object__ 39447000.0']
Text: ['410777 2009 FD has an orbital period of 39447000.0.']
Predicate: orbitalPeriod

Triple: ['__subject__ (410777) 2009 FD __predicate__ periapsis __object__ 88234300000.0']
Text: ['(410777) 2009 FD has a periapsis of 88234300000.0.']
Predicate: periapsis

Triple: ['__subject__ (66063) 1998 RO1 __predicate__ discoverer __object__ Lincoln_Near-Earth_Asteroid_Research']
Text: ['(66063) 1998 RO1 was discovered by Lincoln Near-Earth Asteroid Research.']
Predicate: discoverer

Triple: ['__subject__ (66063) 1998 RO1 __predicate__ escapeVelocity __object__ 0.0999 (kilometrePerSeconds)']
Text: ['(66063) 1998 RO1 has an escape velocity of 0.0999 kilometres per second.']
Predicate: escapeVelocity

Triple: ['__subject__ (66063) 1998 RO1 __predicate__ formerName __object__ 1999 SN5']
Text: ['The former name of the asteroid (66063) 1998 RO1 was 1999 SN5.']
Predicate: formerName

Triple: ['__subject__ (66063) 1998 RO1 __predicate__ maximumTemperature __object__ 500.0 (kelvins)']
Text: ['The celestial body known as (66063) 1998 RO1 has a maximum temperature of 500 kelvins.']
Predicate: maximumTemperature

Triple: ['__subject__ (66063) 1998 RO1 __predicate__ meanTemperature __object__ 265.0 (kelvins)']
Text: ['(66063) 1998 RO1 has a mean temperature of 265 kelvins.']
Predicate: meanTemperature

Triple: ['__subject__ (66063) 1998 RO1 __predicate__ minimumTemperature __object__ -71.0 (degreeCelsius)']
Text: ['(66063) 1998 RO1 has a minimum temperature of -71.0 degrees Celsius.']
Predicate: minimumTemperature

Triple: ['__subject__ (66063) 1998 RO1 __predicate__ orbitalPeriod __object__ 360.29 (days)']
Text: ['66063 1998 RO1 has an orbital period of 360.29 days.']
Predicate: orbitalPeriod

Triple: ['__subject__ (66063) 1998 RO1 __predicate__ periapsis __object__ 41498400000.0']
Text: ['(66063) 1998 RO1 has a periapsis measuring 41498400000.0.']
Predicate: periapsis

Triple: ['__subject__ (66391) 1999 KW4 __predicate__ apoapsis __object__ 162164091.8388 (kilometres)']
Text: ['(66391) 1999 KW4 has an apoapsis measurement of 162164091.8388 (kilometres).']
Predicate: apoapsis

Triple: ['__subject__ (66391) 1999 KW4 __predicate__ averageSpeed __object__ 37.16 (kilometrePerSeconds)']
Text: ['The average speed of 66391 1999 KW4 is 37.16 km per sec.']
Predicate: averageSpeed

Triple: ['__subject__ (66391) 1999 KW4 __predicate__ density __object__ 2.0 (gramPerCubicCentimetres)']
Text: ['(66391) 1999 KW4 has a density of 2.0 gm per cu cm.']
Predicate: density

Triple: ['__subject__ (66391) 1999 KW4 __predicate__ discoverer __object__ Lincoln_Near-Earth_Asteroid_Research']
Text: ['(66391) 1999 KW4 was discovered by Lincoln Near-Earth Asteroid Research.']
Predicate: discoverer

Triple: ['__subject__ (66391) 1999 KW4 __predicate__ epoch __object__ 2004-07-14']
Text: ['(66391) 1999 KW4 has an epoch date of July 14th 2004.']
Predicate: epoch

Triple: ['__subject__ (66391) 1999 KW4 __predicate__ escapeVelocity __object__ 0']
Text: ['(66391) 1999 KW4 has an escape velocity of 0.']
Predicate: escapeVelocity

Triple: ['__subject__ (66391) 1999 KW4 __predicate__ orbitalPeriod __object__ 16244700.0']
Text: ['(66391) 1999 KW4 has an orbital period of 16244700.0.']
Predicate: orbitalPeriod

Triple: ['__subject__ (66391) 1999 KW4 __predicate__ rotationPeriod __object__ 9953.28']
Text: ['The rotation period of (66391) 1999 KW4 is 9953.28.']
Predicate: rotationPeriod

Triple: ['__subject__ 1000 Piazzia __predicate__ epoch __object__ 2015-06-27']
Text: ['The epoch of 1000 Piazzia is 2015-06-27.']
Predicate: epoch

Triple: ['__subject__ 1000 Piazzia __predicate__ formerName __object__ 1923 NZ1951 OB']
Text: ['The former name of 1000 Piazzia is "1923 NZ1951 OB".']
Predicate: formerName

Triple: ['__subject__ 1000 Piazzia __predicate__ formerName __object__ 1967 ED']
Text: ['The celestial body known as 1000 Piazzia was formerly known as 1967 ED.']
Predicate: formerName

Triple: ['__subject__ 1000 Piazzia __predicate__ mass __object__ 1.1 (kilograms)']
Text: ['1000 Piazzia has the mass of 1.1 kilograms.']
Predicate: mass

Triple: ['__subject__ 1000 Piazzia __predicate__ orbitalPeriod __object__ 488160.0']
Text: ['1000 Piazzia has an orbital period of 488160.0.']
Predicate: orbitalPeriod

Triple: ['__subject__ 1000 Piazzia __predicate__ periapsis __object__ 352497000000.0']
Text: ['The periapsis of 1000 Piazzia is 352497000000.0.']
Predicate: periapsis

Triple: ['__subject__ 1001 Gaussia __predicate__ absoluteMagnitude __object__ 9.7']
Text: ['1001 Gaussia has an absolute magnitude of 9.7.']
Predicate: absoluteMagnitude

Triple: ['__subject__ 1001 Gaussia __predicate__ discoverer __object__ Sergey_Belyavsky']
Text: ['Sergey Belyavsky discovered 1001 Gaussia.']
Predicate: discoverer

Triple: ['__subject__ 1001 Gaussia __predicate__ epoch __object__ 2015-06-27']
Text: ["1001 Gaussia's epoch date is 2015-06-27."]
Predicate: epoch

Triple: ['__subject__ 1001 Gaussia __predicate__ formerName __object__ A911 MD']
Text: ['A911 MD is the former name of 1001 Gaussia.']
Predicate: formerName

Triple: ['__subject__ 1001 Gaussia __predicate__ meanTemperature __object__ 154.0 (kelvins)']
Text: ['The celestial body known as 1001 Gaussia has a mean temperature of 154 kelvins.']
Predicate: meanTemperature

Triple: ['__subject__ 1001 Gaussia __predicate__ orbitalPeriod __object__ 5.75 (days)']
Text: ['1001 Gaussia has an orbital period of 5.75 days.']
Predicate: orbitalPeriod

Triple: ['__subject__ 1001 Gaussia __predicate__ periapsis __object__ 419113394.55312 (kilometres)']
Text: ['The periapsis of 1001 Gaussia is 419113394.55312 (kilometres).']
Predicate: periapsis

Triple: ['__subject__ 1001 Gaussia __predicate__ rotationPeriod __object__ 33012.0']
Text: ['1001 Gaussia has a rotation period of 33012.0.']
Predicate: rotationPeriod

Triple: ['__subject__ 101 Helena __predicate__ absoluteMagnitude __object__ 8.33']
Text: ['101 Helena has an absolute magnitude of 8.33.']
Predicate: absoluteMagnitude

Triple: ['__subject__ 101 Helena __predicate__ averageSpeed __object__ 18.44 (kilometrePerSeconds)']
Text: ['101 Helena has an average speed of 18.44 km per secs.']
Predicate: averageSpeed

Triple: ['__subject__ 101 Helena __predicate__ density __object__ 2.0 (gramPerCubicCentimetres)']
Text: ['101 Helena has a density of 2.0 grams per cubic centimetres.']
Predicate: density

Triple: ['__subject__ 101 Helena __predicate__ discovered __object__ 1868-08-15']
Text: ['101 Helena was discovered on August 15th 1868.']
Predicate: discovered

Triple: ['__subject__ 101 Helena __predicate__ discoverer __object__ James_Craig_Watson']
Text: ['101 Helena was discovered by James Craig Watson.']
Predicate: discoverer

Triple: ['__subject__ 101 Helena __predicate__ escapeVelocity __object__ 0.0348 (kilometrePerSeconds)']
Text: ['101 Helena has an escape velocity of 0.0348 km/s.']
Predicate: escapeVelocity

Triple: ['__subject__ 101 Helena __predicate__ periapsis __object__ 331683000.0 (kilometres)']
Text: ['101 Helena has a periapsis of 331683000.0 kilometres.']
Predicate: periapsis

Triple: ['__subject__ 101 Helena __predicate__ temperature __object__ 173.0 (kelvins)']
Text: ['The temperature of 101 Helena is 173 kelvins.']
Predicate: temperature

Triple: ['__subject__ 1036 Ganymed __predicate__ apoapsis __object__ 611961000.0 (kilometres)']
Text: ['1036 Ganymed has an apoapsis of 611961000.0 kilometres.']
Predicate: apoapsis

Triple: ['__subject__ 1036 Ganymed __predicate__ discoverer __object__ Walter_Baade']
Text: ['1036 Ganymed was discovered by Walter Baade.']
Predicate: discoverer

Triple: ['__subject__ 1036 Ganymed __predicate__ epoch __object__ 2004-10-22']
Text: ['1036 Ganymed has an epoch date of October 22nd 2004.']
Predicate: epoch

Triple: ['__subject__ 1036 Ganymed __predicate__ orbitalPeriod __object__ 374976.0 (seconds)']
Text: ['1036 Ganymed has an orbital period of 374976.0 seconds.']
Predicate: orbitalPeriod

Triple: ['__subject__ 1036 Ganymed __predicate__ periapsis __object__ 184434000000.0']
Text: ['1036 Ganymed has a periapsis of 184434000000.0.']
Predicate: periapsis

Triple: ['__subject__ 1036 Ganymed __predicate__ rotationPeriod __object__ 37116.0']
Text: ['1036 Ganymed has a rotation period of 37116.0.']
Predicate: rotationPeriod

Triple: ['__subject__ 103 Hera __predicate__ apoapsis __object__ 437170000.0 (kilometres)']
Text: ['103 Hera has an apoapsis of 437170000.0 (kilometres).']
Predicate: apoapsis

Triple: ['__subject__ 103 Hera __predicate__ averageSpeed __object__ 18.09 (kilometrePerSeconds)']
Text: ['103 Hera has an average speed of 18.09 kilometres per second.']
Predicate: averageSpeed

Triple: ['__subject__ 103 Hera __predicate__ discovered __object__ 1868-09-07']
Text: ['103 Hera was discovered on 7 September 1868.']
Predicate: discovered

Triple: ['__subject__ 103 Hera __predicate__ discoverer __object__ James_Craig_Watson']
Text: ['103 Hera was discovered by James Craig Watson.']
Predicate: discoverer

Triple: ['__subject__ 103 Hera __predicate__ epoch __object__ 2011-08-27']
Text: ['103 Hera has the epoch of 27 August 2011.']
Predicate: epoch

Triple: ['__subject__ 103 Hera __predicate__ escapeVelocity __object__ 0.0482 (kilometrePerSeconds)']
Text: ['103 Hera has the escape velocity of 0.0482 km per sec.']
Predicate: escapeVelocity

Triple: ['__subject__ 103 Hera __predicate__ orbitalPeriod __object__ 1622.213 (days)']
Text: ['103 Hera has an orbital period of 1622.213 days.']
Predicate: orbitalPeriod

Triple: ['__subject__ 103 Hera __predicate__ periapsis __object__ 371240000.0 (kilometres)']
Text: ['103 Hera has a periapsis measurement of 371240000.0 (kilometres).']
Predicate: periapsis

Triple: ['__subject__ 103 Hera __predicate__ rotationPeriod __object__ 85466.9']
Text: ['103 Hera has a rotation period of 85466.9.']
Predicate: rotationPeriod

Triple: ['__subject__ 103 Hera __predicate__ temperature __object__ 170.0 (kelvins)']
Text: ['The celestial body known as 103 Hera has a temperature of 170 kelvins.']
Predicate: temperature

Triple: ['__subject__ 107 Camilla __predicate__ apoapsis __object__ 560937000.0 (kilometres)']
Text: ['107 Camilla has an apoapsis of 560937000.0 kilometres.']
Predicate: apoapsis

Triple: ['__subject__ 107 Camilla __predicate__ discovered __object__ 1868-11-17']
Text: ['107 Camilla was discovered on 17 November 1868.']
Predicate: discovered

Triple: ['__subject__ 107 Camilla __predicate__ discovered __object__ 2001-03-01']
Text: ['107 Camilla was discovered on 1 March 2001.']
Predicate: discovered

Triple: ['__subject__ 107 Camilla __predicate__ discoverer __object__ B._Zellner']
Text: ['B Zellner discovered 107 Camilla.']
Predicate: discoverer

Triple: ['__subject__ 107 Camilla __predicate__ discoverer __object__ C._Woods']
Text: ['C Woods discovered 107 Camilla.']
Predicate: discoverer

Triple: ['__subject__ 107 Camilla __predicate__ discoverer __object__ E._Wells']
Text: ['The discoverer of 107 Camilla was E. Wells.']
Predicate: discoverer

Triple: ['__subject__ 107 Camilla __predicate__ discoverer __object__ M._Gaffey']
Text: ['107 Camilla was discovered by M Gaffey.']
Predicate: discoverer

Triple: ['__subject__ 107 Camilla __predicate__ epoch __object__ 2006-12-31']
Text: ['107 Camilla has an epoch date of December 31st 2006.']
Predicate: epoch

Triple: ['__subject__ 107 Camilla __predicate__ orbitalPeriod __object__ 2368.05 (days)']
Text: ['2368.05 days is the orbital period of 107 Camilla.']
Predicate: orbitalPeriod

Triple: ['__subject__ 107 Camilla __predicate__ periapsis __object__ 479343000.0 (kilometres)']
Text: ['The periapsis of 107 Camilla is 479343000.0 (kilometres).']
Predicate: periapsis

Triple: ['__subject__ 1089 Tama __predicate__ apoapsis __object__ 373513000.0 (kilometres)']
Text: ['1089 Tama has an apoapsis of 373513000.0 kilometres.']
Predicate: apoapsis

Triple: ['__subject__ 1089 Tama __predicate__ averageSpeed __object__ 19.94 (kilometrePerSeconds)']
Text: ['1089 Tama has an average speed of 19.94 kilometres per second.']
Predicate: averageSpeed

Triple: ['__subject__ 1089 Tama __predicate__ epoch __object__ 2005-11-26']
Text: ['The epoch date of 1089 Tama is 26 November 2005.']
Predicate: epoch

Triple: ['__subject__ 1089 Tama __predicate__ formerName __object__ 1930 ST; 1952 HE4']
Text: ['The former name of 1089 Tama is "1930 ST; 1952 HE4".']
Predicate: formerName

Triple: ['__subject__ 1089 Tama __predicate__ formerName __object__ A919 HA; 1927 WB;']
Text: ['1089 Tama was formerly known as A919 HA; 1927 WB.']
Predicate: formerName

Triple: ['__subject__ 1089 Tama __predicate__ periapsis __object__ 288749000000.0']
Text: ['1089 Tama has a periapsis of 288749000000.0.']
Predicate: periapsis

Triple: ['__subject__ 1089 Tama __predicate__ rotationPeriod __object__ 17.28']
Text: ['The rotation period for 1089 Tama is 17.28.']
Predicate: rotationPeriod

Triple: ['__subject__ 1089 Tama __predicate__ temperature __object__ 179.0 (kelvins)']
Text: ['1089 Tama has a temperature of 179.0 kelvins.']
Predicate: temperature

Triple: ['__subject__ 1097 Vicia __predicate__ apoapsis __object__ 511592000.0 (kilometres)']
Text: ['1097 Vicia has an apoapsis of 511592000.0 kilometres.']
Predicate: apoapsis

Triple: ['__subject__ 1097 Vicia __predicate__ escapeVelocity __object__ 0.0112 (kilometrePerSeconds)']
Text: ['1097 Vicia has an escape velocity of 0.0112 kilometres per second.']
Predicate: escapeVelocity

Triple: ['__subject__ 1097 Vicia __predicate__ formerName __object__ 1928 PC']
Text: ['1097 Vicia was formerly known as "1928 PC".']
Predicate: formerName

Triple: ['__subject__ 1097 Vicia __predicate__ mass __object__ 9.8 (kilograms)']
Text: ['1097 Vicia has a mass of 9.8 kgs.']
Predicate: mass

Triple: ['__subject__ 1097 Vicia __predicate__ orbitalPeriod __object__ 135589000.0']
Text: ['1097 Vicia has an orbital period of 135589000.0.']
Predicate: orbitalPeriod

Triple: ['__subject__ 1097 Vicia __predicate__ periapsis __object__ 279142000000.0']
Text: ['1097 Vicia has a periapsis of 279142000000.0.']
Predicate: periapsis

Triple: ['__subject__ 1097 Vicia __predicate__ temperature __object__ 171.0 (kelvins)']
Text: ['1097 Vicia has a temperature of 171.0 kelvins.']
Predicate: temperature

Triple: ['__subject__ 1099 Figneria __predicate__ apoapsis __object__ 605718000.0 (kilometres)']
Text: ['1099 Figneria has an apoapsis of 605718000.0 kilometres.']
Predicate: apoapsis

Triple: ['__subject__ 1099 Figneria __predicate__ averageSpeed __object__ 16.37 (kilometrePerSeconds)']
Text: ['The average speed of 1099 Figneria is 16.37 km per sec.']
Predicate: averageSpeed

Triple: ['__subject__ 1099 Figneria __predicate__ epoch __object__ 2006-12-31']
Text: ['The epoch date for 1099 Figneria is 31 December 2006.']
Predicate: epoch

Triple: ['__subject__ 1099 Figneria __predicate__ formerName __object__ 1928 RQ']
Text: ['The former name of 1099 Figneria is 1928 RQ.']
Predicate: formerName

Triple: ['__subject__ 1099 Figneria __predicate__ orbitalPeriod __object__ 179942000.0']
Text: ['1099 Figneria has an orbital period of 179942000.0.']
Predicate: orbitalPeriod

Triple: ['__subject__ 1099 Figneria __predicate__ periapsis __object__ 349206000000.0']
Text: ['1099 Figneria has a periapsis measurement of 349206000000.0.']
Predicate: periapsis

Triple: ['__subject__ 1099 Figneria __predicate__ temperature __object__ 156.0 (kelvins)']
Text: ['1099 Figneria has a temperature of 156.0 kelvins.']
Predicate: temperature

Triple: ['__subject__ 109 Felicitas __predicate__ apoapsis __object__ 523329000.0 (kilometres)']
Text: ['109 Felicitas has an apoapsis of 523329000.0 kilometres.']
Predicate: apoapsis

Triple: ['__subject__ 109 Felicitas __predicate__ averageSpeed __object__ 17.73 (kilometrePerSeconds)']
Text: ['109 Felicitas has an average speed of 17.73 kilometres per second.']
Predicate: averageSpeed

Triple: ['__subject__ 109 Felicitas __predicate__ epoch __object__ 2006-12-31']
Text: ['The epoch date of 109 Felicitas is 31 December 2006.']
Predicate: epoch

Triple: ['__subject__ 109 Felicitas __predicate__ escapeVelocity __object__ 0.0473 (kilometrePerSeconds)']
Text: ['109 Felicitas has an escape velocity of 0.0473 kilometres per second.']
Predicate: escapeVelocity

Triple: ['__subject__ 109 Felicitas __predicate__ mass __object__ 7.5 (kilograms)']
Text: ['109 Felicitas has a mass of 7.5 kilograms.']
Predicate: mass

Triple: ['__subject__ 109 Felicitas __predicate__ orbitalPeriod __object__ 139705000.0']
Text: ['The orbital period of 109 Felicitas is 139705000.0.']
Predicate: orbitalPeriod

Triple: ['__subject__ 109 Felicitas __predicate__ rotationPeriod __object__ 47487.6']
Text: ['The celestial body known as 109 Felicitas has a rotation period of 47487.6.']
Predicate: rotationPeriod

Triple: ['__subject__ 10 Hygiea __predicate__ apoapsis __object__ 523951582.33968 (kilometres)']
Text: ['10 Hygiea has an apoapsis of 523951582.33968 kilometres.']
Predicate: apoapsis

Triple: ['__subject__ 10 Hygiea __predicate__ discoverer __object__ Annibale_de_Gasparis']
Text: ['Annibale de Gasparis discovered 10 Hygiea.']
Predicate: discoverer

Triple: ['__subject__ 10 Hygiea __predicate__ epoch __object__ 2015-06-27']
Text: ['10 Hygiea has an epoch date of June 27th 2015.']
Predicate: epoch

Triple: ['__subject__ 10 Hygiea __predicate__ escapeVelocity __object__ 0.21 (kilometrePerSeconds)']
Text: ['10 Hygiea has an escape velocity of 0.21 kilometres per second.']
Predicate: escapeVelocity

Triple: ['__subject__ 10 Hygiea __predicate__ formerName __object__ A900 GA']
Text: ['The former name of 10 Hygiea was A900 GA.']
Predicate: formerName

Triple: ['__subject__ 10 Hygiea __predicate__ periapsis __object__ 416136000000.0']
Text: ['The periapsis measurement of 10 Hygiea is 416136000000.0.']
Predicate: periapsis

Triple: ['__subject__ 10 Hygiea __predicate__ rotationPeriod __object__ 198803.0']
Text: ['10 Hygiea has a rotation period of 198803.0.']
Predicate: rotationPeriod

Triple: ['__subject__ 10 Hygiea __predicate__ surfaceArea __object__ 837080.744 (squareKilometres)']
Text: ['10 Hygiea has a surface area of 837080.744 square kilometres.']
Predicate: surfaceArea

Triple: ['__subject__ 10 Hygiea __predicate__ temperature __object__ 164.0 (kelvins)']
Text: ['10 Hygiea has a temperature of 164.0 kelvins.']
Predicate: temperature

Triple: ['__subject__ 1101 Clematis __predicate__ apoapsis __object__ 520906000.0 (kilometres)']
Text: ['1101 Clematis has an apoapsis of 520906000.0 kilometres.']
Predicate: apoapsis

Triple: ['__subject__ 1101 Clematis __predicate__ averageSpeed __object__ 16.54 (kilometrePerSeconds)']
Text: ['1101 Clematis has the average speed of 16.54 km/s.']
Predicate: averageSpeed

Triple: ['__subject__ 1101 Clematis __predicate__ epoch __object__ 2006-12-31']
Text: ['1101 Clematis has an epoch date of December 31st 2006.']
Predicate: epoch

Triple: ['__subject__ 1101 Clematis __predicate__ escapeVelocity __object__ 0.02 (kilometrePerSeconds)']
Text: ['The escape velocity of 1101 Clematis is 0.02 km/sec.']
Predicate: escapeVelocity

Triple: ['__subject__ 1101 Clematis __predicate__ formerName __object__ 1928 SJ']
Text: ['1928 SJ was the former name of 1101 Clematis.']
Predicate: formerName

Triple: ['__subject__ 1101 Clematis __predicate__ mass __object__ 5.7 (kilograms)']
Text: ['1101 Clematis has a mass of 5.7 kgs.']
Predicate: mass

Triple: ['__subject__ 1101 Clematis __predicate__ orbitalPeriod __object__ 183309000.0']
Text: ['1101 Clematis has an orbital period of 183309000.0.']
Predicate: orbitalPeriod

Triple: ['__subject__ 1101 Clematis __predicate__ temperature __object__ 155.0 (kelvins)']
Text: ['1101 Clematis has a temperature of 155 kelvins.']
Predicate: temperature

Triple: ['__subject__ 110 Lydia __predicate__ apoapsis __object__ 440756000.0 (kilometres)']
Text: ['110 Lydia has an apoapsis of 440756000.0 kilometres.']
Predicate: apoapsis

Triple: ['__subject__ 110 Lydia __predicate__ averageSpeed __object__ 17.99 (kilometrePerSeconds)']
Text: ['110 Lydia travels at an average speed of 17.99 kilometres per second.']
Predicate: averageSpeed

Triple: ['__subject__ 110 Lydia __predicate__ discoverer __object__ Alphonse_Borrelly']
Text: ['The celestial body known as 110 Lydia was discovered by Alphonse Borrelly.']
Predicate: discoverer

Triple: ['__subject__ 110 Lydia __predicate__ escapeVelocity __object__ 0.0455 (kilometrePerSeconds)']
Text: ['110 Lydia has an escape velocity of 0.0455 kilometres per second.']
Predicate: escapeVelocity

Triple: ['__subject__ 110 Lydia __predicate__ mass __object__ 6.7 (kilograms)']
Text: ['110 Lydia has a mass of 6.7 kilograms.']
Predicate: mass

Triple: ['__subject__ 110 Lydia __predicate__ orbitalPeriod __object__ 142603000.0']
Text: ['The orbital period for 110 Lydia is 142603000.0.']
Predicate: orbitalPeriod

Triple: ['__subject__ 110 Lydia __predicate__ rotationPeriod __object__ 39332.9']
Text: ['110 Lydia has a rotation period of 39332.9.']
Predicate: rotationPeriod

Triple: ['__subject__ 110 Lydia __predicate__ temperature __object__ 168.0 (kelvins)']
Text: ['110 Lydia has a temperature of 168 kelvins.']
Predicate: temperature

Triple: ['__subject__ 11264 Claudiomaccone __predicate__ apoapsis __object__ 475426000.0 (kilometres)']
Text: ['The apoapsis for 11264 Claudiomaccone is 475426000.0 (kilometres).']
Predicate: apoapsis

Triple: ['__subject__ 11264 Claudiomaccone __predicate__ averageSpeed __object__ 18.29 (kilometrePerSeconds)']
Text: ['11264 Claudiomaccone has an average speed of 18.29 kilometres per second.']
Predicate: averageSpeed

Triple: ['__subject__ 11264 Claudiomaccone __predicate__ discoverer __object__ Nikolai_Chernykh']
Text: ['11264 Claudiomaccone was discovered by Nikolai Chernykh.']
Predicate: discoverer

Triple: ['__subject__ 11264 Claudiomaccone __predicate__ epoch __object__ 2005-11-26']
Text: ['11264 Claudiomaccone has the epoch date of 26 November 2005.']
Predicate: epoch

Triple: ['__subject__ 11264 Claudiomaccone __predicate__ orbitalPeriod __object__ 1513.722 (days)']
Text: ['11264 Claudiomaccone has an orbital period of 1513.722 days.']
Predicate: orbitalPeriod

Triple: ['__subject__ 11264 Claudiomaccone __predicate__ periapsis __object__ 296521000.0 (kilometres)']
Text: ['11264 Claudiomaccone has a periapsis of 296521000.0 (kilometres).']
Predicate: periapsis

Triple: ['__subject__ 11264 Claudiomaccone __predicate__ rotationPeriod __object__ 11473.9']
Text: ['The rotation period for 11264 Claudiomaccone is 11473.9.']
Predicate: rotationPeriod

Triple: ['__subject__ James Craig Watson __predicate__ deathCause __object__ Peritonitis']
Text: ['James Craig Watson died of peritonitis.']
Predicate: deathCause

Triple: ['__subject__ James Craig Watson __predicate__ deathPlace __object__ Madison,_Wisconsin']
Text: ['James Craig Watson died in Madison, Wisconsin.']
Predicate: deathPlace

Triple: ['__subject__ James Craig Watson __predicate__ nationality __object__ Canada']
Text: ['James Craig Watson is a Canadian national.']
Predicate: nationality

Triple: ['__subject__ James Craig Watson __predicate__ stateOfOrigin __object__ Canada']
Text: ['James Craig Watson has his origins in Canada.']
Predicate: stateOfOrigin

Triple: ['__subject__ N. R. Pogson __predicate__ deathPlace __object__ Chennai']
Text: ['N R Pogson died in Chennai.']
Predicate: deathPlace

Triple: ['__subject__ Walter Baade __predicate__ almaMater __object__ University_of_Göttingen']
Text: ["Walter Baade's alma mater was the University of Gottingen."]
Predicate: almaMater

Triple: ['__subject__ Walter Baade __predicate__ birthPlace __object__ German_Empire']
Text: ['Walter Baade was born in the German Empire.']
Predicate: birthPlace

Triple: ['__subject__ Walter Baade __predicate__ birthPlace __object__ Preußisch_Oldendorf']
Text: ['Preußisch Oldendorf was the birthplace of Walter Baade.']
Predicate: birthPlace

Triple: ['__subject__ Walter Baade __predicate__ deathPlace __object__ Göttingen']
Text: ['Walter Baade died in Gottingen.']
Predicate: deathPlace

Triple: ['__subject__ Walter Baade __predicate__ deathPlace __object__ West_Germany']
Text: ['Walter Baade died in West Germany.']
Predicate: deathPlace

Triple: ['__subject__ Walter Baade __predicate__ doctoralStudent __object__ Allan_Sandage']
Text: ['Allan Sandage was a doctoral student of Walter Baade.']
Predicate: doctoralStudent

Triple: ['__subject__ Walter Baade __predicate__ doctoralStudent __object__ Halton_Arp']
Text: ['Halton Arp was a doctoral student of Walter Baade.']
Predicate: doctoralStudent

Triple: ['__subject__ Walter Baade __predicate__ nationality __object__ Germany']
Text: ['Walter Baade is a German national.']
Predicate: nationality

Triple: ['__subject__ Abilene, Texas __predicate__ areaOfWater __object__ 14.2 (square kilometres)']
Text: ['There are 14.2 square kilometers of water in Abilene, Texas.']
Predicate: areaOfWater

Triple: ['__subject__ Abilene, Texas __predicate__ areaTotal __object__ 286.5 (square kilometres)']
Text: ['Abilene (Texas) has a total area of 286.5 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Abilene, Texas __predicate__ country __object__ United_States']
Text: ['Abilene is in Texas, in the United States.']
Predicate: country

Triple: ['__subject__ Abilene, Texas __predicate__ elevationAboveTheSeaLevel __object__ 524.0']
Text: ['Abilene Texas is 524m above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Abilene, Texas __predicate__ isPartOf __object__ Jones_County,_Texas']
Text: ['Abilene is part of Jones County in Texas.']
Predicate: isPartOf

Triple: ['__subject__ Abilene, Texas __predicate__ isPartOf __object__ Taylor_County,_Texas']
Text: ['Abilene is part of Taylor County in Texas.']
Predicate: isPartOf

Triple: ['__subject__ Abilene, Texas __predicate__ populationDensity __object__ 429.9 (inhabitants per square kilometre)']
Text: ['The total population density of Abilene, Texas is 429.9 inhabitants per sq km.']
Predicate: populationDensity

Triple: ['__subject__ Adams Township, Madison County, Indiana __predicate__ country __object__ United_States']
Text: ['Adams Township is in Madison County, in Indiana, in the United States.']
Predicate: country

Triple: ['__subject__ Akron, Ohio __predicate__ areaCode __object__ 234, 330']
Text: ['The area codes in Akron, Ohio are 234 and 330.']
Predicate: areaCode

Triple: ['__subject__ Akron, Ohio __predicate__ areaOfWater __object__ 0.88 (square kilometres)']
Text: ['Akron in Ohio has .88 square kilometres of water.']
Predicate: areaOfWater

Triple: ['__subject__ Akron, Ohio __predicate__ areaTotal __object__ 161.54 (square kilometres)']
Text: ['Akron, Ohio has a total area of 161.54 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Akron, Ohio __predicate__ country __object__ United_States']
Text: ['Akron, Ohio is located in the U.S.']
Predicate: country

Triple: ['__subject__ Akron, Ohio __predicate__ elevationAboveTheSeaLevel __object__ 306.0']
Text: ['Akron, Ohio is at a height of 306.0 above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Akron, Ohio __predicate__ isPartOf __object__ Summit_County,_Ohio']
Text: ['Akron is in Summit County, Ohio.']
Predicate: isPartOf

Triple: ['__subject__ Akron, Ohio __predicate__ isPartOf __object__ United_States']
Text: ['Akron Ohio is part of the U.S.']
Predicate: isPartOf

Triple: ['__subject__ Akron, Ohio __predicate__ leaderTitle __object__ Mayor']
Text: ['Mayor is the title of the leader of Akron, Ohio.']
Predicate: leaderTitle

Triple: ['__subject__ Akron, Ohio __predicate__ populationDensity __object__ 1239.3 (inhabitants per square kilometre)']
Text: ['The population density, of Akron (Ohio), is 1239.3 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Alabama __predicate__ country __object__ United_States']
Text: ['Alabama is in the United States.']
Predicate: country

Triple: ['__subject__ Albany, Georgia __predicate__ areaTotal __object__ 144.7 (square kilometres)']
Text: ['The total area, of Albany (Georgia), is 144.7 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Albany, Georgia __predicate__ country __object__ United_States']
Text: ['Albany, Georgia is in the United States.']
Predicate: country

Triple: ['__subject__ Albany, Georgia __predicate__ elevationAboveTheSeaLevel __object__ 62.0']
Text: ['Albany, Georgia is located at 62.0 above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Albany, Georgia __predicate__ isPartOf __object__ Dougherty_County,_Georgia']
Text: ['Albany is a city in Dougherty County, Georgia.']
Predicate: isPartOf

Triple: ['__subject__ Albany, Georgia __predicate__ isPartOf __object__ Georgia_(U.S._state)']
Text: ['Albany is part of the U.S. State of Georgia.']
Predicate: isPartOf

Triple: ['__subject__ Albany, Georgia __predicate__ isPartOf __object__ United_States']
Text: ['Albany, Georgia is in the United States.']
Predicate: isPartOf

Triple: ['__subject__ Albany, Georgia __predicate__ populationDensity __object__ 535.0 (inhabitants per square kilometre)']
Text: ['Albany in Georgia, has a population density of 535.0 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Albany, Oregon __predicate__ areaCode __object__ 541, 458']
Text: ['Albany, Oregon has area codes 541 and 458.']
Predicate: areaCode

Triple: ['__subject__ Albany, Oregon __predicate__ areaOfWater __object__ 0.54 (square kilometres)']
Text: ['There is .54 square kilometers of water in Albany, Oregon.']
Predicate: areaOfWater

Triple: ['__subject__ Albany, Oregon __predicate__ elevationAboveTheSeaLevel __object__ 64.008']
Text: ['Albany, Oregon is 64,008 above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Albany, Oregon __predicate__ isPartOf __object__ Benton_County,_Oregon']
Text: ['Albany is part of Benton County in Oregon.']
Predicate: isPartOf

Triple: ['__subject__ Albany, Oregon __predicate__ isPartOf __object__ Linn_County,_Oregon']
Text: ['Albany is a city in Linn County, Oregon.']
Predicate: isPartOf

Triple: ['__subject__ Albany, Oregon __predicate__ isPartOf __object__ Oregon']
Text: ['Albany is a city in Oregon.']
Predicate: isPartOf

Triple: ['__subject__ Albany, Oregon __predicate__ populationDensity __object__ 1104.1 (inhabitants per square kilometre)']
Text: ['The population density of Albany, in Oregon, is 1104.1 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Albuquerque, New Mexico __predicate__ areaCode __object__ 505, 575']
Text: ['Albuquerque, New Mexico has area codes 505 and 575.']
Predicate: areaCode

Triple: ['__subject__ Albuquerque, New Mexico __predicate__ areaOfLand __object__ 486.2 (square kilometres)']
Text: ['The land area, of Albuquerque (New Mexico), is 486.2 square kilometres.']
Predicate: areaOfLand

Triple: ['__subject__ Albuquerque, New Mexico __predicate__ areaTotal __object__ 490.9 (square kilometres)']
Text: ['Albuquerque, in New Mexico, has a total are of 490.9 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Albuquerque, New Mexico __predicate__ country __object__ United_States']
Text: ['Albuquerque is in New Mexico, in the United States.']
Predicate: country

Triple: ['__subject__ Albuquerque, New Mexico __predicate__ isPartOf __object__ Bernalillo_County,_New_Mexico']
Text: ['Albuquerque, New Mexico is part of Bernalillo County, New Mexico.']
Predicate: isPartOf

Triple: ['__subject__ Albuquerque, New Mexico __predicate__ isPartOf __object__ New_Mexico']
Text: ['Albuquerque is in New Mexico.']
Predicate: isPartOf

Triple: ['__subject__ Albuquerque, New Mexico __predicate__ leader __object__ Richard_J._Berry']
Text: ['The leader, of Albuquerque (New Mexico), is Richard J. Berry.']
Predicate: leader

Triple: ['__subject__ Albuquerque, New Mexico __predicate__ leaderTitle __object__ Mayor_of_Albuquerque']
Text: ['The leader of Albuquerque (New Mexico) is called the Mayor of Albuquerque.']
Predicate: leaderTitle

Triple: ['__subject__ Albuquerque, New Mexico __predicate__ leaderTitle __object__ United_States_House_of_Representatives']
Text: ['In Albuquerque (New Mexico), the leader is called, the United States House of Representatives.']
Predicate: leaderTitle

Triple: ['__subject__ Albuquerque, New Mexico __predicate__ populationDensity __object__ 1142.3 (inhabitants per square kilometre)']
Text: ['Albuquerque, in New Mexico, has a population density of 1142,3 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Albuquerque City Council __predicate__ leader __object__ Richard_J._Berry']
Text: ['Albuquerque City Council is led by Richard J. Berry.']
Predicate: leader

Triple: ['__subject__ Alexandria, Indiana __predicate__ areaCode __object__ 765']
Text: ['The area code for Alexandria, Indiana is 765.']
Predicate: areaCode

Triple: ['__subject__ Alexandria, Indiana __predicate__ areaTotal __object__ 6.81 (square kilometres)']
Text: ['Alexandria, in Indiana, has a total area of 6,81 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Alexandria, Indiana __predicate__ elevationAboveTheSeaLevel __object__ 265.0']
Text: ['Alexandria, Indiana is 265m above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Alexandria, Indiana __predicate__ isPartOf __object__ Indiana']
Text: ['Alexandria is part of Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Alexandria, Indiana __predicate__ isPartOf __object__ Madison_County,_Indiana']
Text: ['Alexandria is part of Madison County, Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Alexandria, Indiana __predicate__ isPartOf __object__ Monroe_Township,_Madison_County,_Indiana']
Text: ['Alexandria is part of the Monroe Township which is in Madison County, in Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Alexandria, Indiana __predicate__ populationDensity __object__ 755.3 (inhabitants per square kilometre)']
Text: ['Alexandria, Indiana has a population density of 755.3 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Alpharetta, Georgia __predicate__ areaCode __object__ 770, 404, 678']
Text: ['Alpharetta, Georgia has area codes 770, 404, and 678.']
Predicate: areaCode

Triple: ['__subject__ Alpharetta, Georgia __predicate__ areaOfWater __object__ 1.0 (square kilometres)']
Text: ['Alpharetta, Georgia has an area of water 1.0 sq km.']
Predicate: areaOfWater

Triple: ['__subject__ Alpharetta, Georgia __predicate__ areaTotal __object__ 55.4 (square kilometres)']
Text: ['The total area of Alpharetta, Georgia is 55.4 SqKm.']
Predicate: areaTotal

Triple: ['__subject__ Alpharetta, Georgia __predicate__ country __object__ United_States']
Text: ['Alpharetta, is in Georgia, in the United States.']
Predicate: country

Triple: ['__subject__ Alpharetta, Georgia __predicate__ elevationAboveTheSeaLevel __object__ 346.0']
Text: ['Alpharetta, Georgia is elevated 346.0 above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Alpharetta, Georgia __predicate__ isPartOf __object__ Fulton_County,_Georgia']
Text: ['Alpharetta, is part of Fulton County, in Georgia.']
Predicate: isPartOf

Triple: ['__subject__ Alpharetta, Georgia __predicate__ isPartOf __object__ Georgia_(U.S._state)']
Text: ['Alpharetta is part of the U.S. state, Georgia.']
Predicate: isPartOf

Triple: ['__subject__ Alpharetta, Georgia __predicate__ populationDensity __object__ 992.6 (inhabitants per square kilometre)']
Text: ['There are 992.6 people per square kilometres in Alpharetta, Georgia.']
Predicate: populationDensity

Triple: ['__subject__ Amarillo, Texas __predicate__ areaCode __object__ 806']
Text: ['The area code for Amarillo, Texas is 806.']
Predicate: areaCode

Triple: ['__subject__ Amarillo, Texas __predicate__ elevationAboveTheSeaLevel __object__ 1099.0']
Text: ['Amarillo Texas is elevated 1099.0 above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Amarillo, Texas __predicate__ isPartOf __object__ Texas']
Text: ['Amarillo is a city in Texas.']
Predicate: isPartOf

Triple: ['__subject__ Amarillo, Texas __predicate__ populationDensity __object__ 746.0 (inhabitants per square kilometre)']
Text: ['Amarillo, Texas has a population density of 746 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Anaheim, California __predicate__ utcOffset __object__ -7']
Text: ['Anaheim, California has a UTC offset of - 7.']
Predicate: utcOffset

Triple: ['__subject__ Anaheim, California __predicate__ utcOffset __object__ -8']
Text: ['Anaheim, in California, has a UTC offset of -8.']
Predicate: utcOffset

Triple: ['__subject__ Anaheim, California __predicate__ areaCode __object__ 657, 714']
Text: ['657 and 714 are area codes for Anaheim, CA.']
Predicate: areaCode

Triple: ['__subject__ Anaheim, California __predicate__ areaOfWater __object__ 25.2 (square kilometres)']
Text: ['The area of water, in Anaheim (California), is 25.2 square kilometres.']
Predicate: areaOfWater

Triple: ['__subject__ Anaheim, California __predicate__ areaTotal __object__ 131.6 (square kilometres)']
Text: ['Anaheim, California has a total area of 131.6 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Anaheim, California __predicate__ country __object__ United_States']
Text: ['Anaheim, California is in the U.S.']
Predicate: country

Triple: ['__subject__ Anaheim, California __predicate__ elevationAboveTheSeaLevel __object__ 48.0']
Text: ['Anaheim in California has an elevation of 48.0m above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Anaheim, California __predicate__ isPartOf __object__ California']
Text: ['Anaheim is part of California.']
Predicate: isPartOf

Triple: ['__subject__ Anaheim, California __predicate__ isPartOf __object__ Orange_County,_California']
Text: ['Anaheim is a city in Orange County which is part of California.']
Predicate: isPartOf

Triple: ['__subject__ Anaheim, California __predicate__ leader __object__ Tom_Tait']
Text: ['Tom Tait is a leader in Anaheim, California.']
Predicate: leader

Triple: ['__subject__ Anaheim, California __predicate__ leaderTitle __object__ California_State_Assembly']
Text: ['Anaheim, California is led by the California State Assembly.']
Predicate: leaderTitle

Triple: ['__subject__ Anaheim, California __predicate__ leaderTitle __object__ California_State_Senate']
Text: ['The California State Senate leads Anaheim, California.']
Predicate: leaderTitle

Triple: ['__subject__ Anaheim, California __predicate__ leaderTitle __object__ United_States_House_of_Representatives']
Text: ['The United States House of Representatives leads Anaheim, California.']
Predicate: leaderTitle

Triple: ['__subject__ Anaheim, California __predicate__ populationTotal __object__ 336265']
Text: ['Anaheim, CA has 336265 people inhabiting it.']
Predicate: populationTotal

Triple: ['__subject__ Anderson, Indiana __predicate__ areaCode __object__ 765']
Text: ['The area code of Anderson, in Indiana, is 765.']
Predicate: areaCode

Triple: ['__subject__ Anderson, Indiana __predicate__ areaTotal __object__ 107.43 (square kilometres)']
Text: ['Anderson, Indiana has an area of 107.43 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Anderson, Indiana __predicate__ elevationAboveTheSeaLevel __object__ 268.0']
Text: ['Anderson Indiana has an elevation of 268.0 above sea level.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Anderson, Indiana __predicate__ isPartOf __object__ Adams_Township,_Madison_County,_Indiana']
Text: ['Anderson is part of Adams Township, Madison County, Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Anderson, Indiana __predicate__ isPartOf __object__ Anderson_Township,_Madison_County,_Indiana']
Text: ['Anderson, Indiana is part of Anderson Township, Madison County, Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Anderson, Indiana __predicate__ isPartOf __object__ Fall_Creek_Township,_Madison_County,_Indiana']
Text: ['Anderson, Indiana is part of Fall Creek Township, Madison County, Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Anderson, Indiana __predicate__ isPartOf __object__ Indiana']
Text: ['Anderson is a city in Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Anderson, Indiana __predicate__ isPartOf __object__ Lafayette_Township,_Madison_County,_Indiana']
Text: ['Anderson, Indiana is part of Lafayette Township, Madison County, Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Anderson, Indiana __predicate__ isPartOf __object__ Madison_County,_Indiana']
Text: ['Anderson in Madison County is in Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Anderson, Indiana __predicate__ isPartOf __object__ Union_Township,_Madison_County,_Indiana']
Text: ['Anderson, Indiana is part of the Union Township, Madison County.']
Predicate: isPartOf

Triple: ['__subject__ Anderson, Indiana __predicate__ leader __object__ Democratic_Party_(United_States)']
Text: ['Anderson, Indiana is led by the Democratic Party of the US.']
Predicate: leader

Triple: ['__subject__ Anderson, Indiana __predicate__ populationDensity __object__ 523.9 (inhabitants per square kilometre)']
Text: ['Anderson, Indiana has 523.9 people per square kilometer.']
Predicate: populationDensity

Triple: ['__subject__ Anderson Township, Madison County, Indiana __predicate__ country __object__ United_States']
Text: ['Anderson, Township of Madison County, Indiana is in the Country of United States.']
Predicate: country

Triple: ['__subject__ Angola, Indiana __predicate__ areaTotal __object__ 16.55 (square kilometres)']
Text: ['Angola, in Indiana, has a total area of 16.55 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Angola, Indiana __predicate__ country __object__ United_States']
Text: ['Angola, Indiana is in the United States.']
Predicate: country

Triple: ['__subject__ Angola, Indiana __predicate__ isPartOf __object__ Indiana']
Text: ['Angola is a city in Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Angola, Indiana __predicate__ isPartOf __object__ Steuben_County,_Indiana']
Text: ['Angola, Indiana is part of Steuben County, Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Angola, Indiana __predicate__ isPartOf __object__ United_States']
Text: ['Angola is part of Indiana which is in the United States.']
Predicate: isPartOf

Triple: ['__subject__ Angola, Indiana __predicate__ populationDensity __object__ 524.5 (inhabitants per square kilometre)']
Text: ['The population density of Angola, Indiana, is 524.5 (inhabitants per square kilometre).']
Predicate: populationDensity

Triple: ['__subject__ Ann Arbor, Michigan __predicate__ areaCode __object__ 734']
Text: ['The area code for Ann Arbor Michigan is 734.']
Predicate: areaCode

Triple: ['__subject__ Ann Arbor, Michigan __predicate__ areaTotal __object__ 74.33 (square kilometres)']
Text: ['Ann Arbor, Michigan has a total area of 74.33 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Ann Arbor, Michigan __predicate__ isPartOf __object__ Michigan']
Text: ['Ann Arbor is in Michigan.']
Predicate: isPartOf

Triple: ['__subject__ Ann Arbor, Michigan __predicate__ isPartOf __object__ Washtenaw_County,_Michigan']
Text: ['Ann Arbor is part of Washtenaw County in Michigan.']
Predicate: isPartOf

Triple: ['__subject__ Ann Arbor, Michigan __predicate__ leader __object__ Christopher_Taylor_(politician)']
Text: ['Christopher Taylor, politician, leads Ann Arbor, Michigan.']
Predicate: leader

Triple: ['__subject__ Ann Arbor, Michigan __predicate__ leaderTitle __object__ City_Manager']
Text: ['The city manager is the leader of Ann Arbor, Michigan.']
Predicate: leaderTitle

Triple: ['__subject__ Antioch, California __predicate__ utcOffset __object__ -7']
Text: ['Antioch, California has a UTC offset of - 7.']
Predicate: utcOffset

Triple: ['__subject__ Antioch, California __predicate__ utcOffset __object__ -8']
Text: ['Antioch in California has a UTC offset of -8.']
Predicate: utcOffset

Triple: ['__subject__ Antioch, California __predicate__ areaTotal __object__ 75.324 (square kilometres)']
Text: ['The total area of Antioch, California is 75.324 square km.']
Predicate: areaTotal

Triple: ['__subject__ Antioch, California __predicate__ isPartOf __object__ California']
Text: ['Antioch is part of California.']
Predicate: isPartOf

Triple: ['__subject__ Antioch, California __predicate__ leaderTitle __object__ Mayor']
Text: ['The mayor is the leader of Antioch, California.']
Predicate: leaderTitle

Triple: ['__subject__ Antioch, California __predicate__ leaderTitle __object__ United_States_House_of_Representatives']
Text: ['The United States House of Representatives is the leader of Antioch, California.']
Predicate: leaderTitle

Triple: ['__subject__ Antioch, California __predicate__ populationTotal __object__ 102372']
Text: ['The population of Antioch California is 102372.']
Predicate: populationTotal

Triple: ['__subject__ Antioch, California __predicate__ postalCode __object__ 94509, 94531']
Text: ['Antioch, California has postal codes 94509 and 94531.']
Predicate: postalCode

Triple: ['__subject__ Arlington, Texas __predicate__ areaCode __object__ 682, 817, 214, 469, 972']
Text: ['Area codes for Arlington, Texas are: 682, 817, 214, 469 and 972.']
Predicate: areaCode

Triple: ['__subject__ Arlington, Texas __predicate__ areaOfWater __object__ 82.8 (square kilometres)']
Text: ['Arlington, Texas has a water area of 82.8 square kilometres.']
Predicate: areaOfWater

Triple: ['__subject__ Arlington, Texas __predicate__ areaTotal __object__ 258.2 (square kilometres)']
Text: ['The total area of Arlington (Texas) is 258.2 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Arlington, Texas __predicate__ isPartOf __object__ Tarrant_County,_Texas']
Text: ['Arlington is part of Tarrant County in Texas.']
Predicate: isPartOf

Triple: ['__subject__ Arlington, Texas __predicate__ isPartOf __object__ Texas']
Text: ['Arlington is part of Texas.']
Predicate: isPartOf

Triple: ['__subject__ Atlanta __predicate__ areaCode __object__ 404']
Text: ['Atlanta has the area code of 404.']
Predicate: areaCode

Triple: ['__subject__ Atlanta __predicate__ areaCode __object__ 404, 678, 470']
Text: ['The area codes in Atlanta are 404, 678, and 470.']
Predicate: areaCode

Triple: ['__subject__ Atlanta __predicate__ areaOfLand __object__ 344.9 (square kilometres)']
Text: ['Atlanta covers 344.9 square kilometres.']
Predicate: areaOfLand

Triple: ['__subject__ Atlanta __predicate__ areaTotal __object__ 347.1 (square kilometres)']
Text: ['The total area of Atlanta is 347.1 SqKm.']
Predicate: areaTotal

Triple: ['__subject__ Atlanta __predicate__ country __object__ United_States']
Text: ['Atlanta is in the United States.']
Predicate: country

Triple: ['__subject__ Atlanta __predicate__ isPartOf __object__ Georgia']
Text: ['Atlanta is part of Georgia.']
Predicate: isPartOf

Triple: ['__subject__ Atlanta __predicate__ isPartOf __object__ DeKalb_County,_Georgia']
Text: ['Most of Atlanta is part of DeKalb County in Georgia.']
Predicate: isPartOf

Triple: ['__subject__ Atlanta __predicate__ isPartOf __object__ Fulton_County,_Georgia']
Text: ['Atlanta is a part of Fulton County in Georgia.']
Predicate: isPartOf

Triple: ['__subject__ Atlanta __predicate__ isPartOf __object__ Georgia_(U.S._state)']
Text: ['Atlanta, is a part of the U.S. state, Georgia.']
Predicate: isPartOf

Triple: ['__subject__ Atlanta __predicate__ leader __object__ Atlanta_City_Council']
Text: ['The leader of Atlanta is the Atlanta City Council.']
Predicate: leader

Triple: ['__subject__ Atlanta __predicate__ populationDensity __object__ 1299.0 (inhabitants per square kilometre)']
Text: ['Atlanta has a population density of 1299 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Atlantic City, New Jersey __predicate__ areaCode __object__ 609']
Text: ['The area code in Atlantic City (New Jersey) is 609.']
Predicate: areaCode

Triple: ['__subject__ Atlantic City, New Jersey __predicate__ country __object__ United_States']
Text: ['Atlantic City, New Jersey is in the United States.']
Predicate: country

Triple: ['__subject__ Atlantic City, New Jersey __predicate__ isPartOf __object__ Atlantic_County,_New_Jersey']
Text: ['Atlantic City is part of Atlantic County, New Jersey.']
Predicate: isPartOf

Triple: ['__subject__ Atlantic City, New Jersey __predicate__ leader __object__ Don_Guardian']
Text: ['Don Guardian is the leader of Atlantic City (New Jersey).']
Predicate: leader

Triple: ['__subject__ Atlantic City, New Jersey __predicate__ leaderTitle __object__ Clerk_(municipal_official)']
Text: ["The leader's title in Atlantic City (New Jersey) is Clerk, which is a municipal official."]
Predicate: leaderTitle

Triple: ['__subject__ Atlantic City, New Jersey __predicate__ leaderTitle __object__ Mayors_of_Atlantic_City,_New_Jersey']
Text: ['"Mayor" is the title of the leader in Atlantic City, New Jersey.']
Predicate: leaderTitle

Triple: ['__subject__ Atlantic City, New Jersey __predicate__ populationDensity __object__ 1421.2 (inhabitants per square kilometre)']
Text: ['Atlantic City, in New Jersey, has a population density of 1421.2 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Attica, Indiana __predicate__ areaTotal __object__ 4.14 (square kilometres)']
Text: ['Attica in Indiana, has a total area of 4.14 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Attica, Indiana __predicate__ country __object__ United_States']
Text: ['Attica, Indiana is in the U.S.']
Predicate: country

Triple: ['__subject__ Attica, Indiana __predicate__ isPartOf __object__ Indiana']
Text: ['Attica is part of Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Attica, Indiana __predicate__ isPartOf __object__ Logan_Township,_Fountain_County,_Indiana']
Text: ['Attica, Indiana is part of Logan Township, Fountain County, Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Attica, Indiana __predicate__ isPartOf __object__ United_States']
Text: ['Attica, Indiana is part of the U.S.']
Predicate: isPartOf

Triple: ['__subject__ Attica, Indiana __predicate__ populationDensity __object__ 783.1 (inhabitants per square kilometre)']
Text: ['The population density, of Attica (Indiana), is 783.1 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Auburn, Alabama __predicate__ areaCode __object__ 334']
Text: ['Auburn, Alabama, has the area code, 334.']
Predicate: areaCode

Triple: ['__subject__ Auburn, Alabama __predicate__ areaOfWater __object__ 1.7 (square kilometres)']
Text: ['1.7 square kilometres is the area of water in Auburn, Alabama.']
Predicate: areaOfWater

Triple: ['__subject__ Auburn, Alabama __predicate__ areaTotal __object__ 140.8 (square kilometres)']
Text: ['The total area of the city Auburn, in Alabama, is 140.8 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Auburn, Alabama __predicate__ country __object__ United_States']
Text: ['Auburn, Alabama is in the United States.']
Predicate: country

Triple: ['__subject__ Auburn, Alabama __predicate__ elevationAboveTheSeaLevel __object__ 214.0']
Text: ['Auburn Alabama has an elevation above sea level of 214.']
Predicate: elevationAboveTheSeaLevel

Triple: ['__subject__ Auburn, Alabama __predicate__ populationDensity __object__ 368.65 (inhabitants per square kilometre)']
Text: ['Population density in Auburn, Alabama is 368.65 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Auburn, Washington __predicate__ country __object__ United_States']
Text: ['Auburn, Washington is in the U.S.']
Predicate: country

Triple: ['__subject__ Auburn, Washington __predicate__ isPartOf __object__ King_County,_Washington']
Text: ['King County is the location of Auburn, Washington.']
Predicate: isPartOf

Triple: ['__subject__ Auburn, Washington __predicate__ isPartOf __object__ Pierce_County,_Washington']
Text: ['Auburn is in Pierce County, Washington.']
Predicate: isPartOf

Triple: ['__subject__ Auburn, Washington __predicate__ isPartOf __object__ United_States']
Text: ['Auburn, Washington is part of the U.S.']
Predicate: isPartOf

Triple: ['__subject__ Auburn, Washington __predicate__ isPartOf __object__ Washington_(state)']
Text: ['Auburn is part of Washington state.']
Predicate: isPartOf

Triple: ['__subject__ Auburn, Washington __predicate__ leaderTitle __object__ Mayor']
Text: ['Mayor is the title of the leader of Auburn, in Washington.']
Predicate: leaderTitle

Triple: ['__subject__ Auburn, Washington __predicate__ populationDensity __object__ 914.8 (inhabitants per square kilometre)']
Text: ['Auburn, Washington has a population density of 914.8 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Austin, Texas __predicate__ areaCode __object__ 512']
Text: ['The area code of Austin (Texas), is 512.']
Predicate: areaCode

Triple: ['__subject__ Austin, Texas __predicate__ areaCode __object__ 512, 737']
Text: ['The ares codes of Austin (Texas) are 512 and 737.']
Predicate: areaCode

Triple: ['__subject__ Austin, Texas __predicate__ areaOfLand __object__ 686.0 (square kilometres)']
Text: ['Austin, Texas has a land area of 686 square kilometres.']
Predicate: areaOfLand

Triple: ['__subject__ Austin, Texas __predicate__ areaTotal __object__ 703.95 (square kilometres)']
Text: ['The area of Austin, Texas is 703.95 (square kilometres).']
Predicate: areaTotal

Triple: ['__subject__ Austin, Texas __predicate__ country __object__ United_States']
Text: ['Austin, Texas is in the United States.']
Predicate: country

Triple: ['__subject__ Austin, Texas __predicate__ isPartOf __object__ Hays_County,_Texas']
Text: ['Austin is in Hays County, Texas.']
Predicate: isPartOf

Triple: ['__subject__ Austin, Texas __predicate__ isPartOf __object__ Travis_County,_Texas']
Text: ['Austin is part of Travis County, in Texas.']
Predicate: isPartOf

Triple: ['__subject__ Austin, Texas __predicate__ isPartOf __object__ Williamson_County,_Texas']
Text: ['Austin is part of Williamson County, in Texas.']
Predicate: isPartOf

Triple: ['__subject__ Austin, Texas __predicate__ leaderTitle __object__ City_Manager']
Text: ['The city manager is the leader of Austin, Texas.']
Predicate: leaderTitle

Triple: ['__subject__ Austin, Texas __predicate__ leaderTitle __object__ Mayor']
Text: ['The leader in Austin Texas is the Mayor.']
Predicate: leaderTitle

Triple: ['__subject__ Austin, Texas __predicate__ populationDensity __object__ 1296.65 (inhabitants per square kilometre)']
Text: ['The population density, of Austin (Texas), is 1296.65 inhabitants per square kilometre.']
Predicate: populationDensity

Triple: ['__subject__ Benton County, Oregon __predicate__ largestCity __object__ Corvallis,_Oregon']
Text: ['Corvallis is the largest city in Benton County, Oregon.']
Predicate: largestCity

Triple: ['__subject__ California __predicate__ language __object__ Chinese_language']
Text: ['Chinese is one of the languages spoken in California.']
Predicate: language

Triple: ['__subject__ California __predicate__ language __object__ English_language']
Text: ['The English language is spoken in California.']
Predicate: language

Triple: ['__subject__ California __predicate__ language __object__ Vietnamese_language']
Text: ['Vietnamese is a language spoken in California.']
Predicate: language

Triple: ['__subject__ California State Assembly __predicate__ isPartOf __object__ California_State_Legislature']
Text: ['The California State Assembly is part of the California State Legislature.']
Predicate: isPartOf

Triple: ['__subject__ California State Assembly __predicate__ location __object__ California_State_Capitol']
Text: ['The California State Assembly is located in the California State Capitol.']
Predicate: location

Triple: ['__subject__ California State Senate __predicate__ isPartOf __object__ California_State_Legislature']
Text: ['The California State Senate is part of the California State Legislature.']
Predicate: isPartOf

Triple: ['__subject__ California State Senate __predicate__ location __object__ California_State_Capitol']
Text: ['The California State Senate is located at the California State Capitol.']
Predicate: location

Triple: ['__subject__ Contra Costa County, California __predicate__ isPartOf __object__ San_Francisco_Bay_Area']
Text: ['Contra Costa County is part of the San Francisco Bay area, in California.']
Predicate: isPartOf

Triple: ['__subject__ DeKalb County, Georgia __predicate__ country __object__ United_States']
Text: ['DeKalb County, Georgia, is located in the United States.']
Predicate: country

Triple: ['__subject__ Democratic Party (United States) __predicate__ chairperson __object__ Debbie_Wasserman_Schultz']
Text: ['The chair of the Democratic Party in the United States is Debbie Wasserman Schultz.']
Predicate: chairperson

Triple: ['__subject__ Democratic Party (United States) __predicate__ headquarter __object__ South_Capitol_Street']
Text: ['The Democratic Party of the U.S. headquarters on South Capitol Street.']
Predicate: headquarter

Triple: ['__subject__ Democratic Party (United States) __predicate__ headquarter __object__ Washington,_D.C.']
Text: ['The Democratic Party headquarters are in Washington, D.C.']
Predicate: headquarter

Triple: ['__subject__ Fall Creek Township, Madison County, Indiana __predicate__ country __object__ United_States']
Text: ['Fall Creek Township, Madison County, Indiana is located in the U.S.']
Predicate: country

Triple: ['__subject__ Fountain County, Indiana __predicate__ country __object__ United_States']
Text: ['Fountain County is in Indiana, in the United States.']
Predicate: country

Triple: ['__subject__ Fountain County, Indiana __predicate__ countySeat __object__ Covington,_Indiana']
Text: ['Covington is the County seat of Fountain County, in Indiana.']
Predicate: countySeat

Triple: ['__subject__ Fulton County, Georgia __predicate__ countySeat __object__ Atlanta']
Text: ['Atlanta is the county seat of Fulton County, Georgia.']
Predicate: countySeat

Triple: ['__subject__ Georgia (U.S. state) __predicate__ capital __object__ Atlanta']
Text: ['The capital of Georgia is Atlanta.']
Predicate: capital

Triple: ['__subject__ Hays County, Texas __predicate__ countySeat __object__ San_Marcos,_Texas']
Text: ['San Marcos is the county seat of Hays County, Texas.']
Predicate: countySeat

Triple: ['__subject__ Hays County, Texas __predicate__ largestCity __object__ San_Marcos,_Texas']
Text: ['The largest city in Hays County, Texas is San Marcos.']
Predicate: largestCity

Triple: ['__subject__ Indiana __predicate__ country __object__ United_States']
Text: ['Indiana is the United States.']
Predicate: country

Triple: ['__subject__ Indiana __predicate__ language __object__ English_Americans']
Text: ['In Indiana, the language spoken is American English.']
Predicate: language

Triple: ['__subject__ Jones County, Texas __predicate__ country __object__ United_States']
Text: ['Jones County, Texas is in the United States.']
Predicate: country

Triple: ['__subject__ King County, Washington __predicate__ country __object__ United_States']
Text: ['King County Washington is in the U.S.']
Predicate: country

Triple: ['__subject__ King County, Washington __predicate__ largestCity __object__ Seattle']
Text: ['Seattle is the largest city in King County, in Washington.']
Predicate: largestCity

Triple: ['__subject__ Lafayette Township, Madison County, Indiana __predicate__ country __object__ United_States']
Text: ['Lafayette Township, Madison County, Indiana is part of the United States.']
Predicate: country

Triple: ['__subject__ Lee County, Alabama __predicate__ country __object__ United_States']
Text: ['Lee County in Alabama is in the U.S.']
Predicate: country

Triple: ['__subject__ Lee County, Alabama __predicate__ countySeat __object__ Opelika,_Alabama']
Text: ['Opelika is the county seat of Lee County, Alabama.']
Predicate: countySeat

Triple: ['__subject__ Linn County, Oregon __predicate__ largestCity __object__ Albany,_Oregon']
Text: ['Albany is the largest city in Linn County, Oregon.']
Predicate: largestCity

Triple: ['__subject__ Madison County, Indiana __predicate__ country __object__ United_States']
Text: ['Madison County is in Indiana, which is in the United States.']
Predicate: country

Triple: ['__subject__ Madison County, Indiana __predicate__ largestCity __object__ Anderson,_Indiana']
Text: ['Anderson is the largest city in Madison County, Indiana.']
Predicate: largestCity

Triple: ['__subject__ Michigan __predicate__ capital __object__ Lansing,_Michigan']
Text: ['Lansing is the capital of Michigan.']
Predicate: capital

Triple: ['__subject__ Michigan __predicate__ language __object__ Arabic']
Text: ['Arabic is a language found in Michigan.']
Predicate: language

Triple: ['__subject__ Michigan __predicate__ language __object__ English_language']
Text: ['The English language is spoken in Michigan.']
Predicate: language

Triple: ['__subject__ Michigan __predicate__ language __object__ Spanish_language']
Text: ['Spanish is one of the languages spoken in Michigan.']
Predicate: language

Triple: ['__subject__ Monroe Township, Madison County, Indiana __predicate__ country __object__ United_States']
Text: ['Monroe Township, Madison County, Indiana is in the U.S.']
Predicate: country

Triple: ['__subject__ Monroe Township, Madison County, Indiana __predicate__ isPartOf __object__ Indiana']
Text: ['Monroe Township is in Madison County which is a part of Indiana.']
Predicate: isPartOf

Triple: ['__subject__ Monroe Township, Madison County, Indiana __predicate__ isPartOf __object__ Madison_County,_Indiana']
Text: ['Monroe Township is part of Madison County in Indiana.']
Predicate: isPartOf

Triple: ['__subject__ New Jersey __predicate__ country __object__ United_States']
Text: ['New Jersey is in the United States.']
Predicate: country

Triple: ['__subject__ New Jersey __predicate__ largestCity __object__ Newark,_New_Jersey']
Text: ['Newark is the largest city of New Jersey.']
Predicate: largestCity

Triple: ['__subject__ New Mexico __predicate__ language __object__ Navajo_language']
Text: ['The Navajo language, is one of the languages spoken in New Mexico.']
Predicate: language

Triple: ['__subject__ New Mexico House of Representatives __predicate__ leader __object__ Don_Tripp']
Text: ["The leader of New Mexico's House of Representatives is Don Tripp."]
Predicate: leader

Triple: ['__subject__ New Mexico Senate __predicate__ leader __object__ John_Sánchez']
Text: ['John Sánchez, is one of the leaders, in the New Mexico Senate.']
Predicate: leader

Triple: ['__subject__ Orange County, California __predicate__ isPartOf __object__ Greater_Los_Angeles_Area']
Text: ['Orange County, California is part of the Greater Los Angeles area.']
Predicate: isPartOf

Triple: ['__subject__ Oregon __predicate__ capital __object__ Salem,_Oregon']
Text: ['Salem is the capital of Oregon.']
Predicate: capital

Triple: ['__subject__ Pierce County, Washington __predicate__ country __object__ United_States']
Text: ['Pierce County, Washington is in the United States.']
Predicate: country

Triple: ['__subject__ Pierce County, Washington __predicate__ largestCity __object__ Tacoma,_Washington']
Text: ['Pierce County is the largest city in Tacoma, Washington.']
Predicate: largestCity

Triple: ['__subject__ Potter County, Texas __predicate__ country __object__ United_States']
Text: ['Potter County is in Texas, in the United States.']
Predicate: country

Triple: ['__subject__ Potter County, Texas __predicate__ countySeat __object__ Amarillo,_Texas']
Text: ['Amarillo is the county seat of Potter County which is in Texas.']
Predicate: countySeat

Triple: ['__subject__ Randall County, Texas __predicate__ country __object__ United_States']
Text: ['Randall County is in Texas, in the United States.']
Predicate: country

Triple: ['__subject__ Randall County, Texas __predicate__ countySeat __object__ Canyon,_Texas']
Text: ['Canyon, is the county seat of Randall County, which is in Texas.']
Predicate: countySeat

Triple: ['__subject__ Richland Township, Madison County, Indiana __predicate__ country __object__ United_States']
Text: ['Richland Township is in Madison County, Indiana, U.S.']
Predicate: country

Triple: ['__subject__ Tarrant County, Texas __predicate__ countySeat __object__ Fort_Worth,_Texas']
Text: ['The county seat of Tarrant County in Texas is Fort Worth.']
Predicate: countySeat

Triple: ['__subject__ Taylor County, Texas __predicate__ country __object__ United_States']
Text: ['Taylor County is in Texas, in the United States.']
Predicate: country

Triple: ['__subject__ Taylor County, Texas __predicate__ largestCity __object__ Abilene,_Texas']
Text: ['Abilene is the largest city, in Taylor County, Texas.']
Predicate: largestCity

Triple: ['__subject__ Texas __predicate__ capital __object__ Austin,_Texas']
Text: ['Austin is the capital city of Texas.']
Predicate: capital

Triple: ['__subject__ Texas __predicate__ country __object__ United_States']
Text: ['Texas is in the United States.']
Predicate: country

Triple: ['__subject__ Texas __predicate__ language __object__ English_language']
Text: ['English is a language spoken in Texas.']
Predicate: language

Triple: ['__subject__ Texas __predicate__ language __object__ Spanish_language']
Text: ['Spanish is a language spoken in Texas.']
Predicate: language

Triple: ['__subject__ Texas __predicate__ largestCity __object__ Houston']
Text: ['Houston is the largest city in Texas.']
Predicate: largestCity

Triple: ['__subject__ Travis County, Texas __predicate__ countySeat __object__ Austin,_Texas']
Text: ['Austin is the county seat of Travis County, in Texas.']
Predicate: countySeat

Triple: ['__subject__ Travis County, Texas __predicate__ largestCity __object__ Austin,_Texas']
Text: ['Austin is the largest city in Travis County, Texas.']
Predicate: largestCity

Triple: ['__subject__ Union Township, Madison County, Indiana __predicate__ country __object__ United_States']
Text: ['Union Township is in Madison County, which is in Indiana, in the United States.']
Predicate: country

Triple: ['__subject__ United States __predicate__ capital __object__ Washington,_D.C.']
Text: ['The capital of the U.S. is Washington, D.C.']
Predicate: capital

Triple: ['__subject__ United States __predicate__ demonym __object__ Americans']
Text: ['Americans live in the U.S.']
Predicate: demonym

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ African_Americans']
Text: ['African Americans are an ethnic group in the United States.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ Asian_Americans']
Text: ['One of the ethnic groups in the United States, is Asian Americans.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ Native_Americans_in_the_United_States']
Text: ['Native Americans are one of the ethnic groups in the United States of America.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ White_Americans']
Text: ['White Americans are an ethnic group in the United States.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ language __object__ English_language']
Text: ['English is the language spoken in the United States.']
Predicate: language

Triple: ['__subject__ United States __predicate__ largestCity __object__ New_York_City']
Text: ['The biggest city in the U.S. is New York City.']
Predicate: largestCity

Triple: ['__subject__ United States __predicate__ leaderTitle __object__ President_of_the_United_States']
Text: ['The president is the leader of the United States.']
Predicate: leaderTitle

Triple: ['__subject__ United States House of Representatives __predicate__ isPartOf __object__ United_States_Congress']
Text: ['The United States House of Representatives is part of the United States Congress.']
Predicate: isPartOf

Triple: ['__subject__ United States House of Representatives __predicate__ location __object__ United_States']
Text: ['The United States house of Representatives is in the Unites States.']
Predicate: location

Triple: ['__subject__ United States House of Representatives __predicate__ location __object__ Washington,_D.C.']
Text: ['The U.S. House of Reps is located in Washington, D.C.']
Predicate: location

Triple: ['__subject__ Washington (state) __predicate__ capital __object__ Olympia,_Washington']
Text: ['Olympia is the capital of Washington.']
Predicate: capital

Triple: ['__subject__ Washington (state) __predicate__ country __object__ United_States']
Text: ['Washington state is located within the United States.']
Predicate: country

Triple: ['__subject__ Washington (state) __predicate__ largestCity __object__ Seattle']
Text: ['Seattle is the largest city in Washington State.']
Predicate: largestCity

Triple: ['__subject__ Washtenaw County, Michigan __predicate__ country __object__ United_States']
Text: ['Washtenaw County, Michigan is in the United States.']
Predicate: country

Triple: ['__subject__ Williamson County, Texas __predicate__ countySeat __object__ Georgetown,_Texas']
Text: ['Georgetown is the county seat of Williamson County, Texas.']
Predicate: countySeat

Triple: ['__subject__ Williamson County, Texas __predicate__ largestCity __object__ Round_Rock,_Texas']
Text: ['Round Rock is the largest city in Williamson County, Texas.']
Predicate: largestCity

Triple: ['__subject__ Airman (comicsCharacter) __predicate__ alternativeName __object__ Drake Stevens']
Text: ['"Drake Stevens" is known as the comic character Airman.']
Predicate: alternativeName

Triple: ['__subject__ Airman (comicsCharacter) __predicate__ creator __object__ George_Kapitan']
Text: ['The creator of Airman, (comics character) is George Kapitan.']
Predicate: creator

Triple: ['__subject__ Airman (comicsCharacter) __predicate__ creator __object__ Harry_Sahle']
Text: ['The comic character, Airman, was created by Harry Sahle.']
Predicate: creator

Triple: ['__subject__ Amazing-Man (comicsCharacter) __predicate__ alternativeName __object__ John Aman']
Text: ['John Aman, is the alternative name for the comic character, Amazing-Man.']
Predicate: alternativeName

Triple: ['__subject__ Amazing-Man (comicsCharacter) __predicate__ creator __object__ Bill_Everett']
Text: ['Bill Everett is the creator of the comic character, Amazing-Man.']
Predicate: creator

Triple: ["__subject__ April O'Neil __predicate__ creator __object__ Peter_Laird"]
Text: ["The character, April O'Neil, was created by Peter Laird."]
Predicate: creator

Triple: ["__subject__ Arion (comicsCharacter) __predicate__ alternativeName __object__ Ahri'ahn"]
Text: ["The comic character, Arion, is also known by he name Ahri'ahn."]
Predicate: alternativeName

Triple: ['__subject__ Arion (comicsCharacter) __predicate__ creator __object__ Jan_Duursema']
Text: ['The comic character, Arion, was created by Jan Duursema.']
Predicate: creator

Triple: ['__subject__ Arion (comicsCharacter) __predicate__ creator __object__ Paul_Kupperberg']
Text: ['Paul Kupperberg is the creator of the comic character, Arion.']
Predicate: creator

Triple: ['__subject__ Asterix (comicsCharacter) __predicate__ alternativeName __object__ Astérix']
Text: ['The alternative name of Asterix (comics character) is "Astérix".']
Predicate: alternativeName

Triple: ['__subject__ Asterix (comicsCharacter) __predicate__ creator __object__ Albert_Uderzo']
Text: ['Albert Uderzo is the creator of the comic character, Asterix.']
Predicate: creator

Triple: ['__subject__ Aurakles __predicate__ alternativeName __object__ Aurakles']
Text: ["Aurakles is also known as ''Aurakles''."]
Predicate: alternativeName

Triple: ['__subject__ Aurakles __predicate__ creator __object__ Dick_Dillin']
Text: ['Dick Dillin is the creator of Aurakles.']
Predicate: creator

Triple: ['__subject__ Aurakles __predicate__ creator __object__ Len_Wein']
Text: ['The character, Aurakles, was created by Len Wein.']
Predicate: creator

Triple: ['__subject__ Auron (comicsCharacter) __predicate__ creator __object__ Karl_Kesel']
Text: ['The creator of Auron (comics character) is Karl Kesel.']
Predicate: creator

Triple: ['__subject__ Auron (comicsCharacter) __predicate__ creator __object__ Walt_Simonson']
Text: ['The comic character, Auron, was created by Walt Simonson.']
Predicate: creator

Triple: ['__subject__ Auron (comicsCharacter) __predicate__ fullName __object__ Lambien']
Text: ['The full name of Auron (comics character) is "Lambien".']
Predicate: fullName

Triple: ['__subject__ BBC __predicate__ foundedBy __object__ John_Reith,_1st_Baron_Reith']
Text: ['BBC was founded by John Reith 1st Baron Reith.']
Predicate: foundedBy

Triple: ['__subject__ BBC __predicate__ keyPerson __object__ Rona_Fairhead']
Text: ['Rona Fairhead is the key person for BBC.']
Predicate: keyPerson

Triple: ['__subject__ BBC __predicate__ keyPerson __object__ Tony_Hall,_Baron_Hall_of_Birkenhead']
Text: ['A key person at the BBC is Baron Hall of Birkenhead, Tony Hall.']
Predicate: keyPerson

Triple: ['__subject__ BBC __predicate__ city __object__ Broadcasting_House']
Text: ['The location of the BBC is the Broadcasting House in London.']
Predicate: city

Triple: ['__subject__ BBC __predicate__ city __object__ London']
Text: ['BBC is located in London.']
Predicate: city

Triple: ['__subject__ BBC __predicate__ product __object__ BBC_Radio']
Text: ['One of the products of BBC is BBC radio.']
Predicate: product

Triple: ['__subject__ Balder (comicsCharacter) __predicate__ alternativeName __object__ Balder Odinson']
Text: ['An alternative name for the comic character Balder is Balder Odinson.']
Predicate: alternativeName

Triple: ['__subject__ Balder (comicsCharacter) __predicate__ creator __object__ Stan_Lee']
Text: ['Stan Lee created the comic character Balder.']
Predicate: creator

Triple: ['__subject__ Ballistic (comicsCharacter) __predicate__ alternativeName __object__ Kelvin Mao']
Text: ['The comic character, Ballistic, has the alternative name, Kelvin Mao.']
Predicate: alternativeName

Triple: ['__subject__ Ballistic (comicsCharacter) __predicate__ creator __object__ Michael Manley']
Text: ['The comic character Ballistic was created by Michael Manley.']
Predicate: creator

Triple: ['__subject__ Ballistic (comicsCharacter) __predicate__ creator __object__ Doug_Moench']
Text: ['The comic character Ballistic was created by Doug Moench.']
Predicate: creator

Triple: ['__subject__ Bananaman __predicate__ creator __object__ John_Geering']
Text: ['John Geering is the creator of Bananaman.']
Predicate: creator

Triple: ['__subject__ Bananaman __predicate__ creator __object__ Steve_Bright']
Text: ['Steve Bright is the creator of Bananaman.']
Predicate: creator

Triple: ['__subject__ Bananaman __predicate__ lastAired __object__ 1986-04-15']
Text: ['Bananaman last aired on April 15th 1986.']
Predicate: lastAired

Triple: ['__subject__ Bananaman __predicate__ starring __object__ Graeme_Garden']
Text: ['Graeme Garden stars in Bananaman.']
Predicate: starring

Triple: ['__subject__ Bananaman __predicate__ starring __object__ Jill_Shilling']
Text: ['Jill Shilling stared in Bananaman.']
Predicate: starring

Triple: ['__subject__ Bananaman __predicate__ starring __object__ Tim_Brooke-Taylor']
Text: ['Tim Brooke-Taylor starred in Bananaman.']
Predicate: starring

Triple: ['__subject__ Baymax __predicate__ creator __object__ Duncan_Rouleau']
Text: ['Baymax was created by Duncan Rouleau.']
Predicate: creator

Triple: ['__subject__ Baymax __predicate__ creator __object__ Steven_T._Seagle']
Text: ['Steven T. Seagle is the creator of Baymax.']
Predicate: creator

Triple: ['__subject__ Baymax __predicate__ firstAppearanceInFilm __object__ Big_Hero_6_(film)']
Text: ["Big Hero 6 was Baymax's first film appearance."]
Predicate: firstAppearanceInFilm

Triple: ['__subject__ Baymax __predicate__ voice __object__ Scott_Adsit']
Text: ['Scott Adsit does the voice for Baymax.']
Predicate: voice

Triple: ['__subject__ Ben Urich __predicate__ creator __object__ Gene_Colan']
Text: ['Gene Colan created Ben Urich.']
Predicate: creator

Triple: ['__subject__ Ben Urich __predicate__ creator __object__ Roger_McKenzie_(comic_book_writer)']
Text: ['The comic book writer, Roger McKenzie, is the creator of Ben Urich.']
Predicate: creator

Triple: ['__subject__ Bianca Castafiore __predicate__ creator __object__ Hergé']
Text: ['Hergé was the creator of the character Bianca Castafiore.']
Predicate: creator

Triple: ['__subject__ Bibbo Bibbowski __predicate__ creator __object__ Marv_Wolfman']
Text: ['Marv Wolfman was the creator of Bibbo Bibbowski.']
Predicate: creator

Triple: ['__subject__ Big Hero 6 (film) __predicate__ distributor __object__ Walt_Disney_Studios_Motion_Pictures']
Text: ['Walt Disney Studios Motion Pictures is the distributor of the film Big Hero 6.']
Predicate: distributor

Triple: ['__subject__ Big Hero 6 (film) __predicate__ starring __object__ Alan_Tudyk']
Text: ['Alan Tudyk stars in the film, Big Hero 6.']
Predicate: starring

Triple: ['__subject__ Big Hero 6 (film) __predicate__ starring __object__ Damon_Wayans,_Jr.']
Text: ['The film Big Hero 6 stars actor Damon Wayans Jr.']
Predicate: starring

Triple: ['__subject__ Big Hero 6 (film) __predicate__ starring __object__ Jamie_Chung']
Text: ['The film Big Hero 6 starred Jamie Chung.']
Predicate: starring

Triple: ['__subject__ Big Hero 6 (film) __predicate__ starring __object__ Maya_Rudolph']
Text: ['Big Hero 6 stars Maya Rudolph.']
Predicate: starring

Triple: ['__subject__ Big Hero 6 (film) __predicate__ starring __object__ Ryan_Potter']
Text: ['The film, Big Hero 6, stars Ryan Potter.']
Predicate: starring

Triple: ['__subject__ Big Hero 6 (film) __predicate__ starring __object__ Scott_Adsit']
Text: ['The film, Big hero 6, stars Scott Adsit.']
Predicate: starring

Triple: ['__subject__ Bill Oddie __predicate__ birthPlace __object__ Rochdale']
Text: ['Bill Oddie was born in Rochdale.']
Predicate: birthPlace

Triple: ['__subject__ Black Pirate __predicate__ creator __object__ Sheldon_Moldoff']
Text: ['Sheldon Moldoff is the creator of Black Pirate.']
Predicate: creator

Triple: ['__subject__ Blockbuster (comicsCharacter) __predicate__ alternativeName __object__ Mark Desmond']
Text: ['"Mark Desmond" is also known as the comic character Blockbuster.']
Predicate: alternativeName

Triple: ['__subject__ Blockbuster (comicsCharacter) __predicate__ alternativeName __object__ Roland Desmond']
Text: ['The comic character Blockbuster is also known as Roland Desmond.']
Predicate: alternativeName

Triple: ['__subject__ Blockbuster (comicsCharacter) __predicate__ creator __object__ Carmine_Infantino']
Text: ['The comic character, Blockbuster, was created by Carmine Infantino.']
Predicate: creator

Triple: ['__subject__ Blockbuster (comicsCharacter) __predicate__ creator __object__ Gardner_Fox']
Text: ['The comic character, Blockbuster, was created by Gardner Fox.']
Predicate: creator

Triple: ['__subject__ Blockbuster (comicsCharacter) __predicate__ creator __object__ Roger_Stern']
Text: ['Roger Stern is the creator of the comic character, Blockbuster.']
Predicate: creator

Triple: ['__subject__ Blockbuster (comicsCharacter) __predicate__ creator __object__ Tom_Lyle']
Text: ['The comic character, Blockbuster, was created by Tom Lyle.']
Predicate: creator

Triple: ['__subject__ Bolt (comicsCharacter) __predicate__ alternativeName __object__ Larry Bolatinsky']
Text: ['An alternative name for the comic character Bolt is Larry Bolatinsky.']
Predicate: alternativeName

Triple: ['__subject__ Bolt (comicsCharacter) __predicate__ creator __object__ Ernie_Colón']
Text: ['Bolt is created by Ernie Colon.']
Predicate: creator

Triple: ['__subject__ Bolt (comicsCharacter) __predicate__ creator __object__ Gary_Cohn_(comics)']
Text: ['The comic character, Bolt, was created by comic book writer Gary Cohn.']
Predicate: creator

Triple: ['__subject__ Bolt (comicsCharacter) __predicate__ creator __object__ Paris_Cullins']
Text: ['The creator of Bolt (comics character) is Paris Cullins.']
Predicate: creator

Triple: ['__subject__ Bozo the Iron Man __predicate__ creator __object__ George_Brenner']
Text: ['Bozo the Iron Man was created by George Brenner.']
Predicate: creator

Triple: ['__subject__ Dane Whitman Black Knight (comicsCharacter) __predicate__ alternativeName __object__ Dane Whitman']
Text: ['Dane Whitman is the alternative name for the comic character, Dane Whitman Black Knight.']
Predicate: alternativeName

Triple: ['__subject__ Dane Whitman Black Knight (comicsCharacter) __predicate__ creator __object__ John_Buscema']
Text: ['Dane Whitman, alter ego Black Knight, was created by John Buscema.']
Predicate: creator

Triple: ['__subject__ Dane Whitman Black Knight (comicsCharacter) __predicate__ creator __object__ Roy_Thomas']
Text: ['The comic character, Dane Whitman Black Knight was created by Roy Thomas.']
Predicate: creator

Triple: ['__subject__ Dick Dillin __predicate__ nationality __object__ United_States']
Text: ['Dick Dillin is from the United States.']
Predicate: nationality

Triple: ['__subject__ Doug Moench __predicate__ award __object__ Eagle_Award_(comics)']
Text: ['Doug Moench won the Eagle Award (comics).']
Predicate: award

Triple: ['__subject__ Doug Moench __predicate__ award __object__ Inkpot_Award']
Text: ['Doug Moench won the Inkpot Award.']
Predicate: award

Triple: ['__subject__ Duncan Rouleau __predicate__ nationality __object__ Americans']
Text: ['The nationality of Duncan Rouleau is American.']
Predicate: nationality

Triple: ['__subject__ Ernie Colón __predicate__ nationality __object__ Puerto_Ricans']
Text: ['Ernie Colón is a national of Puerto Rico so he is considered Puerto Rican.']
Predicate: nationality

Triple: ['__subject__ Gene Colan __predicate__ award __object__ Eisner_Award']
Text: ['Gene Colan has been awarded the Eisner Award.']
Predicate: award

Triple: ['__subject__ Gene Colan __predicate__ nationality __object__ Americans']
Text: ['Gene Colan is an American.']
Predicate: nationality

Triple: ['__subject__ Graeme Garden __predicate__ birthPlace __object__ Aberdeen']
Text: ['Graeme Garden was born in Aberdeen.']
Predicate: birthPlace

Triple: ['__subject__ Jack Kirby __predicate__ nationality __object__ Americans']
Text: ['Jack Kirby is an American.']
Predicate: nationality

Triple: ['__subject__ Jan Duursema __predicate__ award __object__ Eisner_Award']
Text: ['Jan Duursema has won the Eisner Award.']
Predicate: award

Triple: ['__subject__ Jerry Ordway __predicate__ nationality __object__ Americans']
Text: ["Jerry Ordway's nationality is American."]
Predicate: nationality

Triple: ['__subject__ John Buscema __predicate__ award __object__ Academy_of_Comic_Book_Arts']
Text: ['John Buscema was awarded an award by the Academy of Comic Book Arts.']
Predicate: award

Triple: ['__subject__ John Buscema __predicate__ award __object__ Alley_Award']
Text: ['John Buscema won the Alley Award.']
Predicate: award

Triple: ['__subject__ John Buscema __predicate__ award __object__ Inkpot_Award']
Text: ['John Buscema won the Inkpot Award.']
Predicate: award

Triple: ['__subject__ John Buscema __predicate__ nationality __object__ Americans']
Text: ['American was the nationality of John Buscema.']
Predicate: nationality

Triple: ['__subject__ Len Wein __predicate__ award __object__ Academy_of_Comic_Book_Arts']
Text: ['Len Wein collected an award from the Academy of Comic Book Arts.']
Predicate: award

Triple: ['__subject__ Len Wein __predicate__ award __object__ Inkpot_Award']
Text: ['Len Wein won the Inkpot Award.']
Predicate: award

Triple: ['__subject__ Marv Wolfman __predicate__ award __object__ Academy_of_Comic_Book_Arts']
Text: ['Marv Wolfman won an award at the Academy of Comic Book Arts.']
Predicate: award

Triple: ['__subject__ Marv Wolfman __predicate__ award __object__ Inkpot_Award']
Text: ['Marv Wolfman won the Inkpot Award.']
Predicate: award

Triple: ['__subject__ Paris Cullins __predicate__ nationality __object__ United_States']
Text: ['Paris Cullins is a United States national.']
Predicate: nationality

Triple: ['__subject__ René Goscinny __predicate__ nationality __object__ French_people']
Text: ['Rene Goscinny is a French national.']
Predicate: nationality

Triple: ['__subject__ Roger McKenzie (comic book writer) __predicate__ nationality __object__ United_States']
Text: ['The comic book writer, Roger McKenzie, is a United States national.']
Predicate: nationality

Triple: ['__subject__ Roy Thomas __predicate__ award __object__ Academy_of_Comic_Book_Arts']
Text: ['Roy Thomas was an award winner at the Academy of Comic Book Arts.']
Predicate: award

Triple: ['__subject__ Roy Thomas __predicate__ award __object__ Alley_Award']
Text: ['Roy Thomas was awarded the Alley Award.']
Predicate: award

Triple: ['__subject__ Sheldon Moldoff __predicate__ award __object__ Inkpot_Award']
Text: ['Sheldon Moldoff won the Inkpot Award.']
Predicate: award

Triple: ['__subject__ Sheldon Moldoff __predicate__ nationality __object__ Americans']
Text: ['Sheldon Moldoff was an American national.']
Predicate: nationality

Triple: ['__subject__ The Arrow (comicsCharacter) __predicate__ alternativeName __object__ Ralph Payne']
Text: ['The Arrow is otherwise known as Ralph Payne.']
Predicate: alternativeName

Triple: ['__subject__ The Arrow (comicsCharacter) __predicate__ alternativeName __object__ Rick Parker']
Text: ['Rick Parker, is the alternative name for the comic character, the Arrow.']
Predicate: alternativeName

Triple: ['__subject__ The Arrow (comicsCharacter) __predicate__ creator __object__ Paul_Gustavson']
Text: ['Paul Gustavson created The Arrow.']
Predicate: creator

Triple: ['__subject__ Tim Brooke-Taylor __predicate__ birthPlace __object__ Buxton']
Text: ['Tim Brooke-Taylor was born in Buxton.']
Predicate: birthPlace

Triple: ['__subject__ Tim Brooke-Taylor __predicate__ birthPlace __object__ Derbyshire']
Text: ['Tim Brooke-Taylor was born in Derbyshire.']
Predicate: birthPlace

Triple: ['__subject__ Tim Brooke-Taylor __predicate__ birthPlace __object__ England']
Text: ['Tim Brooke-Taylor was born in England.']
Predicate: birthPlace

Triple: ['__subject__ Tim Brooke-Taylor __predicate__ birthPlace __object__ United_Kingdom']
Text: ["Tim Brooke-Taylor's birth place is the United Kingdom."]
Predicate: birthPlace

Triple: ['__subject__ AmeriGas __predicate__ country __object__ United_States']
Text: ['AmeriGas works in the country of the United States.']
Predicate: country

Triple: ['__subject__ AmeriGas __predicate__ foundingDate __object__ 1959-01-01']
Text: ['AmeriGas was founded on 01-01-1959.']
Predicate: foundingDate

Triple: ['__subject__ AmeriGas __predicate__ industry __object__ Energy_industry']
Text: ['AmeriGas is in the energy industry.']
Predicate: industry

Triple: ['__subject__ AmeriGas __predicate__ city __object__ King_of_Prussia,_Pennsylvania']
Text: ['AmeriGas is located in King of Prussia, Pennsylvania.']
Predicate: city

Triple: ['__subject__ AmeriGas __predicate__ netIncome __object__ 211200000']
Text: ['The net income of AmeriGas is 211200000.']
Predicate: netIncome

Triple: ['__subject__ AmeriGas __predicate__ operatingIncome __object__ 380700000']
Text: ['AmeriGas has an operating income of $380,700,000.']
Predicate: operatingIncome

Triple: ['__subject__ AmeriGas __predicate__ regionServed __object__ United_States']
Text: ['AmeriGas provides its services in the United States.']
Predicate: regionServed

Triple: ['__subject__ Brazil __predicate__ areaTotal __object__ 8514837.14  (square kilometres)']
Text: ['The total area of Brazil is 8514837.14 square kilometres.']
Predicate: areaTotal

Triple: ['__subject__ Brazil __predicate__ leader __object__ Michel_Temer']
Text: ['Michel Temer is the leader of Brazil.']
Predicate: leader

Triple: ['__subject__ Brazil __predicate__ leaderTitle __object__ President of the Supreme Federal Court']
Text: ["Brazil's leader has the title of President of the Supreme Federal Court."]
Predicate: leaderTitle

Triple: ['__subject__ Brazil __predicate__ populationDensity __object__ 23.8']
Text: ['Brazil has a population density of 23.8.']
Predicate: populationDensity

Triple: ['__subject__ Chinabank __predicate__ foundationPlace __object__ Insular_Government_of_the_Philippine_Islands']
Text: ['Chinabank was founded in the Insular Government of the Philippine Islands.']
Predicate: foundationPlace

Triple: ['__subject__ Chinabank __predicate__ foundationPlace __object__ Manila']
Text: ['Manila is Chinabank’s founding place.']
Predicate: foundationPlace

Triple: ['__subject__ Chinabank __predicate__ foundingDate __object__ 1920-08-16']
Text: ['Chinabank was founded on 08-16-1920.']
Predicate: foundingDate

Triple: ['__subject__ Chinabank __predicate__ numberOfEmployees __object__ 5594']
Text: ['Chinabank has 5594 employees.']
Predicate: numberOfEmployees

Triple: ['__subject__ Chinabank __predicate__ numberOfLocations __object__ 295']
Text: ['Chinabank has 295 locations.']
Predicate: numberOfLocations

Triple: ['__subject__ Chinabank __predicate__ service __object__ Banking']
Text: ['Chinabank offers banking service.']
Predicate: service

Triple: ['__subject__ Chinabank __predicate__ type __object__ Public_company']
Text: ['Chinabank is a publicly traded company.']
Predicate: type

Triple: ['__subject__ Felipe Gozon __predicate__ alternativeName __object__ Atty. Felipe L. Gozon, FLG']
Text: ['Felipe Gozon is also known by Attorney Felipe L. Gozon, FLG.']
Predicate: alternativeName

Triple: ['__subject__ Felipe Gozon __predicate__ birthDate __object__ 1939-12-08']
Text: ["Felipe Gozon's birthdate is 1939-12-08."]
Predicate: birthDate

Triple: ['__subject__ GMA Network (company) __predicate__ keyPerson __object__ Felipe_Gozon']
Text: ['GMA Network is a company and its key person is Felipe Gozon.']
Predicate: keyPerson

Triple: ['__subject__ GMA Network (company) __predicate__ city __object__ Diliman']
Text: ['GMA Network is a company located in the city of Diliman.']
Predicate: city

Triple: ['__subject__ GMA Network Center __predicate__ cost __object__ 46000000']
Text: ['The GMA Network Center costs 46000000.']
Predicate: cost

Triple: ['__subject__ GMA New Media __predicate__ foundingDate __object__ 2000-01-01']
Text: ['GMA New Media was founded on 01/01/2000.']
Predicate: foundingDate

Triple: ['__subject__ GMA New Media __predicate__ industry __object__ Entertainment']
Text: ['GMA New Media offers applications in the entertainment industry.']
Predicate: industry

Triple: ['__subject__ GMA New Media __predicate__ industry __object__ Mass_Media']
Text: ['GMA New Media is in the mass media industry.']
Predicate: industry

Triple: ['__subject__ GMA New Media __predicate__ location __object__ Philippines']
Text: ['GMA New Media is located in the Philippines.']
Predicate: location

Triple: ['__subject__ GMA New Media __predicate__ location __object__ Quezon_City']
Text: ['GMA New Media is located in the city of Quezon.']
Predicate: location

Triple: ['__subject__ GMA New Media __predicate__ product __object__ Mobile_Applications']
Text: ['GMA New Media makes mobile apps.']
Predicate: product

Triple: ['__subject__ GMA New Media __predicate__ subsidiary __object__ Digify,_Inc.']
Text: ['Digify Inc. is a subsidiary of GMA New Media.']
Predicate: subsidiary

Triple: ['__subject__ GMA New Media __predicate__ subsidiary __object__ Philippine_Entertainment_Portal']
Text: ['Philippine Entertainment Portal, Inc is a subsidiary of GMA New Media.']
Predicate: subsidiary

Triple: ['__subject__ Hypermarcas __predicate__ foundingDate __object__ 2001-01-01']
Text: ['Hypermarcas is the company founded on January 1, 2001.']
Predicate: foundingDate

Triple: ['__subject__ Hypermarcas __predicate__ industry __object__ Pharmaceuticals']
Text: ['Hypermarcas is in the pharmaceuticals industry.']
Predicate: industry

Triple: ['__subject__ Hypermarcas __predicate__ location __object__ Brazil']
Text: ['Hypermarcas is located in Brazil.']
Predicate: location

Triple: ['__subject__ Hypermarcas __predicate__ location __object__ São_Paulo']
Text: ['Hypermarcas is located in São Paulo.']
Predicate: location

Triple: ['__subject__ Hypermarcas __predicate__ netIncome __object__ 108600000']
Text: ['Hypermarcas has a net income of 108,600,000.']
Predicate: netIncome

Triple: ['__subject__ Hypermarcas __predicate__ product __object__ Cosmetics']
Text: ['Hypermarcas produces cosmetics.']
Predicate: product

Triple: ['__subject__ Hypermarcas __predicate__ product __object__ Healthcare']
Text: ['Hypermarcas sells healthcare products.']
Predicate: product

Triple: ['__subject__ Hypermarcas __predicate__ subsidiary __object__ Mantecorp']
Text: ['Hypermarcas has a subsidiary called Mantecorp.']
Predicate: subsidiary

Triple: ['__subject__ Hypermarcas __predicate__ type __object__ S.A._(corporation)']
Text: ['Hypermarcas is a type of S.A (corporation).']
Predicate: type

Triple: ['__subject__ Insular Government of the Philippine Islands __predicate__ foundingDate __object__ 1901-07-01']
Text: ['The Insular Government of the Philippine Islands was founded on 1901-07-01.']
Predicate: foundingDate

Triple: ['__subject__ Ireland __predicate__ location __object__ Europe']
Text: ['Ireland is located in Europe.']
Predicate: location

Triple: ['__subject__ King of Prussia, Pennsylvania __predicate__ timeZone __object__ North_American_Eastern_Time_Zone']
Text: ['King of Prussia, Pennsylvania is in the North American Eastern time zone.']
Predicate: timeZone

Triple: ['__subject__ King of Prussia, Pennsylvania __predicate__ type __object__ Census-designated_place']
Text: ['King of Prussia, Pennsylvania is a census-designated place.']
Predicate: type

Triple: ['__subject__ La Crosse, Wisconsin __predicate__ isPartOf __object__ Wisconsin']
Text: ['La Crosse is located in Wisconsin.']
Predicate: isPartOf

Triple: ['__subject__ Manila __predicate__ leaderTitle __object__ City Council']
Text: ['Manila is led by the City Council.']
Predicate: leaderTitle

Triple: ['__subject__ Manila __predicate__ type __object__ Capital_city']
Text: ['Manila is the capital.']
Predicate: type

Triple: ['__subject__ Philippine Entertainment Portal __predicate__ parentCompany __object__ Summit_Media']
Text: ["Philippine Entertainment Portal's parent company is Summit Media."]
Predicate: parentCompany

Triple: ['__subject__ Philippines __predicate__ capital __object__ Manila']
Text: ['Manila is the capital city of the Philippines.']
Predicate: capital

Triple: ['__subject__ Philippines __predicate__ foundingDate __object__ 1898-06-12']
Text: ['The Philippines were founded on 12/06/1898.']
Predicate: foundingDate

Triple: ['__subject__ Philippines __predicate__ leader __object__ Aquilino_Pimentel_III']
Text: ['Aquilino Pimentel III is the leader of Philippines.']
Predicate: leader

Triple: ['__subject__ Philippines __predicate__ leader __object__ Maria_Lourdes_Sereno']
Text: ['Maria Lourdes Sereno is the leader of the Philippines.']
Predicate: leader

Triple: ['__subject__ Philippines __predicate__ leader __object__ Pantaleon_Alvarez']
Text: ['The name of the leader of the Philippines is Pantaleon Alvarez.']
Predicate: leader

Triple: ['__subject__ Philippines __predicate__ leaderTitle __object__ President']
Text: ['The President is the leader title of the Philippines.']
Predicate: leaderTitle

Triple: ['__subject__ Philippines __predicate__ motto __object__ Maka-Diyos, Maka-Tao, Makakalikasan at Makabansa']
Text: ['The motto of the Philippines is Maka-Diyos, Maka-Tao, Makakalikasan at Makabansa.']
Predicate: motto

Triple: ['__subject__ Philippines __predicate__ officialLanguage __object__ Filipino_language']
Text: ['Filipino language is the official language in the Philippines.']
Predicate: officialLanguage

Triple: ['__subject__ Philippines __predicate__ officialLanguage __object__ Philippine_English']
Text: ['Philippine English is the official language of the Philippines.']
Predicate: officialLanguage

Triple: ['__subject__ Philippines __predicate__ timeZone __object__ Philippine_Standard_Time']
Text: ['The time zone used by the Philippines is Philippine Standard time.']
Predicate: timeZone

Triple: ['__subject__ Quezon City __predicate__ areaTotal __object__ 165.33']
Text: ['Quezon City has a total area of 165.33.']
Predicate: areaTotal

Triple: ['__subject__ Quezon City __predicate__ leaderParty __object__ Liberal_Party_(Philippines)']
Text: ['The leader party of Quezon City is the Liberal Party.']
Predicate: leaderParty

Triple: ['__subject__ Quezon City __predicate__ type __object__ Cities_of_the_Philippines']
Text: ['Quezon City is one of the cities in the Philippines.']
Predicate: type

Triple: ['__subject__ Swords, Dublin __predicate__ areaUrban __object__ 11.35']
Text: ['Swords, Dublin has an urban area of 11.35 square kilometres.']
Predicate: areaUrban

Triple: ['__subject__ Swords, Dublin __predicate__ isPartOf __object__ Leinster']
Text: ['Swords, Dublin is part of Leinster.']
Predicate: isPartOf

Triple: ['__subject__ Swords, Dublin __predicate__ part __object__ Donabate']
Text: ['Donabate is part of Swords, Dublin.']
Predicate: part

Triple: ['__subject__ Swords, Dublin __predicate__ part __object__ Kinsealy']
Text: ['Kinsealy is a part of Swords.']
Predicate: part

Triple: ['__subject__ Trane __predicate__ foundationPlace __object__ La_Crosse,_Wisconsin']
Text: ['The foundation place of Trane is La Crosse, Wisconsin.']
Predicate: foundationPlace

Triple: ['__subject__ Trane __predicate__ foundingDate __object__ 1913-01-01']
Text: ['Trane was founded on 01-01-1913.']
Predicate: foundingDate

Triple: ['__subject__ Trane __predicate__ industry __object__ Building_materials']
Text: ['The Trane industry is building materials.']
Predicate: industry

Triple: ['__subject__ Trane __predicate__ netIncome __object__ 556300000']
Text: ['Trane has a net income of $556,300,000.']
Predicate: netIncome

Triple: ['__subject__ Trane __predicate__ numberOfEmployees __object__ 29000']
Text: ['The number of employees in Trane is 29,000.']
Predicate: numberOfEmployees

Triple: ['__subject__ Trane __predicate__ product __object__ Building_Management_System']
Text: ['Trane makes building management systems.']
Predicate: product

Triple: ['__subject__ Trane __predicate__ product __object__ HVAC']
Text: ['Trane manufactures HVAC.']
Predicate: product

Triple: ['__subject__ Trane __predicate__ revenue __object__ 10264000000']
Text: ['The revenue of Trane is 10264000000.']
Predicate: revenue

Triple: ['__subject__ Trane __predicate__ type __object__ Subsidiary']
Text: ['Trane is a subsidiary company.']
Predicate: type

Triple: ['__subject__ United States __predicate__ areaTotal __object__ 9833516.63  (square kilometres)']
Text: ['The United States covers a total area of 9833516.63 (square kilometres).']
Predicate: areaTotal

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ African-American']
Text: ['African-American is an ethnic grouping in the United States.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ Native_American']
Text: ['Native-American is a United States ethnic grouping.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ White_American']
Text: ['White-American is an ethnic grouping in the United States.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ foundingDate __object__ 1776-07-04']
Text: ['The United States was founded on July 4, 1776.']
Predicate: foundingDate

Triple: ['__subject__ United States __predicate__ governmentType __object__ Federalism']
Text: ['The type of government in the United States is federalism.']
Predicate: governmentType

Triple: ['__subject__ United States __predicate__ leader __object__ Paul_Ryan']
Text: ['Paul Ryan is the leader of the United States.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ leaderTitle __object__ Vice President']
Text: ['Vice President is a United States leadership title.']
Predicate: leaderTitle

Triple: ['__subject__ United States __predicate__ percentageOfAreaWater __object__ 6.97']
Text: ['The total area of the United States covered by water is 6.97 percent.']
Predicate: percentageOfAreaWater

Triple: ['__subject__ Ajoblanco __predicate__ country __object__ Spain']
Text: ['Ajoblanco originates from the country of Spain.']
Predicate: country

Triple: ['__subject__ Ajoblanco __predicate__ ingredient __object__ Almond']
Text: ['Ajoblanco has almond as one of its ingredients.']
Predicate: ingredient

Triple: ['__subject__ Ajoblanco __predicate__ ingredient __object__ Bread']
Text: ['Bread is an ingredient of Ajoblanco.']
Predicate: ingredient

Triple: ['__subject__ Ajoblanco __predicate__ ingredient __object__ Garlic']
Text: ['An ingredient of Ajoblanco is garlic.']
Predicate: ingredient

Triple: ['__subject__ Ajoblanco __predicate__ ingredient __object__ Olive_oil']
Text: ['Olive oil is an ingredient in Ajoblanco.']
Predicate: ingredient

Triple: ['__subject__ Ajoblanco __predicate__ ingredient __object__ Water']
Text: ['Ajoblanco contains water.']
Predicate: ingredient

Triple: ['__subject__ Ajoblanco __predicate__ region __object__ Andalusia']
Text: ['Ajoblanco is a food found in Andalusia.']
Predicate: region

Triple: ['__subject__ Almond __predicate__ division __object__ Flowering_plant']
Text: ['Almond is classed as a flowering plant.']
Predicate: division

Triple: ['__subject__ Almond __predicate__ family __object__ Rosaceae']
Text: ['Almond is part of the Rosaceae family.']
Predicate: family

Triple: ['__subject__ Almond __predicate__ order __object__ Rosales']
Text: ['Almond is one of the members of the Rosales order.']
Predicate: order

Triple: ['__subject__ Almond __predicate__ order __object__ Rosids']
Text: ['Almond is part of the order of Rosids.']
Predicate: order

Triple: ['__subject__ Amatriciana sauce __predicate__ country __object__ Italy']
Text: ['Italy is the country Amatriciana sauce comes from.']
Predicate: country

Triple: ['__subject__ Amatriciana sauce __predicate__ course __object__ Italian_meal_structure']
Text: ['Amatriciana sauce can be found in an Italian meal.']
Predicate: course

Triple: ['__subject__ Amatriciana sauce __predicate__ dishVariation __object__ Onion, garlic, black pepper, chili']
Text: ['A variation of Amatriciana sauce includes onion, garlic, black pepper, and chili.']
Predicate: dishVariation

Triple: ['__subject__ Amatriciana sauce __predicate__ dishVariation __object__ Garlic']
Text: ['Amatriciana sauce can be varied by adding garlic.']
Predicate: dishVariation

Triple: ['__subject__ Amatriciana sauce __predicate__ dishVariation __object__ Onion']
Text: ['Onion is one variation of ingredients in Amatriciana sauce.']
Predicate: dishVariation

Triple: ['__subject__ Amatriciana sauce __predicate__ ingredient __object__ Guanciale']
Text: ['Guanciale is an ingredient of Amatriciana sauce.']
Predicate: ingredient

Triple: ['__subject__ Amatriciana sauce __predicate__ ingredient __object__ Olive_oil']
Text: ['Olive oil is one ingredient in Amatriciana sauce.']
Predicate: ingredient

Triple: ['__subject__ Amatriciana sauce __predicate__ ingredient __object__ Tomato']
Text: ['Amatriciana sauce has tomato as one of its ingredients.']
Predicate: ingredient

Triple: ['__subject__ Amatriciana sauce __predicate__ mainIngredient __object__ Tomatoes, guanciale, cheese, olive oil']
Text: ['Tomatoes, guanciale, cheese, olive oil are the main ingredients of Amatriciana sauce.']
Predicate: mainIngredient

Triple: ['__subject__ Amatriciana sauce __predicate__ region __object__ Lazio']
Text: ['Amatriciana sauce comes from the region of Lazio.']
Predicate: region

Triple: ['__subject__ Andalusia __predicate__ leader __object__ Susana_Díaz']
Text: ['Susana Diaz is a leader of Andalusia.']
Predicate: leader

Triple: ['__subject__ Antioquia Department __predicate__ country __object__ Colombia']
Text: ['The Antioquia Department is found in Colombia.']
Predicate: country

Triple: ['__subject__ Arem-arem __predicate__ country __object__ Indonesia']
Text: ['Arem-arem is a food found in Indonesia.']
Predicate: country

Triple: ['__subject__ Arem-arem __predicate__ course __object__ Main course']
Text: ['Arem-arem can be served as a main course.']
Predicate: course

Triple: ['__subject__ Arem-arem __predicate__ dishVariation __object__ Lemper']
Text: ['Lemper is a dish variation of Arem-Arem.']
Predicate: dishVariation

Triple: ['__subject__ Arem-arem __predicate__ ingredient __object__ Banana_leaf']
Text: ['Banana leaf is an ingredient in Arem arem.']
Predicate: ingredient

Triple: ['__subject__ Arem-arem __predicate__ mainIngredient __object__ compressed rice cooked in banana leaf with vegetables or minced meat fillings']
Text: ['The main ingredients of Arem-arem are compressed rice cooked in banana leaf with vegetables or minced meat fillings.']
Predicate: mainIngredient

Triple: ['__subject__ Arem-arem __predicate__ region __object__ Javanese_cuisine']
Text: ['Arem-arem is a dish of Javanese cuisine.']
Predicate: region

Triple: ['__subject__ Arrabbiata sauce __predicate__ country __object__ Italy']
Text: ['Arrabbiata sauce can be found in Italy.']
Predicate: country

Triple: ['__subject__ Arrabbiata sauce __predicate__ dishVariation __object__ Basil']
Text: ['Arrabbiata sauce has basil as a variation.']
Predicate: dishVariation

Triple: ['__subject__ Arrabbiata sauce __predicate__ dishVariation __object__ Oregano']
Text: ['Oregano is one of the ingredients that can be used in a variation of Arrabbiata sauce.']
Predicate: dishVariation

Triple: ['__subject__ Arrabbiata sauce __predicate__ ingredient __object__ Garlic']
Text: ['Garlic is an ingredient in arrabbiata sauce.']
Predicate: ingredient

Triple: ['__subject__ Arrabbiata sauce __predicate__ ingredient __object__ Olive_oil']
Text: ['Olive oil is an ingredient in Arrabbiata sauce.']
Predicate: ingredient

Triple: ['__subject__ Arrabbiata sauce __predicate__ ingredient __object__ Tomato']
Text: ['Tomato is an ingredient in Arrabbiata sauce.']
Predicate: ingredient

Triple: ['__subject__ Arrabbiata sauce __predicate__ region __object__ Rome']
Text: ['Arrabbiata sauce originates from the region of Rome.']
Predicate: region

Triple: ['__subject__ Arròs negre __predicate__ country __object__ Spain']
Text: ['Arròs negre is a traditional dish from Spain.']
Predicate: country

Triple: ['__subject__ Arròs negre __predicate__ ingredient __object__ Cephalopod_ink']
Text: ['Cephalopod ink is an ingredient of Arròs negre.']
Predicate: ingredient

Triple: ['__subject__ Arròs negre __predicate__ ingredient __object__ Cubanelle']
Text: ['Cubanelle is an ingredient in Arros negre.']
Predicate: ingredient

Triple: ['__subject__ Arròs negre __predicate__ mainIngredient __object__ White rice, cuttlefish or squid, cephalopod ink, cubanelle peppers']
Text: ['The main ingredients in arròs negre are white rice, cuttlefish or squid, cephalopod ink and cubanelle peppers.']
Predicate: mainIngredient

Triple: ['__subject__ Asam pedas __predicate__ alternativeName __object__ Asam padeh']
Text: ['The alternative name for asam pedas is asam padeh.']
Predicate: alternativeName

Triple: ['__subject__ Asam pedas __predicate__ country __object__ Indonesia and Malaysia']
Text: ['Asam pedas comes from the countries of Indonesia and Malaysia.']
Predicate: country

Triple: ['__subject__ Asam pedas __predicate__ country __object__ Indonesia']
Text: ['Indonesia is the country Asam pedas comes from.']
Predicate: country

Triple: ['__subject__ Asam pedas __predicate__ creatorOfDish __object__ Malay_cuisine']
Text: ['Asam pedas is a dish that was created within Malay cuisine.']
Predicate: creatorOfDish

Triple: ['__subject__ Asam pedas __predicate__ creatorOfDish __object__ Padang_cuisine']
Text: ['Padang cuisine has resulted in the creation of the dish Asam pedas.']
Predicate: creatorOfDish

Triple: ['__subject__ Asam pedas __predicate__ mainIngredient __object__ Fish cooked in sour and hot sauce']
Text: ['The main ingredients of Asam pedas are fish cooked in sour and hot sauce.']
Predicate: mainIngredient

Triple: ['__subject__ Asam pedas __predicate__ region __object__ Sumatra and Malay Peninsula']
Text: ['Asam pedas is found in the region of Sumatra and Malay peninsula.']
Predicate: region

Triple: ['__subject__ Asam pedas __predicate__ region __object__ Malay_Peninsula']
Text: ['Asam pedas is a food found in the Malay Peninsula.']
Predicate: region

Triple: ['__subject__ Asam pedas __predicate__ region __object__ Sumatra']
Text: ['Asam pedas is a dish from Sumatra.']
Predicate: region

Triple: ['__subject__ Avocado __predicate__ family __object__ Lauraceae']
Text: ['The avocado is a member of the Lauraceae family.']
Predicate: family

Triple: ['__subject__ Avocado __predicate__ order __object__ Laurales']
Text: ['Avocado is under the order of laurales.']
Predicate: order

Triple: ['__subject__ Ayam penyet __predicate__ country __object__ Indonesia']
Text: ['Ayam penyet is from Indonesia.']
Predicate: country

Triple: ['__subject__ Ayam penyet __predicate__ country __object__ Java']
Text: ['Ayam penyet is a food found in Java.']
Predicate: country

Triple: ['__subject__ Ayam penyet __predicate__ ingredient __object__ Fried_chicken']
Text: ['Fried chicken is an ingredient in Ayam penyet.']
Predicate: ingredient

Triple: ['__subject__ Ayam penyet __predicate__ mainIngredient __object__ Squeezed or smashed fried chicken served with sambal']
Text: ['The main ingredients of Ayam penyet are "squeezed" or "smashed" chicken served with sambal.']
Predicate: mainIngredient

Triple: ['__subject__ Ayam penyet __predicate__ region __object__ Nationwide, also can be found in Malaysia and Singapore']
Text: ['Ayam penyet can be found nationwide and also in Malaysia and Singapore.']
Predicate: region

Triple: ['__subject__ Ayam penyet __predicate__ region __object__ Malaysia']
Text: ['Ayam penyet comes from the region of Malaysia.']
Predicate: region

Triple: ['__subject__ BLT __predicate__ dishVariation __object__ Club_sandwich']
Text: ['The BLT is a variation on the club sandwich.']
Predicate: dishVariation

Triple: ['__subject__ BLT __predicate__ ingredient __object__ Lettuce']
Text: ['One of the ingredients of the BLT sandwich is Lettuce.']
Predicate: ingredient

Triple: ['__subject__ Bacon Explosion __predicate__ country __object__ United_States']
Text: ['The country Bacon Explosion comes from is the United States.']
Predicate: country

Triple: ['__subject__ Bacon Explosion __predicate__ course __object__ Main course']
Text: ['Bacon Explosion is a main course.']
Predicate: course

Triple: ['__subject__ Bacon Explosion __predicate__ ingredient __object__ Bacon']
Text: ['Bacon is an ingredient in a Bacon Explosion.']
Predicate: ingredient

Triple: ['__subject__ Bacon Explosion __predicate__ ingredient __object__ Sausage']
Text: ['An ingredient of a bacon explosion is sausage.']
Predicate: ingredient

Triple: ['__subject__ Bacon Explosion __predicate__ mainIngredient __object__ Bacon,sausage']
Text: ['The main ingredients in a bacon explosion are bacon and sausage.']
Predicate: mainIngredient

Triple: ['__subject__ Bacon Explosion __predicate__ mainIngredient __object__ Bacon']
Text: ['The main ingredient in a Bacon Explosion is bacon.']
Predicate: mainIngredient

Triple: ['__subject__ Bacon Explosion __predicate__ mainIngredient __object__ Sausage']
Text: ['Sausage is a main ingredient of Bacon Explosion.']
Predicate: mainIngredient

Triple: ['__subject__ Bacon Explosion __predicate__ region __object__ Kansas_City_metropolitan_area']
Text: ['Bacon Explosion is from the Kansas City metropolitan area.']
Predicate: region

Triple: ["__subject__ Bacon sandwich __predicate__ alternativeName __object__ Bacon butty, bacon sarnie, rasher sandwich, bacon sanger, piece 'n bacon, bacon cob, bacon barm, bacon muffin"]
Text: ["The bacon sandwich has different names including: Bacon butty, bacon sarnie, rasher sandwich, bacon sanger, piece 'n bacon, bacon cob, bacon barm and bacon muffin."]
Predicate: alternativeName

Triple: ['__subject__ Bacon sandwich __predicate__ country __object__ United_Kingdom']
Text: ['Bacon sandwich is a dish from the United Kingdom.']
Predicate: country

Triple: ['__subject__ Bacon sandwich __predicate__ dishVariation __object__ BLT']
Text: ['A variation of a bacon sandwich is the BLT.']
Predicate: dishVariation

Triple: ['__subject__ Bacon sandwich __predicate__ ingredient __object__ Bacon']
Text: ['A bacon sandwich includes the ingredient bacon.']
Predicate: ingredient

Triple: ['__subject__ Bacon sandwich __predicate__ ingredient __object__ Bread']
Text: ['An ingredient in a bacon sandwich is bread.']
Predicate: ingredient

Triple: ['__subject__ Bacon sandwich __predicate__ ingredient __object__ Brown_sauce']
Text: ['An ingredient in a bacon sandwich is brown sauce.']
Predicate: ingredient

Triple: ['__subject__ Bacon sandwich __predicate__ ingredient __object__ Condiment']
Text: ['Condiments are an ingredient in a bacon sandwich.']
Predicate: ingredient

Triple: ['__subject__ Bacon sandwich __predicate__ ingredient __object__ Ketchup']
Text: ['Ketchup can be an ingredient in a bacon sandwich.']
Predicate: ingredient

Triple: ['__subject__ Bacon sandwich __predicate__ mainIngredient __object__ Bread and bacon, with a condiment, often ketchup or brown sauce']
Text: ['The main ingredients of a bacon sandwich are bread and bacon and a condiment, often ketchup or brown sauce.']
Predicate: mainIngredient

Triple: ['__subject__ Baked Alaska __predicate__ country __object__ France, United States or China']
Text: ['Baked Alaska is thought to have originated in the United States, France or China.']
Predicate: country

Triple: ['__subject__ Baked Alaska __predicate__ country __object__ China']
Text: ['Baked Alaska is a dish in China.']
Predicate: country

Triple: ['__subject__ Baked Alaska __predicate__ country __object__ France']
Text: ['Baked Alaska is from the country of France.']
Predicate: country

Triple: ['__subject__ Baked Alaska __predicate__ country __object__ United_States']
Text: ['Baked Alaska is a dish from the United States.']
Predicate: country

Triple: ['__subject__ Baked Alaska __predicate__ ingredient __object__ Christmas_pudding']
Text: ['Christmas pudding is an ingredient in Baked Alaska.']
Predicate: ingredient

Triple: ['__subject__ Baked Alaska __predicate__ ingredient __object__ Ice_cream']
Text: ['Ice cream is an ingredient of Baked Alaska.']
Predicate: ingredient

Triple: ['__subject__ Baked Alaska __predicate__ ingredient __object__ Meringue']
Text: ['Meringue is an ingredient of a Baked Alaska.']
Predicate: ingredient

Triple: ['__subject__ Baked Alaska __predicate__ ingredient __object__ Sponge_cake']
Text: ['Sponge cake is an ingredient of Baked Alaska.']
Predicate: ingredient

Triple: ['__subject__ Baked Alaska __predicate__ mainIngredient __object__ Meringue, ice cream, sponge cake or Christmas pudding']
Text: ['Meringue, ice cream, sponge cake or Christmas pudding are the main ingredients of Baked Alaska.']
Predicate: mainIngredient

Triple: ['__subject__ Baked Alaska __predicate__ region __object__ Paris, New York or Hong Kong']
Text: ['Hong Kong or New York or Paris are the regions where Baked Alaska is found.']
Predicate: region

Triple: ['__subject__ Baked Alaska __predicate__ region __object__ New_York']
Text: ['Baked Alaska comes from the region of New York.']
Predicate: region

Triple: ['__subject__ Bakewell pudding __predicate__ course __object__ Dessert']
Text: ['Bakewell pudding is a dessert.']
Predicate: course

Triple: ['__subject__ Bakewell pudding __predicate__ creator __object__ Rutland Arms, Bakewell, in 1820']
Text: ['Bakewell pudding was created in 1820 at the Rutland Arms, Bakewell.']
Predicate: creator

Triple: ['__subject__ Bakewell pudding __predicate__ dishVariation __object__ Bakewell_tart']
Text: ['A variant of bakewell pudding is bakewell tart.']
Predicate: dishVariation

Triple: ['__subject__ Bakewell pudding __predicate__ mainIngredient __object__ Ground almond, jam, butter, eggs']
Text: ['Some main ingredients in Bakewell pudding are ground almonds, jam, butter and eggs.']
Predicate: mainIngredient

Triple: ['__subject__ Bakewell pudding __predicate__ region __object__ Derbyshire_Dales']
Text: ['Bakewell pudding is from the Derbyshire Dales region.']
Predicate: region

Triple: ['__subject__ Bakewell pudding __predicate__ servingTemperature __object__ Warm (freshly baked) or cold']
Text: ['Bakewell pudding can be served warm (freshly baked) or cold.']
Predicate: servingTemperature

Triple: ['__subject__ Bakewell tart __predicate__ ingredient __object__ Fruit_preserves']
Text: ['Fruit preserves are an ingredient in the bakewell tart.']
Predicate: ingredient

Triple: ['__subject__ Bakewell tart __predicate__ ingredient __object__ Shortcrust_pastry']
Text: ['An ingredient of bakewell tart is shortcrust pastry.']
Predicate: ingredient

Triple: ['__subject__ Bakewell tart __predicate__ region __object__ Derbyshire_Dales']
Text: ['Bakewell tart comes from the Derbyshire Dales region.']
Predicate: region

Triple: ['__subject__ Bakso __predicate__ country __object__ Chinese_cuisine']
Text: ['Bakso is from the Chinese cuisine.']
Predicate: country

Triple: ['__subject__ Bakso __predicate__ country __object__ Indonesia']
Text: ['Indonesia is the country Bakso comes from.']
Predicate: country

Triple: ['__subject__ Bakso __predicate__ ingredient __object__ Beef']
Text: ['Beef is an ingredient of Bakso.']
Predicate: ingredient

Triple: ['__subject__ Bakso __predicate__ ingredient __object__ Celery']
Text: ['Celery is an ingredient of Bakso.']
Predicate: ingredient

Triple: ['__subject__ Bakso __predicate__ ingredient __object__ Ground_beef']
Text: ['Ground beef is an ingredient in Bakso.']
Predicate: ingredient

Triple: ['__subject__ Bakso __predicate__ ingredient __object__ Tapioca']
Text: ['Tapioca is an ingredient in bakso.']
Predicate: ingredient

Triple: ['__subject__ Bakso __predicate__ mainIngredient __object__ Ground beef, tapioca, noodle, rice vermicelli, beef broth, kailan, celery, salted vegetables, fried shallots']
Text: ['Ground beef, tapioca, noodle, rice vermicelli, beef broth, kailan, celery, salted vegetables, fried shallots are the main ingredients of Bakso.']
Predicate: mainIngredient

Triple: ['__subject__ Bakso __predicate__ region __object__ Nationwide in Indonesia, also popular in neighboring Southeast Asian countries']
Text: ['Bakso is popular in the Indonesian region and also in the neighbouring Southeast Asian countries.']
Predicate: region

Triple: ['__subject__ Bakso __predicate__ region __object__ Indonesia']
Text: ['Bakso is a food found in Indonesia.']
Predicate: region

Triple: ['__subject__ Bandeja paisa __predicate__ ingredient __object__ Arepa']
Text: ['Arepa is an ingredient of Bandeja paisa.']
Predicate: ingredient

Triple: ['__subject__ Bandeja paisa __predicate__ ingredient __object__ Avocado']
Text: ['Avocado is one of the ingredients in the dish Bandeja paisa.']
Predicate: ingredient

Triple: ['__subject__ Bandeja paisa __predicate__ ingredient __object__ Black_pudding']
Text: ['Black pudding is an ingredient in Bandeja paisa.']
Predicate: ingredient

Triple: ['__subject__ Bandeja paisa __predicate__ ingredient __object__ Cooking_plantain']
Text: ['Plantain is one of the ingredients in the dish Bandeja paisa.']
Predicate: ingredient

Triple: ['__subject__ Bandeja paisa __predicate__ ingredient __object__ Fried_egg']
Text: ['Fried egg is an ingredient of Bandeja paisa.']
Predicate: ingredient

Triple: ['__subject__ Bandeja paisa __predicate__ ingredient __object__ Ground_meat']
Text: ['Ground meat is an ingredient in bandeja paisa.']
Predicate: ingredient

Triple: ['__subject__ Bandeja paisa __predicate__ ingredient __object__ Hogao']
Text: ['Hogao is an ingredient of Bandeja paisa.']
Predicate: ingredient

Triple: ['__subject__ Bandeja paisa __predicate__ ingredient __object__ Kidney_bean']
Text: ['The kidney bean is an ingredient in Bandeja paisa.']
Predicate: ingredient

Triple: ['__subject__ Bandeja paisa __predicate__ ingredient __object__ Lemon']
Text: ['Lemon is an ingredient of Bandeja paisa.']
Predicate: ingredient

Triple: ['__subject__ Bandeja paisa __predicate__ ingredient __object__ Pork_belly']
Text: ['Pork belly is an ingredient in the dish Bandeja paisa.']
Predicate: ingredient

Triple: ['__subject__ Bandeja paisa __predicate__ ingredient __object__ Rice']
Text: ['Rice is an ingredient in bandeja paisa.']
Predicate: ingredient

Triple: ['__subject__ Bandeja paisa __predicate__ mainIngredient __object__ red beans, pork belly, white rice, ground meat, chicharon, fried egg, plantain (patacones), chorizo, arepa, hogao sauce, black pudding (morcilla), avocado and lemon']
Text: ['The main ingredients in bandeja paisa are red beans, pork belly, white rice, ground meat, chicharon, fried egg, plantain (patacones), chorizo, arepa, hogao sauce, black pudding (morcilla), avocado and lemon.']
Predicate: mainIngredient

Triple: ['__subject__ Bandeja paisa __predicate__ region __object__ Antioquia_Department']
Text: ['Bandeja paisa is found in the Antioquia Department.']
Predicate: region

Triple: ['__subject__ Barny Cakes __predicate__ carbohydrate __object__ 18.0 g']
Text: ['Barny cakes have 18 grams of carbs.']
Predicate: carbohydrate

Triple: ['__subject__ Barny Cakes __predicate__ country __object__ France']
Text: ['The country Barny Cakes come from is France.']
Predicate: country

Triple: ['__subject__ Barny Cakes __predicate__ dishVariation __object__ Apple']
Text: ['Barny cakes can be made with apple.']
Predicate: dishVariation

Triple: ['__subject__ Barny Cakes __predicate__ dishVariation __object__ Milk']
Text: ['One dish variation called Barny Cakes is the use of milk in the recipe.']
Predicate: dishVariation

Triple: ['__subject__ Barny Cakes __predicate__ dishVariation __object__ Strawberry']
Text: ['Strawberries can be added to barny cakes.']
Predicate: dishVariation

Triple: ['__subject__ Barny Cakes __predicate__ fat __object__ 4.8 g']
Text: ['Barny cakes contain 4.8 g of fat.']
Predicate: fat

Triple: ['__subject__ Barny Cakes __predicate__ ingredient __object__ Sponge_cake']
Text: ['Barny cakes are made with sponge cake.']
Predicate: ingredient

Triple: ['__subject__ Barny Cakes __predicate__ year __object__ 1999']
Text: ['Barny cakes were invented in 1999.']
Predicate: year

Triple: ['__subject__ Batagor __predicate__ country __object__ Indonesia']
Text: ['Batagor comes from the country of Indonesia.']
Predicate: country

Triple: ['__subject__ Batagor __predicate__ dishVariation __object__ Siomay']
Text: ['Batagor is a variation of the Siomay dish.']
Predicate: dishVariation

Triple: ['__subject__ Batagor __predicate__ ingredient __object__ Peanut_sauce']
Text: ['Peanut sauce is an ingredient of batagor.']
Predicate: ingredient

Triple: ['__subject__ Batagor __predicate__ servingTemperature __object__ hot']
Text: ['Batagor should be served hot.']
Predicate: servingTemperature

Triple: ['__subject__ Batchoy __predicate__ course __object__ Soup']
Text: ['Batchoy is a dish served as a soup course.']
Predicate: course

Triple: ['__subject__ Batchoy __predicate__ ingredient __object__ Beef']
Text: ['Beef is an ingredient of Batchoy.']
Predicate: ingredient

Triple: ['__subject__ Batchoy __predicate__ ingredient __object__ Noodle']
Text: ['Noodles are an ingredient in batchoy.']
Predicate: ingredient

Triple: ['__subject__ Batchoy __predicate__ ingredient __object__ Pork']
Text: ['Pork is an ingredient of Batchoy.']
Predicate: ingredient

Triple: ['__subject__ Batchoy __predicate__ mainIngredient __object__ noodles, pork organs, vegetables, chicken, shrimp, beef']
Text: ['The main ingredients of batchoy are noodles, pork organs, vegetables, chicken, shrimp, and beef.']
Predicate: mainIngredient

Triple: ['__subject__ Batchoy __predicate__ region __object__ La_Paz,_Iloilo_City']
Text: ['Batchoy is a food found in La Paz, Iloilo City.']
Predicate: region

Triple: ['__subject__ Beef kway teow __predicate__ country __object__ Singapore and Indonesia']
Text: ['Beef kway teow is found in the countries of Indonesia and Singapore.']
Predicate: country

Triple: ['__subject__ Beef kway teow __predicate__ country __object__ Indonesia']
Text: ['Beef kway teow is a dish in Indonesia.']
Predicate: country

Triple: ['__subject__ Beef kway teow __predicate__ country __object__ Singapore']
Text: ['Beef kway teow is a dish from the country of Singapore.']
Predicate: country

Triple: ['__subject__ Beef kway teow __predicate__ ingredient __object__ Oyster_sauce']
Text: ['Oyster sauce is an ingredient in Beef kway teow.']
Predicate: ingredient

Triple: ['__subject__ Beef kway teow __predicate__ ingredient __object__ Palm_sugar']
Text: ['Palm sugar is an ingredient in beef kway teow.']
Predicate: ingredient

Triple: ['__subject__ Beef kway teow __predicate__ ingredient __object__ Sesame_oil']
Text: ['Sesame oil is an ingredient in beef kway teow.']
Predicate: ingredient

Triple: ['__subject__ Beef kway teow __predicate__ mainIngredient __object__ Kway teow, beef tender loin, gula Melaka, sliced, dried black beans, garlic, dark soy sauce, lengkuas, oyster sauce, soya sauce, chilli and sesame oil']
Text: ['Kway teow, beef tender loin, gula Melaka, sliced, dried black beans, garlic, dark soy sauce, lengkuas, oyster sauce, soya sauce, chilli and sesame oil are the main ingredients of Beef kway teow.']
Predicate: mainIngredient

Triple: ['__subject__ Beef kway teow __predicate__ region __object__ Nationwide in Singapore and Indonesia']
Text: ['Beef kway teow is a dish that is popular nationwide in Singapore and Indonesia.']
Predicate: region

Triple: ['__subject__ Beef kway teow __predicate__ region __object__ Singapore']
Text: ['Beef kway teow comes from the Singapore region.']
Predicate: region

Triple: ['__subject__ Bhajji __predicate__ country __object__ India']
Text: ['Bhajji comes from the country India.']
Predicate: country

Triple: ['__subject__ Bhajji __predicate__ ingredient __object__ Gram_flour']
Text: ['Gram flour is an ingredient in Bhajji.']
Predicate: ingredient

Triple: ['__subject__ Bhajji __predicate__ ingredient __object__ Vegetable']
Text: ['Bhajji includes the ingredient vegetables.']
Predicate: ingredient

Triple: ['__subject__ Bhajji __predicate__ mainIngredient __object__ Gram flour, vegetables']
Text: ['The main ingredients in Bhajji are gram flour and vegetables.']
Predicate: mainIngredient

Triple: ['__subject__ Bhajji __predicate__ region __object__ Karnataka']
Text: ['Bhajji are found in the region of Karnataka.']
Predicate: region

Triple: ['__subject__ Bhajji __predicate__ related __object__ Pakora']
Text: ['The dish bhajji is related to pakora.']
Predicate: related

Triple: ['__subject__ Bhajji __predicate__ similarDish __object__ Pakora and other fritters made from wheat or corn flour']
Text: ['Bhajji is a dish similar to pakora and other fritters made from wheat or corn flour.']
Predicate: similarDish

Triple: ['__subject__ Binignit __predicate__ country __object__ Philippines']
Text: ['The country Binignit comes from is the Philippines.']
Predicate: country

Triple: ['__subject__ Binignit __predicate__ course __object__ Dessert']
Text: ['Binignit should be served as the dessert course.']
Predicate: course

Triple: ['__subject__ Binignit __predicate__ ingredient __object__ Banana']
Text: ['Banana is an ingredient in binignit.']
Predicate: ingredient

Triple: ['__subject__ Binignit __predicate__ ingredient __object__ Coconut_milk']
Text: ['Coconut milk is an ingredient of Binignit.']
Predicate: ingredient

Triple: ['__subject__ Binignit __predicate__ ingredient __object__ Sago']
Text: ['Sago is an ingredient of Binignit.']
Predicate: ingredient

Triple: ['__subject__ Binignit __predicate__ ingredient __object__ Sweet_potato']
Text: ['Sweet potato is and ingredient in Binignit.']
Predicate: ingredient

Triple: ['__subject__ Binignit __predicate__ mainIngredient __object__ Banana']
Text: ['One of the main ingredients in binignit is banana.']
Predicate: mainIngredient

Triple: ['__subject__ Binignit __predicate__ mainIngredient __object__ Coconut_milk']
Text: ['One of the main ingredients of binignit is coconut milk.']
Predicate: mainIngredient

Triple: ['__subject__ Binignit __predicate__ mainIngredient __object__ Sago']
Text: ['One of the main ingredients in Binignit is sago.']
Predicate: mainIngredient

Triple: ['__subject__ Binignit __predicate__ mainIngredient __object__ Sweet_potato']
Text: ['The main ingredients of binignit are sweet potatoes.']
Predicate: mainIngredient

Triple: ['__subject__ Binignit __predicate__ mainIngredient __object__ Taro']
Text: ['Taro is a main ingredient of Binignit.']
Predicate: mainIngredient

Triple: ['__subject__ Binignit __predicate__ region __object__ Mindanao']
Text: ['Binignit comes from the region Mindanao.']
Predicate: region

Triple: ['__subject__ Bionico __predicate__ country __object__ Mexico']
Text: ['Bionico is a food found in Mexico.']
Predicate: country

Triple: ['__subject__ Bionico __predicate__ course __object__ Dessert']
Text: ['Bionico is served at the dessert course.']
Predicate: course

Triple: ['__subject__ Bionico __predicate__ dishVariation __object__ Honey']
Text: ['Honey can be used as a variation in the dish Bionico.']
Predicate: dishVariation

Triple: ['__subject__ Bionico __predicate__ ingredient __object__ Condensed_milk']
Text: ['Condensed milk is an ingredient of Bionico.']
Predicate: ingredient

Triple: ['__subject__ Bionico __predicate__ ingredient __object__ Granola']
Text: ['Bionico requires granola as one of its ingredients.']
Predicate: ingredient

Triple: ['__subject__ Bionico __predicate__ ingredient __object__ Raisin']
Text: ['Bionico contains raisins.']
Predicate: ingredient

Triple: ['__subject__ Bionico __predicate__ ingredient __object__ Sour_cream']
Text: ['Sour cream is an ingredient of Bionico.']
Predicate: ingredient

Triple: ['__subject__ Bionico __predicate__ mainIngredient __object__ Chopped Fruits, Sour Cream, Condensed Milk, Granola, Shredded Coconut, Raisins']
Text: ['Sour cream, chopped fruits, condensed milk, granola, raisins and shredded coconut are the main ingredients in Bionico.']
Predicate: mainIngredient

Triple: ['__subject__ Bionico __predicate__ region __object__ Guadalajara']
Text: ['Bionico can be found in Guadalajara.']
Predicate: region

Triple: ['__subject__ Catalonia __predicate__ leader __object__ Carles_Puigdemont']
Text: ['The leader of Catalonia is Carles Puigdemont.']
Predicate: leader

Triple: ['__subject__ Catalonia __predicate__ leader __object__ Parliament_of_Catalonia']
Text: ['Catalonia is led by the Parliament of Catalonia.']
Predicate: leader

Triple: ['__subject__ Celery __predicate__ family __object__ Apiaceae']
Text: ['Celery is in the family of Apiaceae.']
Predicate: family

Triple: ['__subject__ Celery __predicate__ genus __object__ Apium']
Text: ['Celery is a member of the genus Apium.']
Predicate: genus

Triple: ['__subject__ Chicharrón __predicate__ country __object__ Spain']
Text: ['Chicharrón is a dish traditional in Spain.']
Predicate: country

Triple: ['__subject__ Chicharrón __predicate__ region __object__ Andalusia']
Text: ['Chicharrón is found in the Andalusia region.']
Predicate: region

Triple: ['__subject__ China __predicate__ language __object__ Standard_Chinese']
Text: ['Standard Chinese is the language of China.']
Predicate: language

Triple: ['__subject__ Derbyshire Dales __predicate__ isPartOf __object__ Derbyshire']
Text: ['Derbyshire Dales is found in the County of Derbyshire.']
Predicate: isPartOf

Triple: ['__subject__ Dessert __predicate__ dishVariation __object__ Cookie']
Text: ['Cookie is a type of dessert.']
Predicate: dishVariation

Triple: ['__subject__ Dessert __predicate__ dishVariation __object__ Sandesh_(confectionery)']
Text: ['Sandesh (confectionery) is a dish that can be served as a dessert.']
Predicate: dishVariation

Triple: ['__subject__ France __predicate__ currency __object__ Euro']
Text: ['In France the currency is the Euro.']
Predicate: currency

Triple: ['__subject__ France __predicate__ language __object__ French_language']
Text: ['The French language is spoken in France.']
Predicate: language

Triple: ['__subject__ France __predicate__ leader __object__ Claude_Bartolone']
Text: ['Claude Bartolone is a leader of France.']
Predicate: leader

Triple: ['__subject__ France __predicate__ leader __object__ François_Hollande']
Text: ['The leader of France is Francois Hollande.']
Predicate: leader

Triple: ['__subject__ France __predicate__ leader __object__ Gérard_Larcher']
Text: ['The leader of France is Gérard Larcher.']
Predicate: leader

Triple: ['__subject__ France __predicate__ leader __object__ Manuel_Valls']
Text: ['The leader of France is Manuel Valls.']
Predicate: leader

Triple: ['__subject__ Fried chicken __predicate__ mainIngredient __object__ Chicken']
Text: ['A main ingredient of fried chicken is chicken.']
Predicate: mainIngredient

Triple: ['__subject__ Guadalajara __predicate__ country __object__ Mexico']
Text: ['Guadalajara is in the country of Mexico.']
Predicate: country

Triple: ['__subject__ Hong Kong __predicate__ language __object__ Chinese_language']
Text: ['In Hong Kong, the spoken language is Chinese.']
Predicate: language

Triple: ['__subject__ Hong Kong __predicate__ leader __object__ Carrie_Lam_(politician)']
Text: ['Carrie Lam is a political leader in Hong Kong.']
Predicate: leader

Triple: ['__subject__ India __predicate__ demonym __object__ Indian_people']
Text: ['Indian people are from India.']
Predicate: demonym

Triple: ['__subject__ India __predicate__ leader __object__ Narendra_Modi']
Text: ['Narendra Modi is a leader in India.']
Predicate: leader

Triple: ['__subject__ India __predicate__ leader __object__ T._S._Thakur']
Text: ["T. S. Thakur is India's leader."]
Predicate: leader

Triple: ['__subject__ Indonesia __predicate__ capital __object__ Jakarta']
Text: ['The capital of Indonesia is Jakarta.']
Predicate: capital

Triple: ['__subject__ Indonesia __predicate__ currency __object__ Indonesian_rupiah']
Text: ['In Indonesia the currency is the Indonesian rupiah.']
Predicate: currency

Triple: ['__subject__ Indonesia __predicate__ leader __object__ Joko_Widodo']
Text: ['Joko Widodo is the leader of Indonesia.']
Predicate: leader

Triple: ['__subject__ Italy __predicate__ capital __object__ Rome']
Text: ['Rome is the capital of Italy.']
Predicate: capital

Triple: ['__subject__ Italy __predicate__ language __object__ Italian_language']
Text: ['The spoken language in Italy is Italian.']
Predicate: language

Triple: ['__subject__ Italy __predicate__ leader __object__ Laura_Boldrini']
Text: ['The leader of Italy is Laura Boldrini.']
Predicate: leader

Triple: ['__subject__ Italy __predicate__ leader __object__ Matteo_Renzi']
Text: ['Matteo Renzi is a leader from Italy.']
Predicate: leader

Triple: ['__subject__ Italy __predicate__ leader __object__ Pietro_Grasso']
Text: ['Pietro Grasso is the leader of Italy.']
Predicate: leader

Triple: ['__subject__ Italy __predicate__ leader __object__ Sergio_Mattarella']
Text: ['Sergio Mattarella is a leader in Italy.']
Predicate: leader

Triple: ['__subject__ Jalisco __predicate__ leader __object__ Jesús_Casillas_Romero']
Text: ['The leader of Jalisco is Jesús Casillas Romero.']
Predicate: leader

Triple: ['__subject__ Java __predicate__ ethnicGroup __object__ Javanese_people']
Text: ['The Javanese people are an ethnic group of Java.']
Predicate: ethnicGroup

Triple: ['__subject__ Karnataka __predicate__ leader __object__ Vajubhai_Vala']
Text: ['The leader of Karnataka is Vajubhai Vala.']
Predicate: leader

Triple: ['__subject__ Lemon __predicate__ family __object__ Rutaceae']
Text: ['The lemon belongs to the rutaceae family.']
Predicate: family

Triple: ['__subject__ Lemon __predicate__ genus __object__ Citrus']
Text: ['Lemon is part of genus Citrus.']
Predicate: genus

Triple: ['__subject__ Lemon __predicate__ order __object__ Sapindales']
Text: ['A lemon is included in the order of Sapindales.']
Predicate: order

Triple: ['__subject__ Malaysia __predicate__ capital __object__ Kuala_Lumpur']
Text: ['The capital of Malaysia is Kuala Lumpur.']
Predicate: capital

Triple: ['__subject__ Malaysia __predicate__ capital __object__ Putrajaya']
Text: ['The capital of Malaysia is Putrajaya.']
Predicate: capital

Triple: ['__subject__ Malaysia __predicate__ ethnicGroup __object__ Malaysian_Chinese']
Text: ['The Malaysian chinese are an ethnic group from Malaysia.']
Predicate: ethnicGroup

Triple: ['__subject__ Malaysia __predicate__ ethnicGroup __object__ Malaysian_Indian']
Text: ['Malaysian Indian is one of the ethnic groups on Malaysia.']
Predicate: ethnicGroup

Triple: ['__subject__ Malaysia __predicate__ leader __object__ Abdul_Halim_of_Kedah']
Text: ['The leader of Malaysia is Abdul Halim of Kedah.']
Predicate: leader

Triple: ['__subject__ Malaysia __predicate__ leader __object__ Abu_Zahar_Ujang']
Text: ['Abu Zahar Ujang is a leader in Malaysia.']
Predicate: leader

Triple: ['__subject__ Malaysia __predicate__ leader __object__ Arifin_Zakaria']
Text: ['Arifin Zakaria is the name of the leader of Malaysia.']
Predicate: leader

Triple: ['__subject__ Malaysia __predicate__ leader __object__ Najib_Razak']
Text: ['Najib Razak is the leader of Malaysia.']
Predicate: leader

Triple: ['__subject__ Mexico __predicate__ currency __object__ Mexican_peso']
Text: ['The currency in Mexico is the peso.']
Predicate: currency

Triple: ['__subject__ Mexico __predicate__ language __object__ Mexican_Spanish']
Text: ['In Mexico one of the languages spoken is Mexican Spanish.']
Predicate: language

Triple: ['__subject__ Mexico __predicate__ leader __object__ Enrique_Peña_Nieto']
Text: ['The leader of Mexico is Enrique Peña Nieto.']
Predicate: leader

Triple: ['__subject__ Mondelez International __predicate__ foundationPlace __object__ Chicago']
Text: ['Mondelez International was founded in Chicago.']
Predicate: foundationPlace

Triple: ['__subject__ New York __predicate__ language __object__ Arabic']
Text: ['Arabic is one of the languages that is spoken in New York.']
Predicate: language

Triple: ['__subject__ New York __predicate__ language __object__ French_language']
Text: ['The French Language can be heard in New York.']
Predicate: language

Triple: ['__subject__ Pakora __predicate__ dishVariation __object__ Cauliflower']
Text: ['As a dish variation on a pakora, cauliflower can be used.']
Predicate: dishVariation

Triple: ['__subject__ Pakora __predicate__ dishVariation __object__ Paneer']
Text: ['Pakora can be varied by using paneer.']
Predicate: dishVariation

Triple: ['__subject__ Philippines __predicate__ ethnicGroup __object__ Chinese_Filipino']
Text: ['The Chinese Filipino is an ethnic group in the Philippines.']
Predicate: ethnicGroup

Triple: ['__subject__ Philippines __predicate__ ethnicGroup __object__ Igorot_people']
Text: ['The Igorot people are an ethnic group in the Philippines.']
Predicate: ethnicGroup

Triple: ['__subject__ Philippines __predicate__ ethnicGroup __object__ Ilocano_people']
Text: ['Ilocano people are an ethnic group from the Philippines.']
Predicate: ethnicGroup

Triple: ['__subject__ Philippines __predicate__ ethnicGroup __object__ Moro_people']
Text: ['The Moro people are an ethnic group in the Philippines.']
Predicate: ethnicGroup

Triple: ['__subject__ Philippines __predicate__ ethnicGroup __object__ Zamboangans']
Text: ['Zamboangans are a group in the Philippines.']
Predicate: ethnicGroup

Triple: ['__subject__ Philippines __predicate__ language __object__ Philippine_English']
Text: ['Philippine English is the language spoken in the Philippines.']
Predicate: language

Triple: ['__subject__ Philippines __predicate__ language __object__ Philippine_Spanish']
Text: ['In the Philippines, the spoken language is Philippine Spanish.']
Predicate: language

Triple: ['__subject__ Philippines __predicate__ officialLanguage __object__ Philippine_English']
Text: ['The official language in the Philippines is Philippine English.']
Predicate: officialLanguage

Triple: ['__subject__ Shumai __predicate__ dishVariation __object__ Siomay']
Text: ['Siomay is a variation on shumai.']
Predicate: dishVariation

Triple: ['__subject__ Shumai __predicate__ ingredient __object__ Shiitake']
Text: ['Shiitake is an ingredient of Shumai.']
Predicate: ingredient

Triple: ['__subject__ Singapore __predicate__ currency __object__ Singapore_dollar']
Text: ['The currency of Singapore is the Singapore dollar.']
Predicate: currency

Triple: ['__subject__ Singapore __predicate__ language __object__ English_language']
Text: ['The English language is spoken in Singapore.']
Predicate: language

Triple: ['__subject__ Singapore __predicate__ language __object__ Standard_Chinese']
Text: ['Standard Chinese is a language spoken in Singapore.']
Predicate: language

Triple: ['__subject__ Singapore __predicate__ leader __object__ Halimah_Yacob']
Text: ['Halimah Yacob is a leader of Singapore.']
Predicate: leader

Triple: ['__subject__ Singapore __predicate__ leader __object__ Tony_Tan']
Text: ['The leader of Singapore is Tony Tan.']
Predicate: leader

Triple: ['__subject__ Siomay __predicate__ dishVariation __object__ Batagor']
Text: ['Batagor and Siomay are variation of the same dish.']
Predicate: dishVariation

Triple: ['__subject__ Spain __predicate__ currency __object__ Euro']
Text: ['Spain uses the euro for its currency.']
Predicate: currency

Triple: ['__subject__ Spain __predicate__ demonym __object__ Spaniards']
Text: ['Spaniards are from Spain.']
Predicate: demonym

Triple: ['__subject__ Spain __predicate__ ethnicGroup __object__ Spaniards']
Text: ['Spaniards are the ethnic group of Spain.']
Predicate: ethnicGroup

Triple: ['__subject__ Spain __predicate__ language __object__ Spanish_language']
Text: ['In Spain the language spoken is the Spanish language.']
Predicate: language

Triple: ['__subject__ Spain __predicate__ leader __object__ Felipe_VI_of_Spain']
Text: ['The leader of Spain is Felipe VI of Spain.']
Predicate: leader

Triple: ['__subject__ Sumatra __predicate__ ethnicGroup __object__ Acehnese_people']
Text: ['One the ethnic groups on Sumatra is the Acehnese people.']
Predicate: ethnicGroup

Triple: ['__subject__ Sumatra __predicate__ ethnicGroup __object__ Batak']
Text: ['Batak is the ethnic group in Sumatra.']
Predicate: ethnicGroup

Triple: ['__subject__ Sumatra __predicate__ ethnicGroup __object__ Minangkabau_people']
Text: ['The Minangkabau people are an ethnic group of Sumatra.']
Predicate: ethnicGroup

Triple: ['__subject__ Sweet potato __predicate__ division __object__ Flowering_plant']
Text: ['Sweet potato belongs to flowering plants.']
Predicate: division

Triple: ['__subject__ Sweet potato __predicate__ order __object__ Solanales']
Text: ['Sweet potato belongs to the Solanales order of plants.']
Predicate: order

Triple: ['__subject__ Tomato __predicate__ division __object__ Flowering_plant']
Text: ['Tomato is part of the flowering plant division.']
Predicate: division

Triple: ['__subject__ Tomato __predicate__ family __object__ Solanaceae']
Text: ['Tomato belongs to the family of solanaceae.']
Predicate: family

Triple: ['__subject__ Tomato __predicate__ genus __object__ Solanum']
Text: ['Tomato belongs to the genus Solanum.']
Predicate: genus

Triple: ['__subject__ Tomato __predicate__ order __object__ Solanales']
Text: ['The tomato is of the order Solanales.']
Predicate: order

Triple: ['__subject__ United Kingdom __predicate__ capital __object__ London']
Text: ['London is the Capital of the United Kingdom.']
Predicate: capital

Triple: ['__subject__ United Kingdom __predicate__ language __object__ English_language']
Text: ['The language of the United Kingdom is the English language.']
Predicate: language

Triple: ['__subject__ United Kingdom __predicate__ leader __object__ Elizabeth_II']
Text: ['Elizabeth II is the leader of the United Kingdom.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ capital __object__ Washington,_D.C.']
Text: ['The capital of the U.S. is Washington, D.C.']
Predicate: capital

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ African_Americans']
Text: ['African Americans are an ethnic group in the United States.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ Asian_Americans']
Text: ['Asian Americans are an ethnic group in the United States.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ White_Americans']
Text: ['White Americans are an ethnic group in the United States.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ language __object__ English_language']
Text: ['The English language is used in the United States.']
Predicate: language

Triple: ['__subject__ United States __predicate__ leader __object__ Barack_Obama']
Text: ['Barack Obama is a leader of the United States.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ leader __object__ Joe_Biden']
Text: ['Joe Biden is a leader of the United States.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ leader __object__ John_Roberts']
Text: ['John Roberts is a leader in the United States.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ leader __object__ Paul_Ryan']
Text: ['Paul Ryan is a leader in United States.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ leaderTitle __object__ President_of_the_United_States']
Text: ['The leader of the United States is called the President.']
Predicate: leaderTitle

Triple: ['__subject__ Valencian Community __predicate__ leader __object__ Ximo_Puig']
Text: ['The leader of the community of Valencia is Ximo Puig.']
Predicate: leader

Triple: ['__subject__ 1955 Dodge __predicate__ alternativeName __object__ Dodge Custom Royal']
Text: ['The 1955 Dodge is also known as the Dodge Custom Royal.']
Predicate: alternativeName

Triple: ['__subject__ 1955 Dodge __predicate__ alternativeName __object__ Dodge Suburban']
Text: ['The 1955 Doge is also called the Dodge Suburban.']
Predicate: alternativeName

Triple: ['__subject__ 1955 Dodge __predicate__ bodyStyle __object__ Convertible']
Text: ['The 1955 Dodge is a convertible.']
Predicate: bodyStyle

Triple: ['__subject__ 1955 Dodge __predicate__ bodyStyle __object__ Hardtop']
Text: ['The 1955 Dodge has a hardtop.']
Predicate: bodyStyle

Triple: ['__subject__ 1955 Dodge __predicate__ bodyStyle __object__ Sedan_(automobile)']
Text: ['The 1955 Dodge has a sedan style body.']
Predicate: bodyStyle

Triple: ['__subject__ 1955 Dodge __predicate__ bodyStyle __object__ Station_wagon']
Text: ['The 1955 Dodge has a station wagon style body.']
Predicate: bodyStyle

Triple: ['__subject__ 1955 Dodge __predicate__ engine __object__ AMC_V8_engine']
Text: ['The 1955 Dodge has an AMC V8 engine.']
Predicate: engine

Triple: ['__subject__ 1955 Dodge __predicate__ engine __object__ Straight-six_engine']
Text: ['The Dodge 1955 has a straight-six engine.']
Predicate: engine

Triple: ['__subject__ 1955 Dodge __predicate__ engine __object__ V8_engine']
Text: ['The 1955 Dodge has a V8 engine.']
Predicate: engine

Triple: ['__subject__ 1955 Dodge __predicate__ manufacturer __object__ Dodge']
Text: ['The 1955 Dodge is manufactured by Dodge.']
Predicate: manufacturer

Triple: ['__subject__ 1955 Dodge __predicate__ relatedMeanOfTransportation __object__ DeSoto_Custom']
Text: ['The 1955 Dodge is related to the DeSoto Custom.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ 1955 Dodge __predicate__ relatedMeanOfTransportation __object__ Plymouth_Plaza']
Text: ['1955 Dodge and Plymouth Plaza are related kinds of transportation.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ 1955 Dodge __predicate__ transmission __object__ 3-speed automatic']
Text: ['The 1955 Dodge has a 3-speed automatic transmission.']
Predicate: transmission

Triple: ['__subject__ 1955 Dodge __predicate__ wheelbase __object__ 120.0 (inches)']
Text: ['The 1955 Dodge has a wheelbase of 120.0 inches.']
Predicate: wheelbase

Triple: ['__subject__ A-Rosa Luna __predicate__ builder __object__ Neptun Werft, Warnemünde,']
Text: ['The A-Rosa Luna was built by Neptun Werft, Warnemunde.']
Predicate: builder

Triple: ['__subject__ A-Rosa Luna __predicate__ builder __object__ Germany']
Text: ['The A-Rosa Luna was built in Germany.']
Predicate: builder

Triple: ['__subject__ A-Rosa Luna __predicate__ builder __object__ Neptun_Werft']
Text: ['Neptun Werft built the A-Rosa Luna.']
Predicate: builder

Triple: ['__subject__ A-Rosa Luna __predicate__ builder __object__ Rostock']
Text: ['The A-Rosa Luna was built in Rostock.']
Predicate: builder

Triple: ['__subject__ A-Rosa Luna __predicate__ completionDate __object__ 2005-04-06']
Text: ['The A-Rosa Luna was completed on April 6, 2005.']
Predicate: completionDate

Triple: ['__subject__ A-Rosa Luna __predicate__ length __object__ 125800.0 (millimetres)']
Text: ['The A-Rosa Luna is 125800.0 millimetres in length.']
Predicate: length

Triple: ['__subject__ A-Rosa Luna __predicate__ powerType __object__ MTU_Friedrichshafen']
Text: ['The A-Rosa Luna is powered by a MTU Friedrichshafen engine.']
Predicate: powerType

Triple: ['__subject__ A-Rosa Luna __predicate__ shipClass __object__ Cruise_ship']
Text: ['The A-Rosa Luna is classed as a cruise ship.']
Predicate: shipClass

Triple: ['__subject__ A-Rosa Luna __predicate__ shipDisplacement __object__ 1850.0 (tonnes)']
Text: ['The ship A-Rosa Luna weighs 1850 tonnes.']
Predicate: shipDisplacement

Triple: ['__subject__ A-Rosa Luna __predicate__ shipLaunch __object__ 2004-12-16']
Text: ['December 16, 2004 was the launch date for the A-Rosa Luna ship.']
Predicate: shipLaunch

Triple: ['__subject__ A-Rosa Luna __predicate__ shipOrdered __object__ 2004-01-22']
Text: ['The A-Rosa Luna was ordered on the 22nd of January 2004.']
Predicate: shipOrdered

Triple: ['__subject__ A-Rosa Luna __predicate__ shipPower __object__ 2 × MTU 16V 2000 M60 engine']
Text: ['The A-Rosa Luna has a 2 × MTU 16V 2000 M60 engine.']
Predicate: shipPower

Triple: ['__subject__ A-Rosa Luna __predicate__ topSpeed __object__ 24.0']
Text: ['The A-Rosa Luna has a top speed of 24 km/h.']
Predicate: topSpeed

Triple: ['__subject__ AIDA Cruises __predicate__ location __object__ Germany']
Text: ['AIDA Cruises are located in Germany.']
Predicate: location

Triple: ['__subject__ AIDAluna __predicate__ builder __object__ Meyer_Werft']
Text: ['Meyer Werft was the builder of the AIDAluna.']
Predicate: builder

Triple: ['__subject__ AIDAluna __predicate__ christeningDate __object__ 2009-04-04']
Text: ['The AidAluna christening date is 2009-04-04.']
Predicate: christeningDate

Triple: ['__subject__ AIDAluna __predicate__ length __object__ 252000.0 (millimetres)']
Text: ['The AIDAluna is 252 metres long.']
Predicate: length

Triple: ['__subject__ AIDAluna __predicate__ maidenVoyage __object__ 2009-03-22']
Text: ['AIDAluna had its maiden voyage on the 22nd of March, 2009.']
Predicate: maidenVoyage

Triple: ['__subject__ AIDAluna __predicate__ owner __object__ AIDA_Cruises']
Text: ['The owner of AIDAluna is AIDA Cruises.']
Predicate: owner

Triple: ['__subject__ AIDAluna __predicate__ powerType __object__ Caterpillar_Inc.']
Text: ['AIDAluna is powered by Caterpillar Inc.']
Predicate: powerType

Triple: ['__subject__ AIDAluna __predicate__ shipBeam __object__ 32.2']
Text: ['The AIDAluna has a ship beam of 32.2.']
Predicate: shipBeam

Triple: ['__subject__ AIDAluna __predicate__ shipInService __object__ 2009-03-22']
Text: ['The ship AIDAluna began service on March 22nd 2009.']
Predicate: shipInService

Triple: ['__subject__ AIDAluna __predicate__ status __object__ In service']
Text: ['AIDAluna is in service.']
Predicate: status

Triple: ['__subject__ AIDAluna __predicate__ topSpeed __object__ 40.744']
Text: ['The AIDAluna has a top speed of 40.744.']
Predicate: topSpeed

Triple: ['__subject__ AIDAstella __predicate__ activeYearsStartDate __object__ 2013-03-17']
Text: ['The AIDAstella service began on March 17th 2013.']
Predicate: activeYearsStartDate

Triple: ['__subject__ AIDAstella __predicate__ length __object__ 253260.0 (millimetres)']
Text: ['AIDAstella is 253260.0 millimetres in length.']
Predicate: length

Triple: ['__subject__ AIDAstella __predicate__ owner __object__ Costa_Crociere']
Text: ['Costa Crociere is the owner of the AIDAstella.']
Predicate: owner

Triple: ['__subject__ AIDAstella __predicate__ shipBeam __object__ 32.2']
Text: ['The AIDAstella has a beam of 32.2 m.']
Predicate: shipBeam

Triple: ['__subject__ AIDAstella __predicate__ shipClass __object__ Sphinx-class cruise ship']
Text: ['The AIDAstella is a Sphinx-class cruise ship.']
Predicate: shipClass

Triple: ['__subject__ AIDAstella __predicate__ shipLaidDown __object__ 2008-12-17']
Text: ['The AIDAstella was laid down on 17th December 2008.']
Predicate: shipLaidDown

Triple: ['__subject__ AIDAstella __predicate__ status __object__ In service']
Text: ['The AIDAstella is still in service to this date.']
Predicate: status

Triple: ['__subject__ AIDAstella __predicate__ topSpeed __object__ 38.892']
Text: ['The AIDAstella has a top speed of 38.892.']
Predicate: topSpeed

Triple: ['__subject__ ALCO RS-3 __predicate__ buildDate __object__ May 1950 - August 1956']
Text: ['The ALCO RS-3 was produced between May 1950 and August 1956.']
Predicate: buildDate

Triple: ['__subject__ ALCO RS-3 __predicate__ builder __object__ American_Locomotive_Company']
Text: ['The American Locomotive Company built the ALCO RS-3.']
Predicate: builder

Triple: ['__subject__ ALCO RS-3 __predicate__ builder __object__ Montreal_Locomotive_Works']
Text: ['Montreal Locomotive Works is the builder of the ALCO RS-3.']
Predicate: builder

Triple: ['__subject__ ALCO RS-3 __predicate__ cylinderCount __object__ 12']
Text: ['The ALCO RS-3 has a cylinder count of 12.']
Predicate: cylinderCount

Triple: ['__subject__ ALCO RS-3 __predicate__ engine __object__ V12_engine']
Text: ['The ALCO RS-3 has a V12 engine.']
Predicate: engine

Triple: ['__subject__ ALCO RS-3 __predicate__ length __object__ 17068.8 (millimetres)']
Text: ['The ALCO RS-3 is 17068.8 (millimetres) in length.']
Predicate: length

Triple: ['__subject__ ALCO RS-3 __predicate__ powerType __object__ Diesel-electric_transmission']
Text: ['The ALCO RS-3 has a diesel-electric transmission.']
Predicate: powerType

Triple: ['__subject__ ALCO RS-3 __predicate__ totalProduction __object__ 1418']
Text: ['The total number of ALCO RS-3 made is 1418.']
Predicate: totalProduction

Triple: ['__subject__ ALV X-1 __predicate__ countryOrigin __object__ United_States']
Text: ['The country of origin of the ALV X-1 is the United States.']
Predicate: countryOrigin

Triple: ['__subject__ ALV X-1 __predicate__ diameter __object__ 1.524 (metres)']
Text: ['The diameter of the ALV X-1 is 1.524 metres.']
Predicate: diameter

Triple: ['__subject__ ALV X-1 __predicate__ failedLaunches __object__ 1']
Text: ['The ALV X-1 had 1 launch failure.']
Predicate: failedLaunches

Triple: ['__subject__ ALV X-1 __predicate__ rocketStages __object__ 2']
Text: ['The ALV X-1 has 2 rocket stages.']
Predicate: rocketStages

Triple: ['__subject__ ALV X-1 __predicate__ totalLaunches __object__ 1']
Text: ['The ALV X-1 rocket was launched once.']
Predicate: totalLaunches

Triple: ['__subject__ AMC Matador __predicate__ alternativeName __object__ Rambler Matador']
Text: ['An alternative name for the AMC Matador is the Rambler Matador.']
Predicate: alternativeName

Triple: ['__subject__ AMC Matador __predicate__ alternativeName __object__ VAM Classic']
Text: ['The alternative name for AMC Matador is VAM Classic.']
Predicate: alternativeName

Triple: ['__subject__ AMC Matador __predicate__ assembly __object__ Australia']
Text: ['The AMC matador was assembled in Australia.']
Predicate: assembly

Triple: ['__subject__ AMC Matador __predicate__ assembly __object__ Mexico']
Text: ['The AMC Matador is assembled in Mexico.']
Predicate: assembly

Triple: ['__subject__ AMC Matador __predicate__ assembly __object__ USA']
Text: ['AMC Matador was assembled in the USA.']
Predicate: assembly

Triple: ['__subject__ AMC Matador __predicate__ assembly __object__ Australian_Motor_Industries']
Text: ['The AMC Matador is assembled by the Australian Motor Industries.']
Predicate: assembly

Triple: ['__subject__ AMC Matador __predicate__ assembly __object__ Kenosha,_Wisconsin']
Text: ['The AMC Matador was assembled in Kenosha, Wisconsin.']
Predicate: assembly

Triple: ['__subject__ AMC Matador __predicate__ assembly __object__ Mexico_City']
Text: ['The AMC Matador is assembled in Mexico City.']
Predicate: assembly

Triple: ['__subject__ AMC Matador __predicate__ assembly __object__ Port_Melbourne,_Victoria']
Text: ['The AMC Matador is assembled at Port Melbourne, Victoria.']
Predicate: assembly

Triple: ['__subject__ AMC Matador __predicate__ assembly __object__ Thames,_New_Zealand']
Text: ['The AMC Matador was assembled in Thames, New Zealand.']
Predicate: assembly

Triple: ['__subject__ AMC Matador __predicate__ bodyStyle __object__ Coupé']
Text: ['The AMC Matador has a Coupé style body.']
Predicate: bodyStyle

Triple: ['__subject__ AMC Matador __predicate__ bodyStyle __object__ Hardtop']
Text: ['The AMC Matador has a hardtop.']
Predicate: bodyStyle

Triple: ['__subject__ AMC Matador __predicate__ bodyStyle __object__ Station_wagon']
Text: ['The AMC Matador has a station wagon style body.']
Predicate: bodyStyle

Triple: ['__subject__ AMC Matador __predicate__ class __object__ Full-size_car']
Text: ['The AMC Matador is considered a full-size car.']
Predicate: class

Triple: ['__subject__ AMC Matador __predicate__ class __object__ Mid-size_car']
Text: ['The AMC Matador is classed as a mid-size car.']
Predicate: class

Triple: ['__subject__ AMC Matador __predicate__ designer __object__ Richard_A._Teague']
Text: ['Richard A. Teague designed the AMC Matador.']
Predicate: designer

Triple: ['__subject__ AMC Matador __predicate__ engine __object__ AMC_V8_engine']
Text: ['The AMC Matador has a AMC V8 engine.']
Predicate: engine

Triple: ['__subject__ AMC Matador __predicate__ engine __object__ AMC_straight-6_engine']
Text: ['The AMC Matador has an AMC straight-6 engine.']
Predicate: engine

Triple: ['__subject__ AMC Matador __predicate__ manufacturer __object__ American_Motors']
Text: ['AMC Matador is manufactured by American Motors.']
Predicate: manufacturer

Triple: ['__subject__ AMC Matador __predicate__ modelYears __object__ 1971']
Text: ['1971 is one of the model years of the AMC Matador.']
Predicate: modelYears

Triple: ['__subject__ AMC Matador __predicate__ modelYears __object__ 1974']
Text: ['1974 is one of the model years of the AMC Matador.']
Predicate: modelYears

Triple: ['__subject__ ARA Veinticinco de Mayo (V-2) __predicate__ builder __object__ Cammell_Laird']
Text: ['The ARA Veinticinco de Mayo (V-2) was built by Cammell Laird.']
Predicate: builder

Triple: ['__subject__ ARA Veinticinco de Mayo (V-2) __predicate__ country __object__ Argentina']
Text: ['ARA Veinticinco de Mayo (V-2) derives from Argentina.']
Predicate: country

Triple: ['__subject__ ARA Veinticinco de Mayo (V-2) __predicate__ length __object__ 192000.0 (millimetres)']
Text: ['The ARA Veinticinco de Mayo (V-2) is 192000.0 millimetres long.']
Predicate: length

Triple: ['__subject__ ARA Veinticinco de Mayo (V-2) __predicate__ shipBeam __object__ 24.4']
Text: ["The ARA Veinticinco de Mayo V-2 ship's beam measures 24.4."]
Predicate: shipBeam

Triple: ['__subject__ ARA Veinticinco de Mayo (V-2) __predicate__ status __object__ Provided spare parts for NAeL Minas Geraisand and remainder was scrapped in 2000']
Text: ['The ARA Veinticinco de Mayo (V-2) provided spare parts for NaeL Minas Geraisand and the remainder was scrapped in 2000.']
Predicate: status

Triple: ['__subject__ ARA Veinticinco de Mayo (V-2) __predicate__ status __object__ Sold to Argentina 15 October 1968']
Text: ['ARA Veinticinco de Mayo (V-2) was sold to Argentina 15 October 1968.']
Predicate: status

Triple: ['__subject__ Abarth __predicate__ foundationPlace __object__ Bologna']
Text: ['The Abarth company was founded in Bologna.']
Predicate: foundationPlace

Triple: ['__subject__ Abarth __predicate__ foundationPlace __object__ Italy']
Text: ['Abarth was founded in Italy.']
Predicate: foundationPlace

Triple: ['__subject__ Abarth __predicate__ foundedBy __object__ Carlo_Abarth']
Text: ['Abarth was founded by Carlo Abarth.']
Predicate: foundedBy

Triple: ['__subject__ Abarth 1000 GT Coupé __predicate__ bodyStyle __object__ Two door coupé']
Text: ['Two door coupe is the body style of the Abarth 1000 GT Coupé.']
Predicate: bodyStyle

Triple: ['__subject__ Abarth 1000 GT Coupé __predicate__ bodyStyle __object__ Coupé']
Text: ['The Abarth 1000 GT has a coupe bodystyle.']
Predicate: bodyStyle

Triple: ['__subject__ Abarth 1000 GT Coupé __predicate__ designCompany __object__ Gruppo_Bertone']
Text: ['The Abarth 1000 GT Coupe was designed by Gruppo Bertone.']
Predicate: designCompany

Triple: ['__subject__ Abarth 1000 GT Coupé __predicate__ manufacturer __object__ Abarth']
Text: ['Abarth is the manufacturer of the Abarth 1000 GT Coupé.']
Predicate: manufacturer

Triple: ['__subject__ Abarth 1000 GT Coupé __predicate__ productionStartYear __object__ 1958']
Text: ["The Abarth 1000 GT Coupe 's production started in 1958."]
Predicate: productionStartYear

Triple: ['__subject__ Abarth 1000 GT Coupé __predicate__ wheelbase __object__ 2160.0 (millimetres)']
Text: ['The wheelbase of the Abarth 1000 GT Coupé, is 2160.0 millimetres.']
Predicate: wheelbase

Triple: ['__subject__ Abarth 1000 GT Coupé __predicate__ width __object__ 1.55']
Text: ['The Abarth 1000 GT Coupé has a width of 1.55 m.']
Predicate: width

Triple: ['__subject__ Acura TLX __predicate__ assembly __object__ Marysville,_Ohio']
Text: ['The Acura TLX is assembled in Marysville, Ohio.']
Predicate: assembly

Triple: ['__subject__ Acura TLX __predicate__ assembly __object__ Marysville_Auto_Plant']
Text: ['The Acura TLX is made at the Marysville Auto Plant.']
Predicate: assembly

Triple: ['__subject__ Acura TLX __predicate__ class __object__ Luxury_vehicle']
Text: ['Acura TLX is a luxury class of vehicle.']
Predicate: class

Triple: ['__subject__ Acura TLX __predicate__ class __object__ Mid-size_car']
Text: ['The Acura TLX is mid-size class of car.']
Predicate: class

Triple: ['__subject__ Acura TLX __predicate__ engine __object__ 2.4 (litres)']
Text: ['The Acura TLX has a 2.4 litre engine.']
Predicate: engine

Triple: ['__subject__ Acura TLX __predicate__ engine __object__ Honda_J_engine']
Text: ['The Acura TLX has a Honda J engine.']
Predicate: engine

Triple: ['__subject__ Acura TLX __predicate__ engine __object__ Inline-four_engine']
Text: ['The Acura TLX has an Inline-four engine.']
Predicate: engine

Triple: ['__subject__ Acura TLX __predicate__ engine __object__ V6_engine']
Text: ['The Acura TLX has a V6 engine.']
Predicate: engine

Triple: ['__subject__ Acura TLX __predicate__ layout __object__ front-wheel drive / all-wheel drive']
Text: ['The Acura TLX has front-wheel and all-wheel drive.']
Predicate: layout

Triple: ['__subject__ Acura TLX __predicate__ layout __object__ Front-engine_design']
Text: ['The Acura TLX has a front engine design.']
Predicate: layout

Triple: ['__subject__ Acura TLX __predicate__ layout __object__ Front-wheel_drive']
Text: ['The Acura TLX has a front-wheel drive.']
Predicate: layout

Triple: ['__subject__ Acura TLX __predicate__ manufacturer __object__ Honda']
Text: ['Honda is the manufacturer of the Acura TLX.']
Predicate: manufacturer

Triple: ['__subject__ Airbus Defence and Space __predicate__ parentCompany __object__ Airbus_Group']
Text: ['The Airbus Group is the parent company of Airbus Defence and Space.']
Predicate: parentCompany

Triple: ['__subject__ Aleksey Chirikov (icebreaker) __predicate__ builder __object__ Arctech_Helsinki_Shipyard']
Text: ['Arctech Helsinki Shipyard built the icebreaker, Aleksey Chirikov.']
Predicate: builder

Triple: ['__subject__ Aleksey Chirikov (icebreaker) __predicate__ builder __object__ Finland']
Text: ['Finland is the builder of the icebreaker called the Aleksey Chirikov.']
Predicate: builder

Triple: ['__subject__ Aleksey Chirikov (icebreaker) __predicate__ builder __object__ Helsinki']
Text: ['The builder of the icebreaker, Aleksey Chirikov, is in Helsinki.']
Predicate: builder

Triple: ['__subject__ Aleksey Chirikov (icebreaker) __predicate__ length __object__ 99.83']
Text: ['The icebreaker Aleksey Chirikov is 99.83 long.']
Predicate: length

Triple: ['__subject__ Aleksey Chirikov (icebreaker) __predicate__ operator __object__ Sovcomflot']
Text: ['Sovcomflot operates the icebreaker, Aleksey Chirikov.']
Predicate: operator

Triple: ['__subject__ Aleksey Chirikov (icebreaker) __predicate__ powerType __object__ Wärtsilä']
Text: ['The icebreaker Aleksey Chirikov has a Wartsila power type.']
Predicate: powerType

Triple: ['__subject__ Aleksey Chirikov (icebreaker) __predicate__ shipBeam __object__ 21.2']
Text: ["The Icebreaker, Aleksey Chirikov's ship beam is 21.2."]
Predicate: shipBeam

Triple: ['__subject__ Aleksey Chirikov (icebreaker) __predicate__ status __object__ In service']
Text: ['The Aleksey Chirikov (icebreaker) is in service.']
Predicate: status

Triple: ['__subject__ Alfa Romeo 164 __predicate__ alternativeName __object__ Alfa Romeo 168']
Text: ['The alternative name of the Alfa Romeo 164 is the Alfa Romeo 168.']
Predicate: alternativeName

Triple: ['__subject__ Alfa Romeo 164 __predicate__ assembly __object__ Italy']
Text: ["The Alfa Romeo 164's assembly line is in Italy."]
Predicate: assembly

Triple: ['__subject__ Alfa Romeo 164 __predicate__ assembly __object__ Milan']
Text: ['The Alfa Romeo 164 was assembled in Milan.']
Predicate: assembly

Triple: ['__subject__ Alfa Romeo 164 __predicate__ bodyStyle __object__ Sedan_(automobile)']
Text: ['The Alfa Romeo 164 has a Sedan body style.']
Predicate: bodyStyle

Triple: ['__subject__ Alfa Romeo 164 __predicate__ class __object__ Mid-size luxury / Executive car']
Text: ['The Alfa Romeo 164 is considered a mid-size luxury executive car.']
Predicate: class

Triple: ['__subject__ Alfa Romeo 164 __predicate__ class __object__ Luxury_vehicle']
Text: ['The Alfa Romeo 164 is a luxury vehicle.']
Predicate: class

Triple: ['__subject__ Alfa Romeo 164 __predicate__ engine __object__ 2.5 (litres)']
Text: ['The Engine of an Alfa Romeo 164 is 2.5 litres.']
Predicate: engine

Triple: ['__subject__ Alfa Romeo 164 __predicate__ engine __object__ Straight-four_engine']
Text: ['The Alfa Romeo 164 has a Straight four engine.']
Predicate: engine

Triple: ['__subject__ Alfa Romeo 164 __predicate__ engine __object__ V6_engine']
Text: ['The Alfa Romeo 164 has a V6 engine.']
Predicate: engine

Triple: ['__subject__ Alfa Romeo 164 __predicate__ relatedMeanOfTransportation __object__ Saab_9000']
Text: ['The Alfa Romeo 164 and the Saab 9000 are related means of transport in that they are both cars.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Alfa Romeo 164 __predicate__ transmission __object__ 4-speed automatic (ZF 4HP18Q)']
Text: ['The Alfa Romeo 164 has a 4-speed automatic (ZF 4HP18Q) transmission.']
Predicate: transmission

Triple: ['__subject__ Alfa Romeo 164 __predicate__ transmission __object__ 5-speed manual']
Text: ['The Alfa Romeo 164 has a 5 speed manual transmission.']
Predicate: transmission

Triple: ['__subject__ Alfa Romeo 164 __predicate__ transmission __object__ 6-speed manual (Getrag)']
Text: ['The Alfa Romeo 164 has a 6-speed manual Getrag transmission.']
Predicate: transmission

Triple: ['__subject__ Alhambra __predicate__ length __object__ 63800.0 (millimetres)']
Text: ['The Alhambra was 63800.0 millimetres long.']
Predicate: length

Triple: ['__subject__ Alhambra __predicate__ owner __object__ P&O_(company)']
Text: ['Alhambra is owned by the P & O company.']
Predicate: owner

Triple: ['__subject__ Alhambra __predicate__ powerType __object__ Humphrys,_Tennant_and_Dykes']
Text: ['The Alhambra is powered by a Humphrys, Tennant and Dykes engine.']
Predicate: powerType

Triple: ['__subject__ Alhambra __predicate__ shipLaunch __object__ 1855-05-31']
Text: ['The ship Alhambra was launched on the 31st May 1855.']
Predicate: shipLaunch

Triple: ['__subject__ Alhambra __predicate__ shipPower __object__ Geared steam engine Humphrys, Tennant and Dykes 140hp']
Text: ['The ship Alhambra was powered by a Humphrys, Tennant and Dykes 140hp geared steam engine.']
Predicate: shipPower

Triple: ['__subject__ Alliant Techsystems __predicate__ product __object__ AGM-88_HARM']
Text: ['The AgM-88 HARM is produced by Alliant Techsystems.']
Predicate: product

Triple: ['__subject__ Alliant Techsystems __predicate__ product __object__ XM25_CDTE']
Text: ['The Alliant Techsystems produces the XM25-CDTE.']
Predicate: product

Triple: ['__subject__ Alvis Car and Engineering Company __predicate__ foundationPlace __object__ Coventry']
Text: ['The Alvis Car and Engineering Company was founded in Coventry.']
Predicate: foundationPlace

Triple: ['__subject__ Alvis Car and Engineering Company __predicate__ city __object__ Coventry']
Text: ['The Alvis Car and Engineering Company is located in Coventry.']
Predicate: city

Triple: ['__subject__ Alvis Car and Engineering Company __predicate__ successor __object__ Rover_Company']
Text: ['The Rover Co. succeeded the Alvis Car and Engineering Co.']
Predicate: successor

Triple: ['__subject__ Alvis Speed 25 __predicate__ class __object__ Full-size luxury car']
Text: ['The Alvis Speed 25 is classed as a full-size luxury car.']
Predicate: class

Triple: ['__subject__ Alvis Speed 25 __predicate__ class __object__ Full-size_car']
Text: ['The Alvis Speed 25 is classed as a Full-size car.']
Predicate: class

Triple: ['__subject__ Alvis Speed 25 __predicate__ engine __object__ Petrol']
Text: ['The Alvis Speed 25 has a petrol engine.']
Predicate: engine

Triple: ['__subject__ Alvis Speed 25 __predicate__ engine __object__ 31.48 tax horsepower']
Text: ['The Alvis Speed 25 has a 31.48 tax horsepower engine.']
Predicate: engine

Triple: ['__subject__ Alvis Speed 25 __predicate__ engine __object__ 4387.0 (cubicCentimetres)']
Text: ['The Alvis Speed 25 has a 4387.00 cc engine.']
Predicate: engine

Triple: ['__subject__ Alvis Speed 25 __predicate__ manufacturer __object__ Alvis_Car_and_Engineering_Company']
Text: ['Alvis Speed 25 was manufactured by the Alvis Car and Engineering Company.']
Predicate: manufacturer

Triple: ['__subject__ Alvis Speed 25 __predicate__ transmission __object__ single plate clutch, separate 4-speed gearbox all-silent and all-syncromesh, centre change lever, open tubular propellor shaft with metal joints , spiral bevel fully floating back axle']
Text: ['The Alvis Speed 25 has an impressive transmission coined as "single plate clutch, separate 4-speed gearbox all-silent and all-syncromesh, centre change lever, open tubular propellor shaft with metal joints, spiral bevel fully floating back axle".']
Predicate: transmission

Triple: ['__subject__ Alvis Speed 25 __predicate__ wheelbase __object__ 127.0 (inches)']
Text: ['The Alvis Speed 25 has a wheelbase of 127 inches.']
Predicate: wheelbase

Triple: ['__subject__ American Locomotive Company __predicate__ foundationPlace __object__ Schenectady,_New_York']
Text: ['The American Locomotive Company was founded in Schenectady, New York.']
Predicate: foundationPlace

Triple: ['__subject__ American Locomotive Company __predicate__ foundationPlace __object__ United_States']
Text: ['The American Locomotive Company was founded in the United States.']
Predicate: foundationPlace

Triple: ['__subject__ American Locomotive Company __predicate__ country __object__ United_States']
Text: ['The American Locomotive Company is located in the United States.']
Predicate: country

Triple: ['__subject__ American Motors __predicate__ fate __object__ Chrysler']
Text: ['American Motors was acquired by Chrysler.']
Predicate: fate

Triple: ['__subject__ American Motors __predicate__ fate __object__ Eagle_(automobile)']
Text: ['American Motors Co was succeeded by Eagle.']
Predicate: fate

Triple: ['__subject__ American Motors __predicate__ keyPerson __object__ Roy_D._Chapin,_Jr.']
Text: ['Roy D. Chapin Jr. is a key person at American Motors.']
Predicate: keyPerson

Triple: ['__subject__ American Motors __predicate__ subsidiary __object__ Wheel_Horse']
Text: ['The Wheel Horse is a subsidiary of American Motors.']
Predicate: subsidiary

Triple: ['__subject__ American Motors __predicate__ successor __object__ Eagle_(automobile)']
Text: ['American Motors successor is Eagle.']
Predicate: successor

Triple: ['__subject__ American submarine NR-1 __predicate__ builder __object__ General_Dynamics_Electric_Boat']
Text: ['General Dynamics Electric Boat is the builder of the American submarine NR-1.']
Predicate: builder

Triple: ['__subject__ American submarine NR-1 __predicate__ length __object__ 45000.0 (millimetres)']
Text: ['The American submarine NR-1 is 45000.0 millimetres long.']
Predicate: length

Triple: ['__subject__ American submarine NR-1 __predicate__ shipBeam __object__ 3.8 m']
Text: ['The American submarine NR-1 has a 3.8m ship beam.']
Predicate: shipBeam

Triple: ['__subject__ American submarine NR-1 __predicate__ shipLaunch __object__ 1969-01-25']
Text: ['The American submarine NR-1 was launched in January 25th 1969.']
Predicate: shipLaunch

Triple: ['__subject__ American submarine NR-1 __predicate__ topSpeed __object__ 8.334']
Text: ['The top speed of the American submarine NR-1 is 8.334.']
Predicate: topSpeed

Triple: ['__subject__ Antares (rocket) __predicate__ comparable __object__ Delta_II']
Text: ['The rocket Antares is comparable to Delta II.']
Predicate: comparable

Triple: ['__subject__ Antares (rocket) __predicate__ diameter __object__ 3.9 (metres)']
Text: ['The Antares rocket is 3.9 m in diameter.']
Predicate: diameter

Triple: ['__subject__ Antares (rocket) __predicate__ finalFlight __object__ 2013-09-18']
Text: ['The final flight of the rocket, Antares was on the 18th of September 2013.']
Predicate: finalFlight

Triple: ['__subject__ Antares (rocket) __predicate__ finalFlight __object__ 2014-07-13']
Text: ['The Antares rocket had its final flight on July 13th 2014.']
Predicate: finalFlight

Triple: ['__subject__ Antares (rocket) __predicate__ function __object__ Medium expendable launch system']
Text: ['The function of the Antares rocket was a medium expendable launch system.']
Predicate: function

Triple: ['__subject__ Antares (rocket) __predicate__ launchSite __object__ Mid-Atlantic_Regional_Spaceport']
Text: ['The rocker Antares was launched from the Mid-Atlantic Regional Spaceport.']
Predicate: launchSite

Triple: ['__subject__ Antares (rocket) __predicate__ maidenFlight __object__ 2013-04-21']
Text: ['The maiden flight of the Antares rocket was on April 21st, 2013.']
Predicate: maidenFlight

Triple: ['__subject__ Antares (rocket) __predicate__ maidenFlight __object__ 2014-01-09']
Text: ['The Antares rocket first voyage was on January 9, 2014.']
Predicate: maidenFlight

Triple: ['__subject__ Antares (rocket) __predicate__ maidenFlight __object__ 2014-10-28']
Text: ['The Antares rocket made its first flight on October 28, 2014.']
Predicate: maidenFlight

Triple: ['__subject__ Antares (rocket) __predicate__ manufacturer __object__ Orbital_ATK']
Text: ['The Antares rocket was manufactured by Orbital ATK.']
Predicate: manufacturer

Triple: ['__subject__ Antares (rocket) __predicate__ manufacturer __object__ Yuzhnoye_Design_Office']
Text: ['The Antares rocket was made by the Yuzhnoye Design Office.']
Predicate: manufacturer

Triple: ['__subject__ Argentina __predicate__ capital __object__ Buenos_Aires']
Text: ['The capital of Argentina is Buenos Aires.']
Predicate: capital

Triple: ['__subject__ Argentina __predicate__ demonym __object__ Argentines']
Text: ['Argentines live in Argentina.']
Predicate: demonym

Triple: ['__subject__ Argentina __predicate__ leader __object__ Mauricio_Macri']
Text: ['The leader of Argentina is Mauricio Macri.']
Predicate: leader

Triple: ['__subject__ Ariane 5 __predicate__ diameter __object__ 5.4 (metres)']
Text: ['Ariane 5 has a diameter of 5.4 metres.']
Predicate: diameter

Triple: ['__subject__ Ariane 5 __predicate__ finalFlight __object__ 2003-09-27']
Text: ['The final flight of the Ariane 5 was on 2003-09-27.']
Predicate: finalFlight

Triple: ['__subject__ Ariane 5 __predicate__ finalFlight __object__ 2004-12-18']
Text: ["December 18, 2004 was Ariane 5's final flight."]
Predicate: finalFlight

Triple: ['__subject__ Ariane 5 __predicate__ finalFlight __object__ 2009-12-18']
Text: ["The Ariane 5's final flight was on the 18th December 2009."]
Predicate: finalFlight

Triple: ['__subject__ Ariane 5 __predicate__ launchSite __object__ ELA-3']
Text: ['The Ariane 5 was launched at ELA-3.']
Predicate: launchSite

Triple: ['__subject__ Ariane 5 __predicate__ maidenFlight __object__ 1996-06-04']
Text: ['Ariane 5 had its maiden flight on the 4th of June, 1996.']
Predicate: maidenFlight

Triple: ['__subject__ Ariane 5 __predicate__ maidenFlight __object__ 2002-12-11']
Text: ['The maiden flight of Ariane 5 was on the 11th December 2002.']
Predicate: maidenFlight

Triple: ['__subject__ Ariane 5 __predicate__ maidenFlight __object__ 2004-03-02']
Text: ["The Ariane 5's maiden flight was on the 2nd March 2004."]
Predicate: maidenFlight

Triple: ['__subject__ Ariane 5 __predicate__ maidenFlight __object__ 2008-03-09']
Text: ['The maiden flight of the Ariane 5 rocket was the 9th March 2008.']
Predicate: maidenFlight

Triple: ['__subject__ Ariane 5 __predicate__ manufacturer __object__ ESA and Arianespace']
Text: ['The Ariane 5 was made by ESA and Arianespace.']
Predicate: manufacturer

Triple: ['__subject__ Ariane 5 __predicate__ manufacturer __object__ Arianespace']
Text: ['Arianespace is the manufacturer of Ariane 5.']
Predicate: manufacturer

Triple: ['__subject__ Ariane 5 __predicate__ manufacturer __object__ European_Space_Agency']
Text: ['The European Space Agency is the manufacturer of the Ariane 5.']
Predicate: manufacturer

Triple: ['__subject__ Ariane 5 __predicate__ partialFailures __object__ 2']
Text: ['The Ariane 5 has had 2 partial failures.']
Predicate: partialFailures

Triple: ['__subject__ Arianespace __predicate__ city __object__ Courcouronnes']
Text: ['Arianespace is located in the city of Courcouronnes.']
Predicate: city

Triple: ['__subject__ Arianespace __predicate__ country __object__ France']
Text: ['Arianespace is located in France.']
Predicate: country

Triple: ['__subject__ Aston Martin DBS __predicate__ manufacturer __object__ Aston_Martin']
Text: ['The Aston Martin DBS is manufactured by Aston Martin.']
Predicate: manufacturer

Triple: ['__subject__ Aston Martin DBS __predicate__ successor __object__ Aston_Martin_V8']
Text: ['The Aston Martin DBS had the Aston Martin V8 for a successor.']
Predicate: successor

Triple: ['__subject__ Aston Martin DBS __predicate__ successor __object__ Aston_Martin_Vantage']
Text: ['The successor of the Aston Martin DBS is the Aston Martin Vantage.']
Predicate: successor

Triple: ['__subject__ Aston Martin V8 __predicate__ assembly __object__ Newport Pagnell, Buckinghamshire, England, United Kingdom']
Text: ['The Aston Martin V8 assembly took place in Newport Pagnell, Buckinghamshire, England, United Kingdom.']
Predicate: assembly

Triple: ['__subject__ Aston Martin V8 __predicate__ assembly __object__ Newport_Pagnell']
Text: ['The Aston Martin V8 assembly is located in Newport Pagnell.']
Predicate: assembly

Triple: ['__subject__ Aston Martin V8 __predicate__ assembly __object__ United_Kingdom']
Text: ['Aston Martin V8 was assembled in the United Kingdom.']
Predicate: assembly

Triple: ['__subject__ Aston Martin V8 __predicate__ bodyStyle __object__ Coupé']
Text: ["The Aston Martin V8's body style is the Coupé."]
Predicate: bodyStyle

Triple: ['__subject__ Aston Martin V8 __predicate__ engine __object__ 5.3 (litres)']
Text: ['The Aston Martin V8 has a 5.3 litre engine.']
Predicate: engine

Triple: ['__subject__ Aston Martin V8 __predicate__ relatedMeanOfTransportation __object__ Aston_Martin_DBS']
Text: ['The Aston Martin V8 and the Aston Martin DBS are related means of transport.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Aston Martin V8 __predicate__ relatedMeanOfTransportation __object__ Aston_Martin_RHAM/1']
Text: ['The Aston Martin V8 and Aston Martin RHAM/1 are related means of transportation.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Aston Martin V8 __predicate__ successor __object__ Aston_Martin_Virage']
Text: ['The Aston Martin V8 was succeeded by the Aston Martin Virage.']
Predicate: successor

Triple: ['__subject__ Aston Martin Virage __predicate__ relatedMeanOfTransportation __object__ Aston_Martin_DBS']
Text: ['Aston Martin Virage and Aston Martin DBS are related types of transportation.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Atlas II __predicate__ diameter __object__ 3.04 m']
Text: ['Atlas II is 3.04m in diameter.']
Predicate: diameter

Triple: ['__subject__ Atlas II __predicate__ finalFlight __object__ 2002-12-05']
Text: ['Atlas II last flight was on December 5, 2002.']
Predicate: finalFlight

Triple: ['__subject__ Atlas II __predicate__ finalFlight __object__ 2004-08-31']
Text: ["Atlas II's final flight was on the 31st August 2004."]
Predicate: finalFlight

Triple: ['__subject__ Atlas II __predicate__ launchSite __object__ Cape_Canaveral_Air_Force_Station']
Text: ['The Atlas II was launched from Cape Canaveral Air Force Station.']
Predicate: launchSite

Triple: ['__subject__ Atlas II __predicate__ launchSite __object__ Spaceport_Florida_Launch_Complex_36']
Text: ['The Atlas II was launched from the Spaceport Florida Launch Complex 36.']
Predicate: launchSite

Triple: ['__subject__ Atlas II __predicate__ launchSite __object__ Vandenberg_AFB_Space_Launch_Complex_3']
Text: ['The Atlas II rocket’s launch site is Vandenberg AFB Space Launch Complex 3.']
Predicate: launchSite

Triple: ['__subject__ Atlas II __predicate__ manufacturer __object__ Lockheed_Martin']
Text: ['The manufacturer of the Atlas II is Lockheed Martin.']
Predicate: manufacturer

Triple: ['__subject__ Audi __predicate__ subsidiary __object__ Ducati']
Text: ['Ducati is a subsidiary of Audi.']
Predicate: subsidiary

Triple: ['__subject__ Audi __predicate__ subsidiary __object__ Lamborghini']
Text: ['Lamborghini is a subsidiary of Audi.']
Predicate: subsidiary

Triple: ['__subject__ Audi __predicate__ subsidiary __object__ Quattro_GmbH']
Text: ['The Quattro Gmbh is a subsidiary of the Audi.']
Predicate: subsidiary

Triple: ['__subject__ Audi A1 __predicate__ assembly __object__ Brussels, Belgium']
Text: ['Audi A1 is assembled in Brussels in Belgium.']
Predicate: assembly

Triple: ['__subject__ Audi A1 __predicate__ bodyStyle __object__ Hatchback']
Text: ['The Audi A1 is a hatchback.']
Predicate: bodyStyle

Triple: ['__subject__ Audi A1 __predicate__ class __object__ Supermini']
Text: ['The Audi A1 is classed as a super mini.']
Predicate: class

Triple: ['__subject__ Audi A1 __predicate__ engine __object__ 1.2 (litres)']
Text: ['The Audi A1 has a 1.2 litre engine.']
Predicate: engine

Triple: ['__subject__ Audi A1 __predicate__ layout __object__ Front-engine,_front-wheel-drive_layout']
Text: ['The Audi A1 has a front-engine, front-wheel-drive layout.']
Predicate: layout

Triple: ['__subject__ Audi A1 __predicate__ manufacturer __object__ Audi']
Text: ['Audi is the manufacturer of the Audi A1.']
Predicate: manufacturer

Triple: ['__subject__ Audi A1 __predicate__ relatedMeanOfTransportation __object__ Volkswagen_Polo']
Text: ['The Audi A1 and Volkswagen Polo are related kinds of transportation.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Audi A1 __predicate__ transmission __object__ 5-speed manual']
Text: ['The Audi A1 has a 5-speed manual transmission.']
Predicate: transmission

Triple: ['__subject__ Audi A1 __predicate__ transmission __object__ 6-speed manual']
Text: ['The Audi A1 has a 6-speed manual gearbox.']
Predicate: transmission

Triple: ['__subject__ Caterpillar Inc. __predicate__ foundationPlace __object__ United_States']
Text: ['Caterpillar Inc. was founded in the United States.']
Predicate: foundationPlace

Triple: ['__subject__ Caterpillar Inc. __predicate__ location __object__ Illinois']
Text: ['Caterpillar, Inc. is located in Illinois.']
Predicate: location

Triple: ['__subject__ Caterpillar Inc. __predicate__ location __object__ United_States']
Text: ['Caterpillar Inc. is located in the U.S.']
Predicate: location

Triple: ['__subject__ Costa Crociere __predicate__ location __object__ Italy']
Text: ['Costa Crociere is based in Italy.']
Predicate: location

Triple: ['__subject__ Costa Crociere __predicate__ parentCompany __object__ Carnival_Corporation_&_plc']
Text: ['Carnival Corporation & plc is the parent company of Costa Crociere.']
Predicate: parentCompany

Triple: ['__subject__ DeSoto Custom __predicate__ manufacturer __object__ DeSoto_(automobile)']
Text: ['DeSoto are the manufacturers of the DeSoto Custom.']
Predicate: manufacturer

Triple: ['__subject__ DeSoto Custom __predicate__ relatedMeanOfTransportation __object__ Dodge_Coronet']
Text: ['The DeSoto Custom is related to the Dodge Coronet.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ DeSoto Custom __predicate__ successor __object__ DeSoto_Firedome']
Text: ["The Desoto Custom's successor is the DeSoto Firedome."]
Predicate: successor

Triple: ['__subject__ Delta II __predicate__ countryOrigin __object__ United_States']
Text: ['The origin of the Delta II is the United States.']
Predicate: countryOrigin

Triple: ['__subject__ Delta II __predicate__ launchSite __object__ Cape_Canaveral_Air_Force_Station_Space_Launch_Complex_17']
Text: ['The Delta II took off from Cape Canaveral Air Force Station Space Launch Complex 17.']
Predicate: launchSite

Triple: ['__subject__ Delta II __predicate__ launchSite __object__ Vandenberg_AFB_Space_Launch_Complex_2']
Text: ['The launch site of the Delta II was at the Vandenberg AFB Space Launch Complex 2.']
Predicate: launchSite

Triple: ['__subject__ Delta II __predicate__ launchSite __object__ Vandenberg_Air_Force_Base']
Text: ['The Delta II launch site was at Vandenberg Air Force Base.']
Predicate: launchSite

Triple: ['__subject__ Delta II __predicate__ manufacturer __object__ United_Launch_Alliance']
Text: ['Delta II was manufactured by the United Launch Alliance.']
Predicate: manufacturer

Triple: ['__subject__ Dodge __predicate__ keyPerson __object__ Sergio_Marchionne']
Text: ['Sergio Marchionne was the key person of the Dodge.']
Predicate: keyPerson

Triple: ['__subject__ ELA-3 __predicate__ operator __object__ Arianespace']
Text: ['Arianespace operates the ELA-3.']
Predicate: operator

Triple: ['__subject__ ELA-3 __predicate__ site __object__ Guiana_Space_Centre']
Text: ['The ELA-3 is located at the Guiana Space Centre.']
Predicate: site

Triple: ['__subject__ Fiat Croma __predicate__ relatedMeanOfTransportation __object__ Opel_Vectra']
Text: ['Fiat Croma and Opel Vectra are related forms of transportation.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Fiat Croma __predicate__ relatedMeanOfTransportation __object__ Saab_9000']
Text: ['The Fiat Croma and the Saab 9000 are related means of transport in that they are both cars.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Finland __predicate__ demonym __object__ Finns']
Text: ['The natives of Finland are known as Finns.']
Predicate: demonym

Triple: ['__subject__ Finland __predicate__ leader __object__ Juha_Sipilä']
Text: ['Juha Sipila is a leader in Finland.']
Predicate: leader

Triple: ['__subject__ Finland __predicate__ leader __object__ Sauli_Niinistö']
Text: ['Sauli Niinistö is a leader in Finland.']
Predicate: leader

Triple: ['__subject__ General Dynamics Electric Boat __predicate__ city __object__ Groton,_Connecticut']
Text: ['General Dynamics Electric Boat are located in the city of Groton, Connecticut.']
Predicate: city

Triple: ['__subject__ General Dynamics Electric Boat __predicate__ parentCompany __object__ General_Dynamics']
Text: ['General Dynamics is the parent company of the General Dynamics Electric Boat Co.']
Predicate: parentCompany

Triple: ['__subject__ Germany __predicate__ capital __object__ Berlin']
Text: ['Berlin is the capital of Germany.']
Predicate: capital

Triple: ['__subject__ Germany __predicate__ leader __object__ Andreas_Voßkuhle']
Text: ['Andreas Voßkuhle is a leader of Germany.']
Predicate: leader

Triple: ['__subject__ Germany __predicate__ leader __object__ Angela_Merkel']
Text: ['Angela Merkel is the leader of Germany.']
Predicate: leader

Triple: ['__subject__ Germany __predicate__ leader __object__ Joachim_Gauck']
Text: ['Joachim Gauck is a leader in Germany.']
Predicate: leader

Triple: ['__subject__ Gruppo Bertone __predicate__ foundationPlace __object__ Italy']
Text: ['Gruppo Bertone was founded in Italy.']
Predicate: foundationPlace

Triple: ['__subject__ Gruppo Bertone __predicate__ foundationPlace __object__ Turin']
Text: ['The Gruppo Bertone was founded in Turin.']
Predicate: foundationPlace

Triple: ['__subject__ Gruppo Bertone __predicate__ city __object__ Turin']
Text: ['Gruppo Bertone is located in Turin.']
Predicate: city

Triple: ['__subject__ Gruppo Bertone __predicate__ country __object__ Italy']
Text: ['Gruppo Bertone is located in Italy.']
Predicate: country

Triple: ['__subject__ Guiana Space Centre __predicate__ headquarter __object__ French_Guiana']
Text: ['French Guiana is where the headquarters of the Guiana Space Centre are located.']
Predicate: headquarter

Triple: ['__subject__ Guiana Space Centre __predicate__ location __object__ French_Guiana']
Text: ['French Guiana is the location of the Guiana Space Centre.']
Predicate: location

Triple: ['__subject__ Guiana Space Centre __predicate__ location __object__ Kourou,_French_Guiana']
Text: ['The Guiana Space Centre is located in Kourou, French Guiana.']
Predicate: location

Triple: ['__subject__ Honda Accord __predicate__ manufacturer __object__ Honda']
Text: ['The Honda Accord is made by Honda.']
Predicate: manufacturer

Triple: ['__subject__ Honda Accord __predicate__ relatedMeanOfTransportation __object__ Acura_TLX']
Text: ['The Honda Accord is related to the Acura TLX.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Honda J engine __predicate__ manufacturer __object__ Honda']
Text: ['The Honda J. engine is made by Honda.']
Predicate: manufacturer

Triple: ['__subject__ Humphrys, Tennant and Dykes __predicate__ location __object__ Deptford']
Text: ['Humphrys, Tennant and Dykes is located in Deptford.']
Predicate: location

Triple: ['__subject__ Humphrys, Tennant and Dykes __predicate__ location __object__ London']
Text: ['Humphrys, Tennant and Dykes are located in London.']
Predicate: location

Triple: ['__subject__ Italy __predicate__ capital __object__ Rome']
Text: ['Rome is the capital of Italy.']
Predicate: capital

Triple: ['__subject__ Lancia Thema __predicate__ relatedMeanOfTransportation __object__ Saab_9000']
Text: ['The Lancia Thema is related to the Saab 9000.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Lockheed Martin __predicate__ location __object__ Bethesda,_Maryland']
Text: ['Lockheed Martin is located in Bethesda, Maryland.']
Predicate: location

Triple: ['__subject__ MTU Friedrichshafen __predicate__ city __object__ Friedrichshafen']
Text: ['MTU Friedrichshafen is in the city of Friedrichshafen.']
Predicate: city

Triple: ['__subject__ MTU Friedrichshafen __predicate__ owner __object__ Rolls-Royce_Holdings']
Text: ['The MTU Friedrichshafen is owned by Rolls-Royce Holdings.']
Predicate: owner

Triple: ['__subject__ MTU Friedrichshafen __predicate__ parentCompany __object__ Rolls-Royce_Power_Systems']
Text: ['The parent company of MTU Friedrichshafen is Rolls-Royce Power Systems.']
Predicate: parentCompany

Triple: ['__subject__ Mid-Atlantic Regional Spaceport Launch Pad 0 __predicate__ associatedRocket __object__ Antares_(rocket)']
Text: ['Mid-Atlantic Regional Spaceport Launch Pad 0 is associated with the Antares rocket.']
Predicate: associatedRocket

Triple: ['__subject__ Mid-Atlantic Regional Spaceport Launch Pad 0 __predicate__ associatedRocket __object__ Minotaur_IV']
Text: ['Mid-Atlantic Regional Spaceport Launch Pad 0 is associated with the rocket, Minotaur IV.']
Predicate: associatedRocket

Triple: ['__subject__ Mid-Atlantic Regional Spaceport Launch Pad 0 __predicate__ associatedRocket __object__ Minotaur_V']
Text: ['The Mid-Atlantic Regional Spaceport Launch Pad 0 is associated with the Minotaur V rocket.']
Predicate: associatedRocket

Triple: ['__subject__ Milan __predicate__ saint __object__ Ambrose']
Text: ['The saint of Milan is Ambrose.']
Predicate: saint

Triple: ['__subject__ Neptun Werft __predicate__ city __object__ Rostock']
Text: ['Neptun Werft is located in Rostock.']
Predicate: city

Triple: ['__subject__ Neptun Werft __predicate__ country __object__ Germany']
Text: ['Neptun Werft is located in Germany.']
Predicate: country

Triple: ['__subject__ P&O (company) __predicate__ location __object__ London']
Text: ['The location of the company P&O is London.']
Predicate: location

Triple: ['__subject__ Plymouth Plaza __predicate__ manufacturer __object__ Plymouth_(automobile)']
Text: ['The Plymouth Plaza was manufactured by Plymouth.']
Predicate: manufacturer

Triple: ['__subject__ Plymouth Plaza __predicate__ relatedMeanOfTransportation __object__ 1955_Dodge']
Text: ['Plymouth Plaza is related to the 1955 Dodge.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Plymouth Plaza __predicate__ successor __object__ Plymouth_Satellite']
Text: ["The Plymouth Plaza's successor is the Plymouth Satellite."]
Predicate: successor

Triple: ['__subject__ Richard A. Teague __predicate__ employer __object__ Chrysler']
Text: ['Richard A. Teague works for Chrysler.']
Predicate: employer

Triple: ['__subject__ Richard A. Teague __predicate__ employer __object__ General_Motors']
Text: ['Richard A Teague is an employee of General Motors.']
Predicate: employer

Triple: ['__subject__ Rostock __predicate__ country __object__ Germany']
Text: ['Rostock is in Germany.']
Predicate: country

Triple: ['__subject__ SEAT Ibiza __predicate__ relatedMeanOfTransportation __object__ Audi_A1']
Text: ['The SEAT Ibiza and the Audi A1 are similar means of transport.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ SEAT Ibiza __predicate__ relatedMeanOfTransportation __object__ Volkswagen_Polo_Mk3']
Text: ['The SEAT Ibiza is related to the Volkswagen Polo Mk3.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Saab 9000 __predicate__ relatedMeanOfTransportation __object__ Alfa_Romeo_164']
Text: ['Saab 9000 is related to Alfa Romeo 164.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Sovcomflot __predicate__ keyPerson __object__ Sergey_Naryshkin']
Text: ['Sergey Naryshkin is a key person at Sovcomflot.']
Predicate: keyPerson

Triple: ['__subject__ Spaceport Florida Launch Complex 36 __predicate__ operator __object__ United_States_Air_Force']
Text: ['Spaceport Florida Launch Complex 36 is operated by the United States Air Force.']
Predicate: operator

Triple: ['__subject__ United Kingdom __predicate__ capital __object__ London']
Text: ['London is the capital of the United Kingdom.']
Predicate: capital

Triple: ['__subject__ United Kingdom __predicate__ leader __object__ Elizabeth_II']
Text: ['Elizabeth II is the leader of the United Kingdom.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ capital __object__ Washington,_D.C.']
Text: ['Washington D.C. is the capital city of the United States.']
Predicate: capital

Triple: ['__subject__ United States __predicate__ demonym __object__ Americans']
Text: ['Americans live in the U.S.']
Predicate: demonym

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ African_Americans']
Text: ['One of the ethnic groups in the United States is African Americans.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ Asian_Americans']
Text: ['Asian Americans are one of the ethnic groups of the United States.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ White_Americans']
Text: ['White Americans are an ethnic group in the United States.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ language __object__ English_language']
Text: ['English is spoken in the U.S.']
Predicate: language

Triple: ['__subject__ United States __predicate__ leaderTitle __object__ President_of_the_United_States']
Text: ['The leader of the United States has the title President of the United States.']
Predicate: leaderTitle

Triple: ['__subject__ Vandenberg AFB Space Launch Complex 3 __predicate__ operator __object__ United_States_Air_Force']
Text: ['The operator of the Vandenberg AFB Space Launch Complex 3 is the United States Air Force.']
Predicate: operator

Triple: ['__subject__ Vandenberg Air Force Base __predicate__ location __object__ Lompoc,_California']
Text: ['The Vandenberg Air Force Base is located in Lompoc, California.']
Predicate: location

Triple: ['__subject__ Volkswagen Polo __predicate__ relatedMeanOfTransportation __object__ Audi_A1']
Text: ['Volkswagen Polo and Audi A1 are related forms of transportation.']
Predicate: relatedMeanOfTransportation

Triple: ['__subject__ Yuzhnoye Design Office __predicate__ location __object__ Dnipropetrovsk']
Text: ['The Yuzhnoye Design Office is located in Dnipropetrovsk.']
Predicate: location

Triple: ['__subject__ Yuzhnoye Design Office __predicate__ location __object__ Ukraine']
Text: ['The Yuzhnoye Design Office is located in the Ukraine.']
Predicate: location

Triple: ['__subject__ 11th Mississippi Infantry Monument __predicate__ category __object__ Contributing_property']
Text: ['The 11th Mississippi Infantry Monument falls under the category of Contributing property.']
Predicate: category

Triple: ['__subject__ 11th Mississippi Infantry Monument __predicate__ country __object__ United States']
Text: ['The 11th Mississippi Infantry Monument is located in the United States.']
Predicate: country

Triple: ['__subject__ 11th Mississippi Infantry Monument __predicate__ location __object__ Adams_County,_Pennsylvania']
Text: ["11th Mississippi Infantry Monument's location is Adams County, Pennsylvania."]
Predicate: location

Triple: ['__subject__ 11th Mississippi Infantry Monument __predicate__ location __object__ Seminary_Ridge']
Text: ['The 11th Mississippi Infantry Monument is located at Seminary Ridge.']
Predicate: location

Triple: ['__subject__ 11th Mississippi Infantry Monument __predicate__ municipality __object__ Gettysburg,_Pennsylvania']
Text: ['The 11th Mississippi Infantry Monument is in the municipality of Gettysburg, Pennsylvania.']
Predicate: municipality

Triple: ['__subject__ 11th Mississippi Infantry Monument __predicate__ state __object__ Pennsylvania']
Text: ['The 11th Mississippi Infantry Monument is in Pennsylvania.']
Predicate: state

Triple: ['__subject__ 14th New Jersey Volunteer Infantry Monument __predicate__ category __object__ Historic_districts_in_the_United_States']
Text: ['The 14th New Jersey Volunteer Infantry Monument belongs to the category of Historic districts in the United States.']
Predicate: category

Triple: ['__subject__ 14th New Jersey Volunteer Infantry Monument __predicate__ country __object__ United States']
Text: ['The 14th New Jersey Volunteer Infantry Monument is located in the United States.']
Predicate: country

Triple: ['__subject__ 14th New Jersey Volunteer Infantry Monument __predicate__ district __object__ Monocacy_National_Battlefield']
Text: ['The 14th New Jersey Volunteer Infantry Monument is located in the district of the Monocacy National Battlefield.']
Predicate: district

Triple: ['__subject__ 14th New Jersey Volunteer Infantry Monument __predicate__ established __object__ 1907-07-11']
Text: ['The 14th New Jersey Volunteer Infantry Monument was established in 1907-07-11.']
Predicate: established

Triple: ['__subject__ 14th New Jersey Volunteer Infantry Monument __predicate__ foundingDate __object__ 1907-07-11']
Text: ['14th New Jersey Volunteer Infantry Monument was founded 1907-07-11.']
Predicate: foundingDate

Triple: ['__subject__ 14th New Jersey Volunteer Infantry Monument __predicate__ owner __object__ National_Park_Service']
Text: ['The 14th New Jersey Volunteer Infantry Monument is owned by the National Park Service.']
Predicate: owner

Triple: ['__subject__ 14th New Jersey Volunteer Infantry Monument __predicate__ owningOrganisation __object__ National_Park_Service']
Text: ['The 14th New Jersey Volunteer Infantry Monument is owned by the National Park Service.']
Predicate: owningOrganisation

Triple: ['__subject__ 14th New Jersey Volunteer Infantry Monument __predicate__ state __object__ Maryland']
Text: ['The 14th New Jersey Volunteer Infantry Monuments is located in the state of Maryland.']
Predicate: state

Triple: ['__subject__ Adams County, Pennsylvania __predicate__ hasToItsNorth __object__ Cumberland_County,_Pennsylvania']
Text: ['Adams County, Pennsylvania has Cumberland County, Pennsylvania to its north.']
Predicate: hasToItsNorth

Triple: ['__subject__ Adams County, Pennsylvania __predicate__ hasToItsSouthwest __object__ Frederick_County,_Maryland']
Text: ['Frederick County, Maryland is to the southwest of Adams County, Pennsylvania.']
Predicate: hasToItsSouthwest

Triple: ['__subject__ Adams County, Pennsylvania __predicate__ hasToItsWest __object__ Franklin_County,_Pennsylvania']
Text: ['Adams County Pennsylvania is East of Franklin County, Pennsylvania.']
Predicate: hasToItsWest

Triple: ['__subject__ Atatürk Monument (İzmir) __predicate__ inaugurationDate __object__ 1932-07-27']
Text: ['The Ataturk Monument was inaugurated on 27th July, 1932.']
Predicate: inaugurationDate

Triple: ['__subject__ Atatürk Monument (İzmir) __predicate__ location __object__ Turkey']
Text: ['The Atatürk Monument is located in Izmir, Turkey.']
Predicate: location

Triple: ['__subject__ Azerbaijan __predicate__ capital __object__ Baku']
Text: ['Baku is the capital of Azerbaijan.']
Predicate: capital

Triple: ['__subject__ Azerbaijan __predicate__ legislature __object__ National_Assembly_(Azerbaijan)']
Text: ['The National Assembly dictates the legislature of Azerbaijan.']
Predicate: legislature

Triple: ["__subject__ Baku Turkish Martyrs' Memorial __predicate__ dedicatedTo __object__ Ottoman Army soldiers killed in the Battle of Baku"]
Text: ["Baku Turkish Martyrs' Memorial is dedicated to the Ottoman Army soldiers killed in the Battle of Baku."]
Predicate: dedicatedTo

Triple: ["__subject__ Baku Turkish Martyrs' Memorial __predicate__ designer __object__ Hüseyin Bütüner and Hilmi Güner"]
Text: ["Baku Turkish Martyrs' Memorial's designer was Hüseyin Bütüner and Hilmi Güner."]
Predicate: designer

Triple: ["__subject__ Dead Man's Plack __predicate__ dedicatedTo __object__ Æthelwald,_Ealdorman_of_East_Anglia"]
Text: ["The Dead Man's Plack is dedicated to Æthelwald, Ealdorman of East Anglia."]
Predicate: dedicatedTo

Triple: ["__subject__ Dead Man's Plack __predicate__ location __object__ England"]
Text: ["The Dead Man's Plack is located in England."]
Predicate: location

Triple: ["__subject__ Dead Man's Plack __predicate__ material __object__ Rock_(geology)"]
Text: ["The Dead Man's Plack is made from rock."]
Predicate: material

Triple: ['__subject__ England __predicate__ capital __object__ London']
Text: ['London is the capital of England.']
Predicate: capital

Triple: ['__subject__ England __predicate__ ethnicGroup __object__ British_Arabs']
Text: ['One of the ethnic groups found in England is the British Arabs.']
Predicate: ethnicGroup

Triple: ['__subject__ England __predicate__ language __object__ Cornish_language']
Text: ['One of the languages spoken in England is the Cornish language.']
Predicate: language

Triple: ['__subject__ England __predicate__ religion __object__ Church_of_England']
Text: ['In England the main religion is the Church of England.']
Predicate: religion

Triple: ['__subject__ Monocacy National Battlefield __predicate__ location __object__ Frederick_County,_Maryland']
Text: ['Monocacy National Battlefield is located in Frederick County, Maryland.']
Predicate: location

Triple: ['__subject__ Monocacy National Battlefield __predicate__ nearestCity __object__ Frederick,_Maryland']
Text: ['The city nearest to Monocacy National Battlefield is Frederick, Maryland.']
Predicate: nearestCity

Triple: ['__subject__ Turkey __predicate__ capital __object__ Ankara']
Text: ['Ankara is the capital of Turkey.']
Predicate: capital

Triple: ['__subject__ Turkey __predicate__ currency __object__ Turkish_lira']
Text: ['The currency of Turkey is Turkish Lira.']
Predicate: currency

Triple: ['__subject__ Turkey __predicate__ largestCity __object__ Istanbul']
Text: ['The largest city in Turkey is Istanbul.']
Predicate: largestCity

Triple: ['__subject__ Turkey __predicate__ leader __object__ Ahmet_Davutoğlu']
Text: ['Ahmet Davutoglu is a leader of Turkey.']
Predicate: leader

Triple: ['__subject__ Turkey __predicate__ leaderTitle __object__ President_of_Turkey']
Text: ["The leader's title in Turkey is the President of Turkey."]
Predicate: leaderTitle

Triple: ['__subject__ Aaron S. Daggett __predicate__ battle __object__ American_Civil_War']
Text: ['Aaron S. Daggett fought in battles in the American Civil War.']
Predicate: battle

Triple: ['__subject__ Aaron S. Daggett __predicate__ battle __object__ Battle_of_Antietam']
Text: ['Aaron S. Daggett was in the Battle of Antietam.']
Predicate: battle

Triple: ['__subject__ Aaron S. Daggett __predicate__ battle __object__ Battle_of_Cold_Harbor']
Text: ['Aaron S Daggett took part on the Battle of Cold Harbor.']
Predicate: battle

Triple: ['__subject__ Aaron S. Daggett __predicate__ battle __object__ Battle_of_Fredericksburg']
Text: ['Aaron S. Daggett fought in the Battle of Fredericksburg.']
Predicate: battle

Triple: ["__subject__ Aaron S. Daggett __predicate__ battle __object__ Battle_of_Garnett's_&_Golding's_Farm"]
Text: ["Aaron S. Daggett fought during the Battle of Garnett's & Golding's Farm."]
Predicate: battle

Triple: ['__subject__ Aaron S. Daggett __predicate__ battle __object__ Battle_of_Gettysburg']
Text: ['Aaron S. Daggett fought in the Battle of Gettysburg.']
Predicate: battle

Triple: ['__subject__ Aaron S. Daggett __predicate__ battle __object__ Battle_of_Salem_Church']
Text: ['Aaron S Daggett fought in the Battle of Salem Church.']
Predicate: battle

Triple: ['__subject__ Aaron S. Daggett __predicate__ battle __object__ Battle_of_South_Mountain']
Text: ['Aaron S Daggett fought in the Battle of South Mountain.']
Predicate: battle

Triple: ['__subject__ Aaron S. Daggett __predicate__ battle __object__ Battle_of_White_Oak_Swamp']
Text: ['Among the battles that Aaron S. Daggett fought in was the Battle of White Oak Swamp.']
Predicate: battle

Triple: ['__subject__ Aaron S. Daggett __predicate__ battle __object__ Battle_of_the_Wilderness']
Text: ["One of Aaron S. Daggett's battles was the Battle of the Wilderness."]
Predicate: battle

Triple: ['__subject__ Aaron S. Daggett __predicate__ battle __object__ Second_Battle_of_Rappahannock_Station']
Text: ['One of the battles Aaron S. Daggett fought in, was the Second Battle of Rappahannock Station.']
Predicate: battle

Triple: ['__subject__ Aaron S. Daggett __predicate__ birthPlace __object__ Greene,_Maine']
Text: ['Aaron S. Daggett was born in Greene, Maine.']
Predicate: birthPlace

Triple: ['__subject__ Aaron S. Daggett __predicate__ birthPlace __object__ Maine']
Text: ['Aaron S Daggett was born in Maine.']
Predicate: birthPlace

Triple: ['__subject__ Aaron S. Daggett __predicate__ deathPlace __object__ Massachusetts']
Text: ["Aaron S. Daggett's place of death was Massachusetts."]
Predicate: deathPlace

Triple: ['__subject__ Aaron S. Daggett __predicate__ deathPlace __object__ West_Roxbury']
Text: ['Aaron S Daggett died in West Roxbury.']
Predicate: deathPlace

Triple: ['__subject__ Ab Klink __predicate__ almaMater __object__ Erasmus_University_Rotterdam']
Text: ["Ab Klink's Alma mater is Erasmus University Rotterdam."]
Predicate: almaMater

Triple: ['__subject__ Ab Klink __predicate__ almaMater __object__ Leiden_University']
Text: ['The alma mater of Ab Klink is Leiden University.']
Predicate: almaMater

Triple: ['__subject__ Ab Klink __predicate__ birthDate __object__ 1958-11-02']
Text: ['The date of birth of Ab Klink is 1958-11-02.']
Predicate: birthDate

Triple: ['__subject__ Ab Klink __predicate__ birthPlace __object__ Netherlands']
Text: ['Ab Klink was born in the Netherlands.']
Predicate: birthPlace

Triple: ['__subject__ Ab Klink __predicate__ birthPlace __object__ Stellendam']
Text: ['Stellendam was the birthplace of Ab Klink.']
Predicate: birthPlace

Triple: ['__subject__ Ab Klink __predicate__ nationality __object__ Netherlands']
Text: ['Ab Klink is a national of the Netherlands.']
Predicate: nationality

Triple: ['__subject__ Ab Klink __predicate__ office __object__ Member of the House of Representatives']
Text: ['Ab Klink worked as a Member of the House of Representatives.']
Predicate: office

Triple: ['__subject__ Ab Klink __predicate__ office __object__ Member of the Senate']
Text: ['Ab Klink worked as a member of the senate.']
Predicate: office

Triple: ['__subject__ Ab Klink __predicate__ office __object__ House_of_Representatives_(Netherlands)']
Text: ['Ab Klink worked at the House of Representatives in Netherlands.']
Predicate: office

Triple: ['__subject__ Ab Klink __predicate__ office __object__ Ministry_of_Health,_Welfare_and_Sport_(Netherlands)']
Text: ['Ab Klink worked at the Ministry of Health, Welfare and Sport in Netherlands.']
Predicate: office

Triple: ['__subject__ Ab Klink __predicate__ office __object__ Senate_(Netherlands)']
Text: ['Ab Klink worked at the Senate (Netherlands).']
Predicate: office

Triple: ['__subject__ Ab Klink __predicate__ party __object__ Christian_Democratic_Appeal']
Text: ['Ab Klink belongs to the Christian Democratic Appeal party.']
Predicate: party

Triple: ["__subject__ Abdul Rahman Ya'kub __predicate__ hasDeputy __object__ Stephen_Yong_Kuet_Tze"]
Text: ["Stephen Yong Kuet Tze is the deputy of Abdul Rahman Ya'kub."]
Predicate: hasDeputy

Triple: ['__subject__ Abdul Taib Mahmud __predicate__ birthDate __object__ 1936-05-21']
Text: ["Abdul Taib Mahmud's date of birth is 1936-05-21."]
Predicate: birthDate

Triple: ['__subject__ Abdul Taib Mahmud __predicate__ birthPlace __object__ Kingdom_of_Sarawak']
Text: ["Abdul Taib Mahmud's birthplace was Kingdom of Sarawak."]
Predicate: birthPlace

Triple: ['__subject__ Abdul Taib Mahmud __predicate__ birthPlace __object__ Miri,_Malaysia']
Text: ['Miri, Malaysia, is the birthplace of Abdul Taib Mahmud.']
Predicate: birthPlace

Triple: ["__subject__ Abdul Taib Mahmud __predicate__ party __object__ Barisan Ra'ayat Jati Sarawak"]
Text: ['Abdul Taib Mahmud is a member of the "Barisan Ra\'ayat Jati Sarawak" party.']
Predicate: party

Triple: ['__subject__ Abdul Taib Mahmud __predicate__ party __object__ Parti_Pesaka_Bumiputera_Bersatu']
Text: ["Abdul Taib Mahmud's party is the Parti Pesaka Bumiputera Bersatu."]
Predicate: party

Triple: ['__subject__ Abdul Taib Mahmud __predicate__ region __object__ Asajaya']
Text: ["Abdul Taib Mahmud's region is Asajaya."]
Predicate: region

Triple: ['__subject__ Abdul Taib Mahmud __predicate__ region __object__ Balingian']
Text: ["Abdul Taib Mahmud's region is Balingian."]
Predicate: region

Triple: ['__subject__ Abdul Taib Mahmud __predicate__ residence __object__ Demak Jaya, Jalan Bako, Kuching, Sarawak']
Text: ['Abdul Taib Mahmud resides in Demak Jaya, Jalan Bako, Kuching, Sarawak.']
Predicate: residence

Triple: ['__subject__ Abdul Taib Mahmud __predicate__ residence __object__ Kuching']
Text: ['Abdul Taib Mahmud resides in Kuching.']
Predicate: residence

Triple: ['__subject__ Abdul Taib Mahmud __predicate__ residence __object__ Sarawak']
Text: ['Abdul Taib Mahmud lives in Sarawak.']
Predicate: residence

Triple: ["__subject__ Abdul Taib Mahmud __predicate__ successor __object__ Abdul_Rahman_Ya'kub"]
Text: ["The successor of Abdul Taib Mahmud was Abdul Rahman Ya'kub."]
Predicate: successor

Triple: ['__subject__ Abdulsalami Abubakar __predicate__ almaMater __object__ Technical_Institute,_Kaduna']
Text: ['The Technical Institute, Kaduna is the alma mater of Abdulsalami Abubakar.']
Predicate: almaMater

Triple: ['__subject__ Abdulsalami Abubakar __predicate__ country __object__ Nigeria']
Text: ["Abdulsalami Abubakar's country is Nigeria."]
Predicate: country

Triple: ['__subject__ Abdulsalami Abubakar __predicate__ inOfficeWhileVicePresident __object__ Mike_Akhigbe']
Text: ['Abdulsalami Abubakar was in office while Mike Akhigbe was Vice President.']
Predicate: inOfficeWhileVicePresident

Triple: ['__subject__ Abdulsalami Abubakar __predicate__ militaryBranch __object__ Nigerian_Air_Force']
Text: ['Abdulsalami Abubakar was a member of the Nigerian Air Force.']
Predicate: militaryBranch

Triple: ['__subject__ Abdulsalami Abubakar __predicate__ office __object__ Chief_of_the_Defence_Staff_(Nigeria)']
Text: ['Abdulsalami Abubakar worked as the Nigerian Chief of the Defence Staff.']
Predicate: office

Triple: ['__subject__ Abdulsalami Abubakar __predicate__ successor __object__ Al-Amin_Daggash']
Text: ["Abdulsalami Abubakar's successor was Al-Amin Daggash."]
Predicate: successor

Triple: ['__subject__ Abdulsalami Abubakar __predicate__ successor __object__ Olusegun_Obasanjo']
Text: ['Olusegun Obasanjo succeeded Abdulsalami Abubakar.']
Predicate: successor

Triple: ['__subject__ Abel Caballero __predicate__ almaMater __object__ University_of_Santiago_de_Compostela']
Text: ["Abel Caballero's alma mater is the University of Santiago de Compostela."]
Predicate: almaMater

Triple: ['__subject__ Abel Caballero __predicate__ birthPlace __object__ Galicia_(Spain)']
Text: ['Abel Caballero was born in Galicia, Spain.']
Predicate: birthPlace

Triple: ['__subject__ Abel Caballero __predicate__ birthPlace __object__ Ponteareas']
Text: ['Abel Caballero was born in Ponteareas.']
Predicate: birthPlace

Triple: ['__subject__ Abel Caballero __predicate__ birthPlace __object__ Spain']
Text: ['Spain is the birthplace of Abel Caballero.']
Predicate: birthPlace

Triple: ['__subject__ Abel Caballero __predicate__ inOfficeWhilePrimeMinister __object__ Felipe_González']
Text: ['Abel Caballero was in office while Felipe González was Prime Minister.']
Predicate: inOfficeWhilePrimeMinister

Triple: ['__subject__ Abel Caballero __predicate__ nationality __object__ Spain']
Text: ['Abel Caballero is Spanish.']
Predicate: nationality

Triple: ['__subject__ Abel Caballero __predicate__ office __object__ Mayor of Vigo']
Text: ['Abel Caballero works as the Mayor of Vigo.']
Predicate: office

Triple: ['__subject__ Abel Caballero __predicate__ office __object__ Member of the Congress of Deputies']
Text: ['Abel Caballero worked as a Member of the Congress of Deputies.']
Predicate: office

Triple: ['__subject__ Abel Caballero __predicate__ office __object__ Minister of Transport']
Text: ['Abel Caballero, while in office, was the Minister of Transport.']
Predicate: office

Triple: ['__subject__ Abel Caballero __predicate__ office __object__ Ministry_of_Public_Works_and_Transport_(Spain)']
Text: ['Abel Caballero worked at the Ministry of Public Works and Transport in Spain.']
Predicate: office

Triple: ["__subject__ Abel Caballero __predicate__ party __object__ Spanish_Socialist_Workers'_Party"]
Text: ["Abel Caballero belongs to the Spanish Socialist Workers' Party."]
Predicate: party

Triple: ['__subject__ Abner W. Sibal __predicate__ birthDate __object__ 1921-04-11']
Text: ["Abner W Sibal's date of birth is 11 - 04 - 1921."]
Predicate: birthDate

Triple: ['__subject__ Abner W. Sibal __predicate__ birthPlace __object__ Ridgewood,_Queens']
Text: ["Abner W. Sibal's birth place was Ridgewood, Queens."]
Predicate: birthPlace

Triple: ['__subject__ Abner W. Sibal __predicate__ militaryBranch __object__ United_States_Army']
Text: ['Abner W. Sibal served in the United States Army.']
Predicate: militaryBranch

Triple: ['__subject__ Abner W. Sibal __predicate__ office __object__ Member of the Connecticut Senate from the 26th District']
Text: ['Abner W. Sibal worked as a member of the Connecticut Senate from the 26th District.']
Predicate: office

Triple: ['__subject__ Abner W. Sibal __predicate__ party __object__ Republican_Party_(United_States)']
Text: ['Abner W. Sibal was a member of the Republican party of the United States.']
Predicate: party

Triple: ["__subject__ Abner W. Sibal __predicate__ region __object__ Connecticut's_4th_congressional_district"]
Text: ["Abner W Sibal represented Connecticut's 4th Congressional District."]
Predicate: region

Triple: ['__subject__ Abner W. Sibal __predicate__ successor __object__ Donald_J._Irwin']
Text: ["Abner W. Sibal's successor was Donald J. Irwin."]
Predicate: successor

Triple: ['__subject__ Abner W. Sibal __predicate__ successor __object__ Marjorie_Farmer']
Text: ['Abner W Sibal was succeeded by Marjorie Farmer.']
Predicate: successor

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ birthPlace __object__ Connecticut']
Text: ["Abraham A. Ribicoff's place of birth was Connecticut."]
Predicate: birthPlace

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ birthPlace __object__ New_Britain,_Connecticut']
Text: ['New Britain, Connecticut was the birthplace of Abraham A. Ribicoff.']
Predicate: birthPlace

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ birthPlace __object__ United_States']
Text: ['The United States is the birthplace of Abraham A. Ribicoff.']
Predicate: birthPlace

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ deathPlace __object__ New York City, New York, U.S.']
Text: ['New York City, New York, U.S. is the death place of Abraham A. Ribicoff.']
Predicate: deathPlace

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ deathPlace __object__ New_York']
Text: ['Abraham A Ribicoff died in New York.']
Predicate: deathPlace

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ deathPlace __object__ New_York_City']
Text: ['Abraham A. Ribicoff died in New York City.']
Predicate: deathPlace

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ deathPlace __object__ United_States']
Text: ['Abraham A. Ribicoff died in the United States.']
Predicate: deathPlace

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ inOfficeWhilePresident __object__ John_F._Kennedy']
Text: ['Abraham A. Ribicoff was in office while John F. Kennedy was president.']
Predicate: inOfficeWhilePresident

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ nationality __object__ American']
Text: ["Abraham A. Ribicoff's nationality is American."]
Predicate: nationality

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ nationality __object__ United_States']
Text: ['Abraham A. Ribicoff is a United States national.']
Predicate: nationality

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ office __object__ Governor of Connecticut']
Text: ['Abraham A Ribicoff worked as Governor of Connecticut.']
Predicate: office

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ office __object__ United States Secretary of Health, Education, and Welfare']
Text: ['Abraham A. Ribicoff once worked for the United States Secretary of Health, Education, and Welfare office.']
Predicate: office

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ party __object__ Democratic_Party_(United_States)']
Text: ['Abraham A. Ribicoff is a member of the United States Democratic Party.']
Predicate: party

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ spouse __object__ Ruth Ribicoff']
Text: ['Abraham A. Ribicoff spouse is Ruth Ribicoff.']
Predicate: spouse

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ spouse __object__ Casey_Ribicoff']
Text: ["Abraham A. Ribicoff's spouse was Casey Ribicoff."]
Predicate: spouse

Triple: ['__subject__ Abraham A. Ribicoff __predicate__ successor __object__ John_N._Dempsey']
Text: ['John N Dempsey was preceded by Abraham A Ribicoff.']
Predicate: successor

Triple: ['__subject__ Adam Holloway __predicate__ activeYearsStartDate __object__ 2005-05-05']
Text: ['Adam Holloway began his career on 5th May 2005.']
Predicate: activeYearsStartDate

Triple: ['__subject__ Adam Holloway __predicate__ almaMater __object__ Magdalene_College,_Cambridge']
Text: ["Adam Holloway's Alma mater is Magdalene College, Cambridge."]
Predicate: almaMater

Triple: ['__subject__ Adam Holloway __predicate__ battle __object__ Gulf_War']
Text: ['Adam Holloway was involved in Gulf War battles.']
Predicate: battle

Triple: ['__subject__ Adam Holloway __predicate__ birthPlace __object__ Faversham, Kent, England']
Text: ['Adam Holloway was born in Faversham Kent, England.']
Predicate: birthPlace

Triple: ['__subject__ Adam Holloway __predicate__ birthPlace __object__ Faversham']
Text: ['Faversham was the birthplace of Adam Holloway.']
Predicate: birthPlace

Triple: ['__subject__ Adam Holloway __predicate__ militaryBranch __object__ Grenadier_Guards']
Text: ['Adam Holloway was in the Grenadier Guards in the military.']
Predicate: militaryBranch

Triple: ['__subject__ Adam Holloway __predicate__ nationality __object__ United_Kingdom']
Text: ['Adam Holloway is from the United Kingdom.']
Predicate: nationality

Triple: ['__subject__ Adam Holloway __predicate__ numberOfVotesAttained __object__ 9312']
Text: ['Adam Holloway obtained 9312 votes in his election.']
Predicate: numberOfVotesAttained

Triple: ['__subject__ Adam Holloway __predicate__ office __object__ Member_of_Parliament_for_Gravesham']
Text: ['Adam Holloway worked as a member of Parliament for Gravesham.']
Predicate: office

Triple: ['__subject__ Adam Holloway __predicate__ office __object__ Member_of_parliament']
Text: ['Adam Holloway worked as a Member of parliament.']
Predicate: office

Triple: ['__subject__ Adam Holloway __predicate__ party __object__ Conservative_Party_(UK)']
Text: ['Adam Holloway is in the Conservative Party (UK).']
Predicate: party

Triple: ['__subject__ Adam Koc __predicate__ award __object__ Cross_of_Independence']
Text: ['Adam Koc was awarded the Cross of Independence.']
Predicate: award

Triple: ['__subject__ Adam Koc __predicate__ award __object__ Legion_of_Honour']
Text: ['Adam Koc was awarded the Legion of Honour.']
Predicate: award

Triple: ["__subject__ Adam Koc __predicate__ award __object__ Officer's_Star_Parasol"]
Text: ["Adam Koc received the award Officer's Star Parasol."]
Predicate: award

Triple: ['__subject__ Adam Koc __predicate__ award __object__ Order_of_Polonia_Restituta']
Text: ['Adam Koc was awarded the Order of Polonia Restituta.']
Predicate: award

Triple: ['__subject__ Adam Koc __predicate__ award __object__ Virtuti_Militari']
Text: ['Adam Koc was awarded the Virtuti Militari.']
Predicate: award

Triple: ['__subject__ Adam Koc __predicate__ battle __object__ Polish–Soviet_War']
Text: ['Adam Koc was involved in battles in the Polish–Soviet War.']
Predicate: battle

Triple: ['__subject__ Adam Koc __predicate__ battle __object__ World_War_I']
Text: ['Adam Koc fought in World War I.']
Predicate: battle

Triple: ['__subject__ Adam Koc __predicate__ birthPlace __object__ Congress_Poland']
Text: ['Adam Koc was born in Congress in Poland.']
Predicate: birthPlace

Triple: ['__subject__ Adam Koc __predicate__ birthPlace __object__ Suwałki']
Text: ['The birth place of Adam Koc was Suwalki.']
Predicate: birthPlace

Triple: ['__subject__ Adam Koc __predicate__ nationality __object__ Poland']
Text: ["Adam Koc's nationality is Poland."]
Predicate: nationality

Triple: ['__subject__ Adenan Satem __predicate__ birthPlace __object__ Japanese_occupation_of_British_Borneo']
Text: ['Japanese Occupation of British Borneo is the birth place of Adenan Satem.']
Predicate: birthPlace

Triple: ['__subject__ Adenan Satem __predicate__ inOfficeWhileVicePresident __object__ Abdul_Taib_Mahmud']
Text: ['Adenan Satem was in office during the time Abdul Taib Mahmud was Vice President.']
Predicate: inOfficeWhileVicePresident

Triple: ['__subject__ Adolf Schärf __predicate__ birthPlace __object__ Austria-Hungary']
Text: ['Adolf Schärf was born in Austria-Hungary.']
Predicate: birthPlace

Triple: ['__subject__ Adonis Georgiadis __predicate__ almaMater __object__ National_and_Kapodistrian_University_of_Athens']
Text: ["Adonis Georgiadis's Alma mater is the National and Kapodistrian University of Athens."]
Predicate: almaMater

Triple: ['__subject__ Adonis Georgiadis __predicate__ birthPlace __object__ Athens']
Text: ['Adonis Georgiadis was born in Athens.']
Predicate: birthPlace

Triple: ['__subject__ Adonis Georgiadis __predicate__ birthPlace __object__ Greece']
Text: ['Adonis Georgiadis was born in Greece.']
Predicate: birthPlace

Triple: ['__subject__ Adonis Georgiadis __predicate__ office __object__ Deputy Parliamentary Spokesman of Popular Orthodox Rally']
Text: ['Adonis Georgiadis worked as the Deputy Parliamentary Spokesman for the Popular Orthodox Rally.']
Predicate: office

Triple: ['__subject__ Adonis Georgiadis __predicate__ office __object__ Minister for Health']
Text: ['Adonis Georgiadis worked as Minister for Health.']
Predicate: office

Triple: ['__subject__ Adonis Georgiadis __predicate__ office __object__ Spokesman of Popular Orthodox Rally']
Text: ['Adonis Georgiadis worked for the office of the Spokesman of Popular Orthodox Rally.']
Predicate: office

Triple: ['__subject__ Adonis Georgiadis __predicate__ office __object__ Vice-President of New Democracy']
Text: ['Adonis Georgiadis works at office as "Vice-President of New Democracy".']
Predicate: office

Triple: ['__subject__ Adonis Georgiadis __predicate__ office __object__ Member of the Hellenic Parliament']
Text: ['Adonis Georgiadis was a member of the Hellenic Parliament.']
Predicate: office

Triple: ['__subject__ Adonis Georgiadis __predicate__ office __object__ Ministry_of_Economy,_Development_and_Tourism_(Greece)']
Text: ['Adonis Georgiadis worked for the Ministry of Economy, Development and Tourism in Greece.']
Predicate: office

Triple: ['__subject__ Adonis Georgiadis __predicate__ office __object__ Ministry_of_Health_(Greece)']
Text: ['Adonis Georgiadis worked at the Ministry of Health in Greece.']
Predicate: office

Triple: ['__subject__ Adonis Georgiadis __predicate__ party __object__ New_Democracy_(Greece)']
Text: ['Adonis Georgiadis was a member of the New Democracy party in Greece.']
Predicate: party

Triple: ['__subject__ Adonis Georgiadis __predicate__ successor __object__ Makis_Voridis']
Text: ['Makis Voridis was the successor of Adonis Georgiadis.']
Predicate: successor

Triple: ['__subject__ Agnes Kant __predicate__ almaMater __object__ Radboud_University_Nijmegen']
Text: ["Agnes Kant's Alma mater is Radboud University Nijmegen."]
Predicate: almaMater

Triple: ['__subject__ Agnes Kant __predicate__ birthPlace __object__ West_Germany']
Text: ['Agnes Kant was born in West Germany.']
Predicate: birthPlace

Triple: ['__subject__ Agnes Kant __predicate__ country __object__ Netherlands']
Text: ["Agnes Kant's country is the Netherlands."]
Predicate: country

Triple: ['__subject__ Agnes Kant __predicate__ nationality __object__ Netherlands']
Text: ['Agnes Kant is a national of the Netherlands.']
Predicate: nationality

Triple: ['__subject__ Agnes Kant __predicate__ office __object__ Member of the House of Representatives']
Text: ['Agnes Kant worked as a member of the House of Representatives.']
Predicate: office

Triple: ['__subject__ Agnes Kant __predicate__ office __object__ Parliamentary_group_leader']
Text: ['Agnes Kant worked as a Parliamentary group leader.']
Predicate: office

Triple: ['__subject__ Agnes Kant __predicate__ office __object__ Socialist_Party_(Netherlands)']
Text: ['Agnes Kant worked at the Socialist Party in the Netherlands.']
Predicate: office

Triple: ['__subject__ Agnes Kant __predicate__ party __object__ Socialist_Party_(Netherlands)']
Text: ['Agnes Kant is a member of the Socialist Party in the Netherlands.']
Predicate: party

Triple: ['__subject__ Agnes Kant __predicate__ residence __object__ Doesburg']
Text: ['Agnes Kant was a resident of Doesburg.']
Predicate: residence

Triple: ['__subject__ Agnes Ward White __predicate__ deathPlace __object__ Parkersburg,_West_Virginia']
Text: ['Agnes Ward White died at Parkersburg, West Virginia.']
Predicate: deathPlace

Triple: ['__subject__ Airey Neave __predicate__ activeYearsEndDate __object__ 1979-03-30']
Text: ['Airey Neave ended his career on 30th March 1979.']
Predicate: activeYearsEndDate

Triple: ['__subject__ Airey Neave __predicate__ activeYearsStartDate __object__ 1974-03-04']
Text: ['Airey Neave began his career on March 4th 1974.']
Predicate: activeYearsStartDate

Triple: ['__subject__ Airey Neave __predicate__ award __object__ Distinguished_Service_Order']
Text: ['Airey Neave was awarded the Distinguished Service Order.']
Predicate: award

Triple: ['__subject__ Airey Neave __predicate__ award __object__ Order_of_the_British_Empire']
Text: ['Airey Neave was awarded the Order of the British Empire.']
Predicate: award

Triple: ['__subject__ Airey Neave __predicate__ battle __object__ Battle_of_France']
Text: ['Airey Neave was involved in the Battle of France.']
Predicate: battle

Triple: ['__subject__ Airey Neave __predicate__ battle __object__ World_War_II']
Text: ['Airey Neave was in World War II.']
Predicate: battle

Triple: ['__subject__ Airey Neave __predicate__ birthPlace __object__ Knightsbridge']
Text: ['Airey Neave was born in Knightsbridge.']
Predicate: birthPlace

Triple: ['__subject__ Airey Neave __predicate__ deathPlace __object__ Westminster Hospital, London']
Text: ['Airey Neave dies at Westminster Hospital, London.']
Predicate: deathPlace

Triple: ['__subject__ Airey Neave __predicate__ unit __object__ Royal_Artillery']
Text: ["Airey Neave's unit was the Royal Artillery."]
Predicate: unit

Triple: ['__subject__ Albert B. White __predicate__ activeYearsEndDate __object__ 1905-03-04']
Text: ['Albert B. White finished his career on March 4th 1905.']
Predicate: activeYearsEndDate

Triple: ['__subject__ Albert B. White __predicate__ activeYearsStartDate __object__ 1901-03-04']
Text: ['Albert B. White started his career on March 4, 1901.']
Predicate: activeYearsStartDate

Triple: ['__subject__ Albert B. White __predicate__ birthDate __object__ 1856-09-22']
Text: ['Albert B White was born on 22nd September 1856.']
Predicate: birthDate

Triple: ['__subject__ Albert B. White __predicate__ birthPlace __object__ Cleveland']
Text: ['Albert B. White was born in Cleveland.']
Predicate: birthPlace

Triple: ['__subject__ Albert B. White __predicate__ birthYear __object__ 1856']
Text: ["Albert B. White's year of birth was 1856."]
Predicate: birthYear

Triple: ['__subject__ Albert B. White __predicate__ deathDate __object__ 1941-07-03']
Text: ["Albert B. White's date of death was 1941-07-03."]
Predicate: deathDate

Triple: ['__subject__ Albert B. White __predicate__ deathPlace __object__ Parkersburg,_West_Virginia']
Text: ['Albert B White died at Parkersburg, West Virginia.']
Predicate: deathPlace

Triple: ['__subject__ Albert B. White __predicate__ deathYear __object__ 1941']
Text: ["Albert B. White's year of death was 1941."]
Predicate: deathYear

Triple: ['__subject__ Albert B. White __predicate__ office __object__ Governor of West Virginia']
Text: ['Albert B. White worked as the Governor of West Virginia.']
Predicate: office

Triple: ['__subject__ Albert B. White __predicate__ profession __object__ Politician']
Text: ["Albert B. White's profession is politician."]
Predicate: profession

Triple: ['__subject__ Albert B. White __predicate__ successor __object__ William_M._O._Dawson']
Text: ['Albert B White was succeeded by William M O Dawson.']
Predicate: successor

Triple: ['__subject__ Albert Jennings Fountain __predicate__ battle __object__ American_Civil_War']
Text: ['Albert Jennings Fountain battled in the American Civil War.']
Predicate: battle

Triple: ['__subject__ Albert Jennings Fountain __predicate__ battle __object__ American_Indian_Wars']
Text: ['Albert Jennings Fountain fought in battles in the American Indian Wars.']
Predicate: battle

Triple: ['__subject__ Albert Jennings Fountain __predicate__ birthPlace __object__ New_York']
Text: ['Albert Jennings Fountain was born in New York.']
Predicate: birthPlace

Triple: ['__subject__ Albert Jennings Fountain __predicate__ birthPlace __object__ New_York_City']
Text: ['New York City was the birthplace of Albert Jennings Fountain.']
Predicate: birthPlace

Triple: ['__subject__ Albert Jennings Fountain __predicate__ birthPlace __object__ Staten_Island']
Text: ['Staten Island is the birth place of Albert Jennings Fountain.']
Predicate: birthPlace

Triple: ['__subject__ Albert Jennings Fountain __predicate__ birthPlace __object__ United_States']
Text: ['The United States was the birthplace of Albert Jennings Fountain.']
Predicate: birthPlace

Triple: ['__subject__ Albert Jennings Fountain __predicate__ deathDate __object__ 1896-02-01']
Text: ["Albert Jennings Fountain's date of death was 1896-02-01."]
Predicate: deathDate

Triple: ['__subject__ Albert Jennings Fountain __predicate__ deathPlace __object__ Doña_Ana_County,_New_Mexico']
Text: ['Albert Jennings Fountain died in Dona Ana County, New Mexico.']
Predicate: deathPlace

Triple: ['__subject__ Albert Jennings Fountain __predicate__ deathPlace __object__ New_Mexico_Territory']
Text: ["Albert Jennings Fountain's place of death was in the New Mexico Territory."]
Predicate: deathPlace

Triple: ['__subject__ Albert Jennings Fountain __predicate__ deathPlace __object__ United_States']
Text: ['Albert Jennings Fountain died in the U.S.']
Predicate: deathPlace

Triple: ['__subject__ Albert Jennings Fountain __predicate__ inOfficeWhileVicePresident __object__ Edmund_J._Davis']
Text: ['Albert Jennings Fountain was in office while Edmund J. Davis was Vice President.']
Predicate: inOfficeWhileVicePresident

Triple: ['__subject__ Albert Jennings Fountain __predicate__ militaryBranch __object__ 1st_Regiment_New_Mexico_Volunteer_Cavalry']
Text: ['The branch of military Albert Jennings Fountain belonged to was 1st Regiment New Mexico Volunteer Cavalry.']
Predicate: militaryBranch

Triple: ['__subject__ Albert Jennings Fountain __predicate__ office __object__ President_pro_tempore_of_the_Texas_Senate']
Text: ['Albert Jennings Fountain worked as President pro tempore of the Texas Senate.']
Predicate: office

Triple: ['__subject__ Albert Jennings Fountain __predicate__ party __object__ Republican_Party_(United_States)']
Text: ['Albert Jennings Fountain was a member of the United States republican party.']
Predicate: party

Triple: ['__subject__ Alberto Teisaire __predicate__ birthDate __object__ 1891-05-20']
Text: ['Alberto Teisaire was born in 1891-05-20.']
Predicate: birthDate

Triple: ['__subject__ Alberto Teisaire __predicate__ birthPlace __object__ Mendoza,_Argentina']
Text: ['Alberto Teisaire was born in Mendoza in Argentina.']
Predicate: birthPlace

Triple: ['__subject__ Alberto Teisaire __predicate__ deathPlace __object__ Buenos_Aires']
Text: ["Alberto Teisaire's place of death was Buenos Aires."]
Predicate: deathPlace

Triple: ['__subject__ Alberto Teisaire __predicate__ inOfficeWhilePresident __object__ Juan_Perón']
Text: ['Alberto Teisaire was in office while Juan Perón was president.']
Predicate: inOfficeWhilePresident

Triple: ['__subject__ Alberto Teisaire __predicate__ office __object__ Provisional President of the Argentine Senate']
Text: ['Alberto Teisaire worked as the Provisional President of the Argentine Senate.']
Predicate: office

Triple: ['__subject__ Alberto Teisaire __predicate__ party __object__ Justicialist_Party']
Text: ["Alberto Teisaire's party is Justicialist Party."]
Predicate: party

Triple: ['__subject__ Alberto Teisaire __predicate__ profession __object__ Rear_admiral']
Text: ['Alberto Teisaire is a Rear Admiral.']
Predicate: profession

Triple: ['__subject__ Alberto Teisaire __predicate__ successor __object__ Isaac_Rojas']
Text: ['Isaac Rojas was the successor to Alberto Teisaire.']
Predicate: successor

Triple: ['__subject__ Alfons Gorbach __predicate__ birthPlace __object__ Austria']
Text: ['Alfons Gorbach was born in Austria.']
Predicate: birthPlace

Triple: ['__subject__ Alfons Gorbach __predicate__ birthPlace __object__ Austria-Hungary']
Text: ['Alfons Gorbach was born in Austria-Hungary.']
Predicate: birthPlace

Triple: ['__subject__ Alfons Gorbach __predicate__ birthPlace __object__ County_of_Tyrol']
Text: ['Alfons Gorbach was born in the County of Tyrol.']
Predicate: birthPlace

Triple: ['__subject__ Alfons Gorbach __predicate__ birthPlace __object__ Imst']
Text: ['Alfons Gorbach was born in Imst.']
Predicate: birthPlace

Triple: ['__subject__ Alfons Gorbach __predicate__ birthPlace __object__ Tyrol_(state)']
Text: ["Alfons Gorbach's place of birth was the state, Tyrol."]
Predicate: birthPlace

Triple: ['__subject__ Alfons Gorbach __predicate__ deathPlace __object__ Graz']
Text: ['Alfons Gorbach died in Graz.']
Predicate: deathPlace

Triple: ['__subject__ Alfons Gorbach __predicate__ deathPlace __object__ Styria']
Text: ['Alfons Gorbach died in Styria.']
Predicate: deathPlace

Triple: ['__subject__ Alfons Gorbach __predicate__ inOfficeWhilePresident __object__ Adolf_Schärf']
Text: ["Alfons Gorbach was in office during President Adolf Schärf's reign."]
Predicate: inOfficeWhilePresident

Triple: ["__subject__ Alfons Gorbach __predicate__ party __object__ Austrian_People's_Party"]
Text: ["Alfons Gorbach was a politician from the Austrian People's Party."]
Predicate: party

Triple: ['__subject__ Alfons Gorbach __predicate__ successor __object__ Josef_Klaus']
Text: ['Josef Klaus succeeded Alfons Gorbach.']
Predicate: successor

Triple: ['__subject__ Alfred Moore Scales __predicate__ activeYearsStartDate __object__ 1857-03-04']
Text: ['Alfred Moore Scales started his career on 1857-03-04.']
Predicate: activeYearsStartDate

Triple: ['__subject__ Alfred Moore Scales __predicate__ activeYearsStartDate __object__ 1885-01-21']
Text: ['Alfred Moore Scales began his career on January 21st 1885.']
Predicate: activeYearsStartDate

Triple: ['__subject__ Alfred Moore Scales __predicate__ almaMater __object__ University_of_North_Carolina_at_Chapel_Hill']
Text: ['The alma Mater of Alfred Moore Scales is the University of North Carolina at Chapel Hill.']
Predicate: almaMater

Triple: ['__subject__ Alfred Moore Scales __predicate__ battle __object__ American_Civil_War']
Text: ['Alfred Moore Scales took part in American Civil War battles.']
Predicate: battle

Triple: ['__subject__ Alfred Moore Scales __predicate__ battle __object__ Battle_of_Fredericksburg']
Text: ['Alfred Moore Scales fought in battles such as the Battle of Fredericksburg.']
Predicate: battle

Triple: ['__subject__ Alfred Moore Scales __predicate__ battle __object__ Battle_of_Gettysburg']
Text: ['One of the battles Alfred Moore Scales was involved in was the Battle of Gettysburg.']
Predicate: battle

Triple: ['__subject__ Alfred Moore Scales __predicate__ battle __object__ Peninsula_Campaign']
Text: ['Alfred Moore Scales was active during the Peninsula Campaign.']
Predicate: battle

Triple: ['__subject__ Alfred Moore Scales __predicate__ battle __object__ Siege_of_Petersburg']
Text: ['Alfred Moore Scales took part in the Siege of Petersburg.']
Predicate: battle

Triple: ['__subject__ Alfred Moore Scales __predicate__ birthPlace __object__ Reidsville,_North_Carolina']
Text: ['Alfred Moore Scales was born in Reidsville, North Carolina.']
Predicate: birthPlace

Triple: ['__subject__ Alfred Moore Scales __predicate__ country __object__ United_States']
Text: ['Alfred Moore Scales came from the U.S.']
Predicate: country

Triple: ['__subject__ Alfred Moore Scales __predicate__ office __object__ Governor of North Carolina']
Text: ['Alfred Moore Scales was Governor of North Carolina.']
Predicate: office

Triple: ['__subject__ Alfred Moore Scales __predicate__ party __object__ Democratic_Party_(United_States)']
Text: ['Alfred Moore Scales is a member of the Democratic Party in the United States.']
Predicate: party

Triple: ['__subject__ Alfred Moore Scales __predicate__ successor __object__ Daniel_Gould_Fowle']
Text: ['Daniel Gould Fowle suceeded Alfred Moore Scales.']
Predicate: successor

Triple: ['__subject__ Alfred Moore Scales __predicate__ successor __object__ James_Madison_Leach']
Text: ['The successor of Alfred Moore Scales was James Madison Leach.']
Predicate: successor

Triple: ['__subject__ Alfred Moore Scales __predicate__ successor __object__ James_W._Reid_(politician)']
Text: ["Alfred Moore Scales's successor was the politician, James W. Reid."]
Predicate: successor

Triple: ['__subject__ Alfred N. Phillips __predicate__ activeYearsEndDate __object__ 1939-01-03']
Text: ['Alfred N Phillips retired on the date 1939-01-03.']
Predicate: activeYearsEndDate

Triple: ['__subject__ Alfred N. Phillips __predicate__ birthPlace __object__ Connecticut']
Text: ['Alfred N. Phillips was born in Connecticut.']
Predicate: birthPlace

Triple: ['__subject__ Alfred N. Phillips __predicate__ militaryBranch __object__ United_States_Army']
Text: ['Alfred N. Phillips served in the United States, Army.']
Predicate: militaryBranch

Triple: ["__subject__ Alfred N. Phillips __predicate__ office __object__ Member of the U.S. House of Representatives from Connecticut's 4th district"]
Text: ["Alfred N Phillips worked as Member of the U.S. House of Representatives from Connecticut's 4th district."]
Predicate: office

Triple: ['__subject__ Alfred N. Phillips __predicate__ office __object__ United_States_House_of_Representatives']
Text: ['Alfred N. Phillips worked at the United States House of Representatives.']
Predicate: office

Triple: ['__subject__ Alfred N. Phillips __predicate__ party __object__ Democratic_Party_(United_States)']
Text: ['Alfred N. Phillips was a member of the United States Democratic Party.']
Predicate: party

Triple: ['__subject__ Alfred N. Phillips __predicate__ successor __object__ Albert_E._Austin']
Text: ['The successor to Alfred N. Phillips is Albert E. Austin.']
Predicate: successor

Triple: ['__subject__ Allan Shivers __predicate__ activeYearsStartDate __object__ 1949-07-11']
Text: ['Allan Shivers started his active career on July 11th 1949.']
Predicate: activeYearsStartDate

Triple: ['__subject__ Allan Shivers __predicate__ birthPlace __object__ Lufkin,_Texas']
Text: ['Allan Shivers was born in Lufkin, Texas.']
Predicate: birthPlace

Triple: ['__subject__ Allan Shivers __predicate__ office __object__ Governor of Texas']
Text: ['Allan Shivers was Governor of Texas.']
Predicate: office

Triple: ['__subject__ Allan Shivers __predicate__ office __object__ Lieutenant Governor of Texas']
Text: ['Allan Shivers was Lieutenant Governor of Texas.']
Predicate: office

Triple: ['__subject__ Allan Shivers __predicate__ office __object__ Member of the Texas State Senate from District 4 (Port Arthur)']
Text: ['Allan Shivers worked as a member of the Texas State Senate from District 4 (Port Arthur).']
Predicate: office

Triple: ['__subject__ Allan Shivers __predicate__ party __object__ Democratic_Party_(United_States)']
Text: ['Allan Shivers served in the Democratic Party in the U.S.']
Predicate: party

Triple: ['__subject__ Allan Shivers __predicate__ successor __object__ Ben_Ramsey']
Text: ['Allan Shivers was succeeded by Ben Ramsey.']
Predicate: successor

Triple: ['__subject__ Allan Shivers __predicate__ successor __object__ Wilfred_R._Cousins,_Jr.']
Text: ['Wilfred R. Cousins, Jr. was the successor of Allan Shivers.']
Predicate: successor

Triple: ['__subject__ Alvah Sabin __predicate__ birthDate __object__ 1793-10-23']
Text: ["1793-10-23 was Alvah Sabin's birthdate."]
Predicate: birthDate

Triple: ['__subject__ Alvah Sabin __predicate__ birthPlace __object__ Georgia,_Vermont']
Text: ['Georgia Vermont is the birthplace of Alvah Sabin.']
Predicate: birthPlace

Triple: ['__subject__ Alvah Sabin __predicate__ deathPlace __object__ Sycamore,_Illinois']
Text: ['Alvah Sabin died in Sycamore, Illinois.']
Predicate: deathPlace

Triple: ['__subject__ Alvah Sabin __predicate__ office __object__ Secretary_of_State_of_Vermont']
Text: ['Alvah Sabin worked as the secretary of the State of Vermont.']
Predicate: office

Triple: ["__subject__ Alvah Sabin __predicate__ region __object__ Vermont's_3rd_congressional_district"]
Text: ["Alvah Sabin represented Vermont's 3rd Congressional District."]
Predicate: region

Triple: ['__subject__ Alvah Sabin __predicate__ religion __object__ Baptists']
Text: ['Alvah Sabin was a Baptist.']
Predicate: religion

Triple: ['__subject__ Alvah Sabin __predicate__ successor __object__ Homer_Elihu_Royce']
Text: ['Homer Elihu Royce was preceded by Alvah Sabin.']
Predicate: successor

Triple: ['__subject__ American Civil War __predicate__ commander __object__ Abraham_Lincoln']
Text: ['Abraham Lincoln was a commander in the American Civil War.']
Predicate: commander

Triple: ['__subject__ American Civil War __predicate__ commander __object__ Jefferson_Davis']
Text: ['Jefferson Davis was a commander in the American Civil War.']
Predicate: commander

Triple: ['__subject__ Antonis Samaras __predicate__ birthPlace __object__ Athens']
Text: ['Antonis Samaras was born in Athens.']
Predicate: birthPlace

Triple: ['__subject__ Antonis Samaras __predicate__ hasDeputy __object__ Evangelos_Venizelos']
Text: ['Antonis Samaras has Evangelos Venizelos for a Deputy.']
Predicate: hasDeputy

Triple: ['__subject__ Antonis Samaras __predicate__ inOfficeWhilePrimeMinister __object__ Konstantinos_Mitsotakis']
Text: ['Antonis Samaras was in office while Konstantinos Mitsotakis was Prime Minister.']
Predicate: inOfficeWhilePrimeMinister

Triple: ['__subject__ Argentina __predicate__ language __object__ Spanish_language']
Text: ['The language of Argentina is Spanish.']
Predicate: language

Triple: ['__subject__ Argentina __predicate__ officialLanguage __object__ Spanish_language']
Text: ['Spanish is the official language in Argentina.']
Predicate: officialLanguage

Triple: ['__subject__ Austria __predicate__ leader __object__ Doris_Bures']
Text: ['Doris Bures is a leader in Austria.']
Predicate: leader

Triple: ['__subject__ Battle of Antietam __predicate__ isPartOfMilitaryConflict __object__ American_Civil_War']
Text: ['The Battle of Antietam was part of the military conflict known as the American Civil War.']
Predicate: isPartOfMilitaryConflict

Triple: ['__subject__ Battle of Chancellorsville __predicate__ isPartOfMilitaryConflict __object__ American_Civil_War']
Text: ['Battle of Chancellorsville was part of the American Civil War conflict.']
Predicate: isPartOfMilitaryConflict

Triple: ['__subject__ Battle of Cold Harbor __predicate__ commander __object__ Robert_E._Lee']
Text: ['Robert E Lee was the commander in the Battle of Cold Harbor.']
Predicate: commander

Triple: ['__subject__ Battle of France __predicate__ commander __object__ Gerd_von_Rundstedt']
Text: ['Gerd Von Rundstedt was the commmander in the Battle of France.']
Predicate: commander

Triple: ['__subject__ Battle of France __predicate__ commander __object__ Hugo_Sperrle']
Text: ['Hugo Sperrle was a commander in the Battle of France.']
Predicate: commander

Triple: ['__subject__ Battle of Fredericksburg __predicate__ commander __object__ Robert_E._Lee']
Text: ['The commander at the Battle of Fredericksburg was Robert E Lee.']
Predicate: commander

Triple: ['__subject__ Battle of Gettysburg __predicate__ commander __object__ Robert_E._Lee']
Text: ['Robert E Lee was a commander in the Battle of Gettysburg.']
Predicate: commander

Triple: ['__subject__ Battle of Gettysburg __predicate__ isPartOfMilitaryConflict __object__ American_Civil_War']
Text: ['The Battle of Gettysburg was part of the American Civil War conflict.']
Predicate: isPartOfMilitaryConflict

Triple: ['__subject__ Battle of Salem Church __predicate__ commander __object__ Robert_E._Lee']
Text: ['Robert E. Lee was a commander in the Battle of Salem Church.']
Predicate: commander

Triple: ['__subject__ Battle of Salem Church __predicate__ isPartOfMilitaryConflict __object__ American_Civil_War']
Text: ['The Battle of Salem Church was part of the American Civil War conflict.']
Predicate: isPartOfMilitaryConflict

Triple: ['__subject__ Battle of the Wilderness __predicate__ isPartOfMilitaryConflict __object__ American_Civil_War']
Text: ['The Battle of the Wilderness was fought during the American Civil War.']
Predicate: isPartOfMilitaryConflict

Triple: ['__subject__ Buenos Aires __predicate__ governingBody __object__ Buenos_Aires_City_Legislature']
Text: ['The governing body in Buenos Aires is the Buenos Aires City Legislature.']
Predicate: governingBody

Triple: ['__subject__ Buenos Aires __predicate__ leader __object__ Diego_Santilli']
Text: ['The leader of Buenos Aires is Diego Santilli.']
Predicate: leader

Triple: ['__subject__ Buenos Aires __predicate__ leader __object__ Horacio_Rodríguez_Larreta']
Text: ['Horacio Rodríguez Larreta is the name of the leader in Buenos Aires.']
Predicate: leader

Triple: ['__subject__ Casey Ribicoff __predicate__ birthPlace __object__ Chicago']
Text: ["Casey Ribicoff's place of birth was Chicago."]
Predicate: birthPlace

Triple: ['__subject__ Cleveland __predicate__ country __object__ United_States']
Text: ['Cleveland is in the United States.']
Predicate: country

Triple: ['__subject__ Daniel Gould Fowle __predicate__ almaMater __object__ Princeton_University']
Text: ["Daniel Gould Fowle's Alma Mater is Princeton University."]
Predicate: almaMater

Triple: ['__subject__ Emile Roemer __predicate__ party __object__ Socialist_Party_(Netherlands)']
Text: ['Emile Roemer is a member of the Socialist Party in the Netherlands.']
Predicate: party

Triple: ['__subject__ Erasmus University Rotterdam __predicate__ affiliation __object__ Association_of_MBAs']
Text: ['Erasmus University in Rotterdam is affiliated to the Association of MBAs.']
Predicate: affiliation

Triple: ['__subject__ Felipe González __predicate__ predecessor __object__ Rodolfo_Llopis']
Text: ['Rodolfo Llopis preceded Felipe Gonzalez.']
Predicate: predecessor

Triple: ['__subject__ Grenadier Guards __predicate__ battle __object__ Battle_of_Waterloo']
Text: ['Grenadier Guards took part in the Battle of Waterloo.']
Predicate: battle

Triple: ['__subject__ Gulf War __predicate__ commander __object__ George_H._W._Bush']
Text: ['George H. W. Bush was a commander in the Gulf War.']
Predicate: commander

Triple: ['__subject__ Gulf War __predicate__ commander __object__ John_Major']
Text: ['John Major was a commander in the Gulf War.']
Predicate: commander

Triple: ['__subject__ House of Representatives (Netherlands) __predicate__ leader __object__ Khadija_Arib']
Text: ['Khadija Arib is the leader of the House of Representatives in the Netherlands.']
Predicate: leader

Triple: ['__subject__ Juan Carlos I of Spain __predicate__ birthPlace __object__ Rome']
Text: ['Rome is the Birthplace of Juan Carlos I of Spain.']
Predicate: birthPlace

Triple: ['__subject__ Juan Carlos I of Spain __predicate__ predecessor __object__ Alfonso_XIII_of_Spain']
Text: ["Juan Carlos I of Spain's predecessor was Alfonso XIII of Spain."]
Predicate: predecessor

Triple: ['__subject__ Juan Carlos I of Spain __predicate__ spouse __object__ Queen_Sofía_of_Spain']
Text: ['Queen Sofia of Spain is the wife of Juan Carlos I of Spain.']
Predicate: spouse

Triple: ['__subject__ Juan Perón __predicate__ inOfficeWhileGovernor __object__ Hortensio_Quijano']
Text: ['Juan Peron served in office at the same time that Hortensio Quijano was Governor.']
Predicate: inOfficeWhileGovernor

Triple: ['__subject__ Juan Perón __predicate__ inOfficeWhileVicePresident __object__ Hortensio_Quijano']
Text: ['Juan Peron was in office while Hortensio Quijano was vice president.']
Predicate: inOfficeWhileVicePresident

Triple: ['__subject__ Juan Perón __predicate__ spouse __object__ Eva_Perón']
Text: ['Juan Perón was married to Eva Perón.']
Predicate: spouse

Triple: ['__subject__ Makis Voridis __predicate__ birthPlace __object__ Athens']
Text: ['Athens was the birthplace of Makis Voridis.']
Predicate: birthPlace

Triple: ['__subject__ Mike Akhigbe __predicate__ militaryBranch __object__ Nigerian_Navy']
Text: ['Mike Akhigbe was in the Nigerian Navy.']
Predicate: militaryBranch

Triple: ['__subject__ Mike Akhigbe __predicate__ successor __object__ Atiku_Abubakar']
Text: ["Mike Akhigbe's successor was Atiku Abubakar."]
Predicate: successor

Triple: ['__subject__ Netherlands __predicate__ currency __object__ Euro']
Text: ['The currency in the Netherlands is the euro.']
Predicate: currency

Triple: ['__subject__ New Democracy (Greece) __predicate__ colour __object__ Blue']
Text: ['The colour of the New Democracy in Greece is blue.']
Predicate: colour

Triple: ['__subject__ New York __predicate__ language __object__ Arabic']
Text: ['One of the languages spoken in New York is Arabic.']
Predicate: language

Triple: ['__subject__ New York __predicate__ language __object__ French_language']
Text: ['French is one of the languages spoken in New York.']
Predicate: language

Triple: ['__subject__ Nigeria __predicate__ leader __object__ Yemi_Osinbajo']
Text: ['Yemi Osinbajo is the leader of Nigeria.']
Predicate: leader

Triple: ['__subject__ Nigerian Air Force __predicate__ trainerAircraft __object__ Aermacchi_MB-339']
Text: ['Aermacchi MB-339 is a trainer Aircraft used by the Nigerian Air -Force.']
Predicate: trainerAircraft

Triple: ['__subject__ Olusegun Obasanjo __predicate__ inOfficeWhileVicePresident __object__ Atiku_Abubakar']
Text: ['Olusegun Obasanjo was in office whilst Atiku Abubakar was Vice President.']
Predicate: inOfficeWhileVicePresident

Triple: ['__subject__ Olusegun Obasanjo __predicate__ predecessor __object__ Abdulsalami_Abubakar']
Text: ["Olusegun Obasanjo's predecessor was Abdulsalami Abubakar."]
Predicate: predecessor

Triple: ['__subject__ Parkersburg, West Virginia __predicate__ country __object__ United_States']
Text: ['Parkersburg, West Virginia is in the country, the United States.']
Predicate: country

Triple: ['__subject__ Poland __predicate__ ethnicGroup __object__ Kashubians']
Text: ['Poland has an ethnic group called Kashubians.']
Predicate: ethnicGroup

Triple: ['__subject__ Poland __predicate__ language __object__ Polish_language']
Text: ['The Polish language is used in Poland.']
Predicate: language

Triple: ['__subject__ Polish–Soviet War __predicate__ commander __object__ Joseph_Stalin']
Text: ['Joseph Stalin was a commander in the Polish-Soviet War.']
Predicate: commander

Triple: ['__subject__ Polish–Soviet War __predicate__ commander __object__ Leon_Trotsky']
Text: ['Leon Trotsky was a commander in the Polish-Soviet war.']
Predicate: commander

Triple: ['__subject__ Polish–Soviet War __predicate__ isPartOfMilitaryConflict __object__ Russian_Civil_War']
Text: ['The Polish-Soviet war was a conflict within the Russian Civil War.']
Predicate: isPartOfMilitaryConflict

Triple: ['__subject__ Royal Artillery __predicate__ garrison __object__ Hohne']
Text: ["One of the Royal Artillery's garrisons was in Hohne."]
Predicate: garrison

Triple: ['__subject__ Siege of Petersburg __predicate__ isPartOfMilitaryConflict __object__ American_Civil_War']
Text: ['Siege of Petersburg was part of the American Civil War conflict.']
Predicate: isPartOfMilitaryConflict

Triple: ['__subject__ Socialist Party (Netherlands) __predicate__ colour __object__ Red']
Text: ['Red is the colour of the Socialist Party (Netherlands).']
Predicate: colour

Triple: ['__subject__ Socialist Party (Netherlands) __predicate__ leader __object__ Emile_Roemer']
Text: ['Emile Roemer is a leader in the Netherlands Socialist Party.']
Predicate: leader

Triple: ['__subject__ Spain __predicate__ currency __object__ Euro']
Text: ['The euro is the currency in Spain.']
Predicate: currency

Triple: ['__subject__ Spain __predicate__ language __object__ Spanish_language']
Text: ['The main language used in Spain is Spanish.']
Predicate: language

Triple: ['__subject__ Spain __predicate__ leader __object__ Felipe_VI_of_Spain']
Text: ['The leader in Spain is Felipe VI of Spain.']
Predicate: leader

Triple: ['__subject__ Sycamore, Illinois __predicate__ region __object__ DeKalb_County,_Illinois']
Text: ['Sycamore is located in DeKalb County, Illinois.']
Predicate: region

Triple: ['__subject__ United Kingdom __predicate__ capital __object__ London']
Text: ['London is the capital of the U.K.']
Predicate: capital

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ African_Americans']
Text: ['African Americans are an ethnic group in the U.S.A.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ Native_Americans_in_the_United_States']
Text: ['In the United States one of the ethnic groups is the Native Americans.']
Predicate: ethnicGroup

Triple: ['__subject__ United States Army __predicate__ battle __object__ American_Civil_War']
Text: ['The U.S. Army fought in the American Civil War.']
Predicate: battle

Triple: ['__subject__ United States Army __predicate__ battle __object__ American_Revolutionary_War']
Text: ['The United States Army was involved in battles of the American Revolutionary War.']
Predicate: battle

Triple: ['__subject__ United States Army __predicate__ battle __object__ Invasion_of_Grenada']
Text: ['The United States Army has battled in the Invasion of Grenada.']
Predicate: battle

Triple: ['__subject__ United States Army __predicate__ battle __object__ Korean_War']
Text: ['The United States Army took part in battles in the Korean War.']
Predicate: battle

Triple: ['__subject__ United States Army __predicate__ battle __object__ Operation_Enduring_Freedom']
Text: ['Operation Enduring Freedom is a battle of the United States Army.']
Predicate: battle

Triple: ['__subject__ United States Army __predicate__ battle __object__ Whiskey_Rebellion']
Text: ['The United States Army took part in the battle called Whiskey Rebellion.']
Predicate: battle

Triple: ['__subject__ Vermont __predicate__ largestCity __object__ Burlington,_Vermont']
Text: ["Vermont's largest city is Burlington, Vermont."]
Predicate: largestCity

Triple: ['__subject__ Whig Party (United States) __predicate__ leader __object__ Daniel_Webster']
Text: ['Daniel Webster was a leader of the Whig Party in the United States.']
Predicate: leader

Triple: ['__subject__ Whig Party (United States) __predicate__ leader __object__ Henry_Clay']
Text: ['The leader of the Whig Party in the U.S.A. is Henry Clay.']
Predicate: leader

Triple: ['__subject__ William M. O. Dawson __predicate__ deathPlace __object__ Charleston,_West_Virginia']
Text: ['William M. O. Dawson died in Charleston, West Virginia.']
Predicate: deathPlace

Triple: ['__subject__ William M. O. Dawson __predicate__ party __object__ Republican_Party_(United_States)']
Text: ['William M. O. Dawson is a member of the United States Republican party.']
Predicate: party

Triple: ['__subject__ World War II __predicate__ commander __object__ Benito_Mussolini']
Text: ['Benito Mussolini was a commander in World War II.']
Predicate: commander

Triple: ['__subject__ World War II __predicate__ commander __object__ Chiang_Kai-shek']
Text: ['Chiang Kai-shek was a commander in the Second World War.']
Predicate: commander

Triple: ['__subject__ World War II __predicate__ commander __object__ Franklin_D._Roosevelt']
Text: ['Franklin D. Roosevelt was the commander in World War II.']
Predicate: commander

Triple: ['__subject__ World War II __predicate__ commander __object__ Joseph_Stalin']
Text: ['Joseph Stalin was a commander in World War II.']
Predicate: commander

Triple: ['__subject__ World War II __predicate__ place __object__ East_African_Campaign_(World_War_II)']
Text: ['The East African Campaign was part of World War II.']
Predicate: place

Triple: ['__subject__ World War II __predicate__ place __object__ South-East_Asian_theatre_of_World_War_II']
Text: ['One of the places in World War II was named South East Asian theatre of World War II.']
Predicate: place

Triple: ['__subject__ 1. FC Köln __predicate__ numberOfMembers __object__ 50000']
Text: ['1. FC Köln has 50000 members.']
Predicate: numberOfMembers

Triple: ['__subject__ 1. FC Köln __predicate__ season __object__ 2014']
Text: ['1 FC Köln played in the 2014 season.']
Predicate: season

Triple: ['__subject__ 1. FC Köln __predicate__ season __object__ 2014–15_Bundesliga']
Text: ['1. FC Köln were in the 2014–15 Bundesliga season.']
Predicate: season

Triple: ['__subject__ 1. FC Magdeburg __predicate__ league __object__ 3._Liga']
Text: ['1 FC Magdeburg is in the 3 Liga league.']
Predicate: league

Triple: ['__subject__ 1. FC Magdeburg __predicate__ manager __object__ Jens_Härtel']
Text: ['The manager of FC Magdeburg is Jens Härtel.']
Predicate: manager

Triple: ['__subject__ 1. FC Magdeburg __predicate__ numberOfMembers __object__ 27250']
Text: ['1.FC Magdeburg has 27250 members.']
Predicate: numberOfMembers

Triple: ['__subject__ 1. FC Magdeburg __predicate__ season __object__ 2014–15_Regionalliga']
Text: ['FC Magdeburg played in the Regionalliga in 2014-15 season.']
Predicate: season

Triple: ['__subject__ A.C. Cesena __predicate__ ground __object__ Cesena']
Text: ['A.C. Cesena ground is in Cesena.']
Predicate: ground

Triple: ['__subject__ A.C. Cesena __predicate__ ground __object__ Italy']
Text: ["A.C. Cesena's ground is located in Italy."]
Predicate: ground

Triple: ['__subject__ A.C. Cesena __predicate__ ground __object__ Stadio_Dino_Manuzzi']
Text: ["A.C. Cesena's ground is Stadio Dino Manuzzi."]
Predicate: ground

Triple: ['__subject__ A.C. Cesena __predicate__ league __object__ Serie_B']
Text: ['AC Cesena are in the Serie B league.']
Predicate: league

Triple: ['__subject__ A.C. Cesena __predicate__ manager __object__ Massimo_Drago']
Text: ['Massimo Drago has been the manager of A C Cesena.']
Predicate: manager

Triple: ['__subject__ A.C. Cesena __predicate__ numberOfMembers __object__ 23900']
Text: ['A.C. Cesena has 23900 members.']
Predicate: numberOfMembers

Triple: ['__subject__ A.C. Chievo Verona __predicate__ fullName __object__ Associazione Calcio ChievoVerona S.r.l.']
Text: ['The full name of AC Chievo Verona is "Associazione Calcio ChievoVerona S.r.l."']
Predicate: fullName

Triple: ['__subject__ A.C. Chievo Verona __predicate__ ground __object__ Verona, Italy']
Text: ['Verona, Italy is the home to A.C. Chievo Verona.']
Predicate: ground

Triple: ["__subject__ A.C. Chievo Verona __predicate__ ground __object__ Stadio_Marc'Antonio_Bentegodi"]
Text: ["The home ground of A.C. Chievo Verona is Stadio Marc'Antonio Bentegodi."]
Predicate: ground

Triple: ['__subject__ A.C. Chievo Verona __predicate__ ground __object__ Verona']
Text: ['A.C. Chievo Verona is playing in his ground at Verona.']
Predicate: ground

Triple: ['__subject__ A.C. Chievo Verona __predicate__ league __object__ Serie_A']
Text: ['AC Chievo Verona play in the Serie A league.']
Predicate: league

Triple: ['__subject__ A.C. Chievo Verona __predicate__ numberOfMembers __object__ 39371']
Text: ['A.C. Chievo Verona has 39371 members.']
Predicate: numberOfMembers

Triple: ['__subject__ A.C. Chievo Verona __predicate__ season __object__ 2014']
Text: ['AC Chievo Verona competed in the 2014 season.']
Predicate: season

Triple: ['__subject__ A.C. Chievo Verona __predicate__ season __object__ 2014–15_Serie_A']
Text: ['A.C. Chievo Verona played the 2014-15 season in Serie A.']
Predicate: season

Triple: ['__subject__ A.C. Lumezzane __predicate__ fullName __object__ Associazione Calcio Lumezzane SpA']
Text: ['The "Associazione Calcio Lumezzane SpA" is the full name of A.C. Lumezzane.']
Predicate: fullName

Triple: ['__subject__ A.C. Lumezzane __predicate__ ground __object__ Italy']
Text: ['A.C. Lumezzane play in italy.']
Predicate: ground

Triple: ['__subject__ A.C. Lumezzane __predicate__ league __object__ Lega Pro/A']
Text: ['A.C. Lumezzane is in the Lega Pro/A league.']
Predicate: league

Triple: ['__subject__ A.C. Lumezzane __predicate__ league __object__ Lega_Pro']
Text: ['AC Lumezzane play in the Lega Pro league.']
Predicate: league

Triple: ['__subject__ A.C. Lumezzane __predicate__ manager __object__ Michele_Marcolini']
Text: ['Michele Marcolini has been manager of AC Lumezzane.']
Predicate: manager

Triple: ['__subject__ A.C. Lumezzane __predicate__ numberOfMembers __object__ 4150']
Text: ['AC Lumezzane has 4150 members.']
Predicate: numberOfMembers

Triple: ['__subject__ A.C. Lumezzane __predicate__ season __object__ 2014']
Text: ['AC Lumezzane played in the 2014 season.']
Predicate: season

Triple: ['__subject__ A.D. Isidro Metapán __predicate__ fullName __object__ Isidro Metapán']
Text: ['The full name of A.D. Isidro Metapan is Isidro Metapan.']
Predicate: fullName

Triple: ['__subject__ A.D. Isidro Metapán __predicate__ ground __object__ Metapán, El Salvador']
Text: ['The ground of AD Isidro Metapán is located in Metapán, El Salvador.']
Predicate: ground

Triple: ['__subject__ A.D. Isidro Metapán __predicate__ ground __object__ Estadio_Jorge_Calero_Suárez']
Text: ['A.D. Isidro Metapán are at Estadio Jorge Calero Suárez.']
Predicate: ground

Triple: ['__subject__ A.D. Isidro Metapán __predicate__ ground __object__ Metapán']
Text: ["A.D. Isidro Metapán's ground is in Metapán."]
Predicate: ground

Triple: ['__subject__ A.D. Isidro Metapán __predicate__ manager __object__ Jorge_Humberto_Rodríguez']
Text: ['Jorge Humberto Rodriguez has been manager of A D Isidro Metapán.']
Predicate: manager

Triple: ['__subject__ A.D. Isidro Metapán __predicate__ numberOfMembers __object__ 10000']
Text: ['AD Isidro Metapan has 10000 members.']
Predicate: numberOfMembers

Triple: ['__subject__ A.E Dimitra Efxeinoupolis __predicate__ chairman __object__ Antonis_Milionis']
Text: ['Antonis Milionis is chairman of A.E Dimitra Efxeinoupolis.']
Predicate: chairman

Triple: ['__subject__ A.E Dimitra Efxeinoupolis __predicate__ ground __object__ Efxeinoupoli']
Text: ['The ground of A.E Dimitra Efxeinoupolis is located in the town of Efxeinoupoli.']
Predicate: ground

Triple: ['__subject__ A.E Dimitra Efxeinoupolis __predicate__ league __object__ A_EPSTH_2nd_GROUP']
Text: ['A.E Dimitra Efxeinoupolis is in the league, EPSTH 2nd GROUP.']
Predicate: league

Triple: ['__subject__ A.E Dimitra Efxeinoupolis __predicate__ location __object__ Greece']
Text: ['The A.E Dimitra Efxeinoupolis club is located in Greece.']
Predicate: location

Triple: ['__subject__ A.E Dimitra Efxeinoupolis __predicate__ numberOfMembers __object__ 1500']
Text: ['AE Dimitra Efxeinoupolis has 1500 members.']
Predicate: numberOfMembers

Triple: ['__subject__ A.F.C. Blackpool __predicate__ ground __object__ Jepson Way,']
Text: ['Jepson Way is the grounds for A.F.C. Blackpool.']
Predicate: ground

Triple: ['__subject__ A.F.C. Blackpool __predicate__ league __object__ English_football_league_system']
Text: ['A.F.C Blackpool play in the English Football League system.']
Predicate: league

Triple: ['__subject__ A.F.C. Blackpool __predicate__ league __object__ North_West_Counties_Football_League']
Text: ['AFC Blackpool play in the North West Counties Football League.']
Predicate: league

Triple: ['__subject__ A.F.C. Blackpool __predicate__ manager __object__ Stuart_Parker_(footballer)']
Text: ['AFC Blackpool have had Stuart Parker as their manager.']
Predicate: manager

Triple: ['__subject__ A.F.C. Blackpool __predicate__ season __object__ 2014']
Text: ['AFC Blackpool competed in the 2014 season.']
Predicate: season

Triple: ['__subject__ A.F.C. Blackpool __predicate__ season __object__ 2014–15_North_West_Counties_Football_League']
Text: ['In the season 2014-2015 Blackpool played in the North West Counties Football League.']
Predicate: season

Triple: ['__subject__ A.F.C. Fylde __predicate__ fullName __object__ Association Football Club Fylde']
Text: ['The full name of the A.F.C. Fylde is "Association Football Club Fylde".']
Predicate: fullName

Triple: ['__subject__ A.F.C. Fylde __predicate__ ground __object__ Bryning Lane']
Text: ['A.F.C. Fylde are based at Bryning Lane.']
Predicate: ground

Triple: ['__subject__ A.F.C. Fylde __predicate__ ground __object__ Kellamergh Park']
Text: ["A.F.C. Fylde's ground is Kellamergh Park."]
Predicate: ground

Triple: ['__subject__ A.F.C. Fylde __predicate__ ground __object__ Warton, Fylde, Lancashire']
Text: ['A.F.C. Fylde are based at Warton, Fylde, Lancashire.']
Predicate: ground

Triple: ['__subject__ A.F.C. Fylde __predicate__ ground __object__ Lancashire']
Text: ['The ground of AFC Fylde can be found in the county of Lancashire.']
Predicate: ground

Triple: ['__subject__ A.F.C. Fylde __predicate__ ground __object__ Warton,_Fylde']
Text: ["AFC Fylde's ground is located in Warton, Fylde."]
Predicate: ground

Triple: ['__subject__ A.F.C. Fylde __predicate__ league __object__ National_League_North']
Text: ['A.F.C. Fylde is a member of the National League North.']
Predicate: league

Triple: ['__subject__ A.F.C. Fylde __predicate__ manager __object__ Dave_Challinor']
Text: ["AFC Fylde's manager is Dave Challinor."]
Predicate: manager

Triple: ['__subject__ A.F.C. Fylde __predicate__ numberOfMembers __object__ 3180']
Text: ['AFC Fylde has 3180 members.']
Predicate: numberOfMembers

Triple: ['__subject__ A.F.C. Fylde __predicate__ season __object__ 2014']
Text: ['AFC Fylde competed in the 2014 season.']
Predicate: season

Triple: ['__subject__ A.F.C. Fylde __predicate__ season __object__ 2014–15_Football_Conference']
Text: ['AFC Fylde played the 2014-15 season in the Football Conference.']
Predicate: season

Triple: ['__subject__ A.S. Gubbio 1910 __predicate__ fullName __object__ Associazione Sportiva Gubbio 1910 Srl']
Text: ['The full name of AS Gubbio 1910 is "Associazione Sportiva Gubbio 1910 Srl".']
Predicate: fullName

Triple: ['__subject__ A.S. Gubbio 1910 __predicate__ ground __object__ Stadio_Pietro_Barbetti']
Text: ['The ground of AS Gubbio 1910 is called Stadio Pietro Barbetti.']
Predicate: ground

Triple: ['__subject__ A.S. Gubbio 1910 __predicate__ league __object__ Serie_D']
Text: ['The A.S. Gubbio 1910 football club play in Serie D.']
Predicate: league

Triple: ['__subject__ A.S. Gubbio 1910 __predicate__ season __object__ 2014']
Text: ['AS Gubbio 1910 competed in the 2014 season.']
Predicate: season

Triple: ['__subject__ A.S. Gubbio 1910 __predicate__ season __object__ 2014–15_Lega_Pro']
Text: ['A.S. Gubbio 1910 was a part of the 2014–15 Lega Pro season.']
Predicate: season

Triple: ['__subject__ A.S. Livorno Calcio __predicate__ fullName __object__ Associazione Sportiva']
Text: ['Associazione Sportiva Livorno Calcio is the full name of A.S.Livorno Calcio.']
Predicate: fullName

Triple: ['__subject__ A.S. Livorno Calcio __predicate__ fullName __object__ Livorno Calcio S.p.A.']
Text: ['AS Livorno Calcio has the full name of "Livorno Calcio S.p.A".']
Predicate: fullName

Triple: ['__subject__ A.S. Livorno Calcio __predicate__ ground __object__ Livorno, Italy']
Text: ['Livorno, Italy is the location of the ground of AS Livorno Calcio.']
Predicate: ground

Triple: ['__subject__ A.S. Livorno Calcio __predicate__ ground __object__ Livorno']
Text: ['A.S Livorno Calcio ground is in Livorno.']
Predicate: ground

Triple: ['__subject__ A.S. Livorno Calcio __predicate__ ground __object__ Stadio_Armando_Picchi']
Text: ["A S Livorno Calcio's home ground is the Stadio Armando Picchi."]
Predicate: ground

Triple: ['__subject__ A.S. Livorno Calcio __predicate__ league __object__ Serie_B']
Text: ['The league that A.S. Livorno Calcio play in is Serie B.']
Predicate: league

Triple: ['__subject__ A.S. Livorno Calcio __predicate__ manager __object__ Christian_Panucci']
Text: ['A.S. Livorno Calcio is managed by Christian Panucci.']
Predicate: manager

Triple: ['__subject__ A.S. Livorno Calcio __predicate__ season __object__ 2014']
Text: ['A.S. Livorno Calcio played in the 2014 season.']
Predicate: season

Triple: ['__subject__ A.S. Livorno Calcio __predicate__ season __object__ 2014–15_Serie_B']
Text: ['AS Livorno Calcio played season 2014-15 in Serie B.']
Predicate: season

Triple: ['__subject__ A.S. Roma __predicate__ chairman __object__ James_Pallotta']
Text: ['The chairman of the A.S. Roma is James Pallotta.']
Predicate: chairman

Triple: ['__subject__ A.S. Roma __predicate__ fullName __object__ Associazione Sportiva Roma S.p.A.']
Text: ['The "Associazione Sportiva Roma S.p.A." is the non-abbreviated name of A.S. Roma.']
Predicate: fullName

Triple: ['__subject__ A.S. Roma __predicate__ ground __object__ Rome, Italy']
Text: ["A.S. Roma's ground is in Rome, Italy."]
Predicate: ground

Triple: ['__subject__ A.S. Roma __predicate__ ground __object__ Rome']
Text: ['A.S. Roma have a ground in Rome.']
Predicate: ground

Triple: ['__subject__ A.S. Roma __predicate__ ground __object__ Stadio_Olimpico']
Text: ['A.S Roma ground is Stadio Olimpico.']
Predicate: ground

Triple: ['__subject__ A.S. Roma __predicate__ league __object__ Serie_A']
Text: ['AS Roma play in the Serie A league.']
Predicate: league

Triple: ['__subject__ A.S. Roma __predicate__ manager __object__ Luciano_Spalletti']
Text: ["AS Roma's manager is Luciano Spalletti."]
Predicate: manager

Triple: ['__subject__ A.S. Roma __predicate__ numberOfMembers __object__ 70634']
Text: ['AS Roma has 70634 members.']
Predicate: numberOfMembers

Triple: ['__subject__ A.S. Roma __predicate__ season __object__ 2014']
Text: ['AS Roma competed in the 2014 season.']
Predicate: season

Triple: ['__subject__ ACF Fiorentina __predicate__ fullName __object__ ACF Fiorentina S.p.A.']
Text: ['The full name of ACF Fiorentia is "ACF Fiorentina S.p.A."']
Predicate: fullName

Triple: ['__subject__ ACF Fiorentina __predicate__ league __object__ Serie_A']
Text: ['ACF Fiorentina play in Serie A.']
Predicate: league

Triple: ['__subject__ ACF Fiorentina __predicate__ manager __object__ Paulo_Sousa']
Text: ['Paulo Sousa is the manager of the ACF Fiorentina.']
Predicate: manager

Triple: ['__subject__ ACF Fiorentina __predicate__ numberOfMembers __object__ 47290']
Text: ['ACF Fiorentina has 47290 members.']
Predicate: numberOfMembers

Triple: ['__subject__ ACF Fiorentina __predicate__ season __object__ 2014']
Text: ['ACF Fiorentina competed in the 2014 season.']
Predicate: season

Triple: ['__subject__ ACF Fiorentina __predicate__ season __object__ 2014–15_Serie_A']
Text: ['ACF Fiorentina played the 2014-15 season in Serie A.']
Predicate: season

Triple: ['__subject__ AEK Athens F.C. __predicate__ ground __object__ Greece']
Text: ["AEK Athens's ground is in Greece."]
Predicate: ground

Triple: ['__subject__ AEK Athens F.C. __predicate__ ground __object__ Olympic_Stadium_(Athens)']
Text: ['The Olympic Stadium (Athens) is the home ground of AEK Athens FC.']
Predicate: ground

Triple: ['__subject__ AEK Athens F.C. __predicate__ league __object__ Superleague_Greece']
Text: ['AEK Athens FC compete in the Superleague Greece.']
Predicate: league

Triple: ['__subject__ AEK Athens F.C. __predicate__ manager __object__ Gus_Poyet']
Text: ['AEK Athens FC had the manager Gus Poyet.']
Predicate: manager

Triple: ['__subject__ AEK Athens F.C. __predicate__ numberOfMembers __object__ 69618']
Text: ['AEK Athens F.C. has 69618 members.']
Predicate: numberOfMembers

Triple: ['__subject__ AEK Athens F.C. __predicate__ season __object__ 2014']
Text: ['AEK Athens FC played in the 2014 season.']
Predicate: season

Triple: ['__subject__ AFC Ajax __predicate__ fullName __object__ Amsterdamsche Football Club Ajax']
Text: ['The full name of AFC Ajax is "Amsterdamsche Football Club Ajax".']
Predicate: fullName

Triple: ['__subject__ AFC Ajax __predicate__ numberOfMembers __object__ 53502']
Text: ['AFC Ajax has 53502 members.']
Predicate: numberOfMembers

Triple: ['__subject__ AFC Ajax __predicate__ owner __object__ AFC_Ajax_N.V.']
Text: ['The owner of AFC Ajax is AFC Ajax N.V.']
Predicate: owner

Triple: ['__subject__ AFC Ajax __predicate__ season __object__ 2014']
Text: ['AFC Ajax played in the 2014 season.']
Predicate: season

Triple: ['__subject__ AFC Ajax __predicate__ season __object__ 2014–15_Eredivisie']
Text: ['AFC Ajax were in the Eredivisie for the season 2014-2015.']
Predicate: season

Triple: ['__subject__ AFC Ajax (amateurs) __predicate__ fullName __object__ Amsterdamsche Football Club Ajax Amateurs']
Text: ['The full name of AFC Ajax (amateurs) is "Amsterdamsche Football Club Ajax Amateurs".']
Predicate: fullName

Triple: ['__subject__ AFC Ajax (amateurs) __predicate__ ground __object__ Amsterdam']
Text: ['AFC Ajax is based in Amsterdam.']
Predicate: ground

Triple: ['__subject__ AFC Ajax (amateurs) __predicate__ ground __object__ Sportpark_De_Toekomst']
Text: ["AFC Ajax (amateurs)'s ground is Sportpark De Toekomst."]
Predicate: ground

Triple: ['__subject__ AFC Ajax (amateurs) __predicate__ league __object__ Hoofdklasse']
Text: ['AFC Ajax (amateurs) play in the Hoofdklasse league.']
Predicate: league

Triple: ['__subject__ AFC Ajax (amateurs) __predicate__ nickname __object__ Lucky Ajax']
Text: ['AFC Ajax (amateurs) has the nickname "Lucky Ajax".']
Predicate: nickname

Triple: ['__subject__ AFC Ajax (amateurs) __predicate__ season __object__ 2014']
Text: ['AFC Ajax (Amateurs) competed in the 2014 season.']
Predicate: season

Triple: ['__subject__ AFC Ajax (amateurs) __predicate__ season __object__ 2014–15_Topklasse']
Text: ['AFC Ajax (amateurs) played in the Topklasse in the 2014-2015 season.']
Predicate: season

Triple: ['__subject__ AZAL Arena __predicate__ location __object__ Azerbaijan']
Text: ['The AZAL Arena is located in Azerbaijan.']
Predicate: location

Triple: ['__subject__ AZAL Arena __predicate__ location __object__ Shuvalan']
Text: ['The AZAL Arena is located in Shuvalan.']
Predicate: location

Triple: ['__subject__ AZAL PFK __predicate__ fullName __object__ AZAL Peşəkar Futbol Klubu']
Text: ['AZAL PFK stands for "AZAL Peşəkar Futbol Klubu".']
Predicate: fullName

Triple: ['__subject__ AZAL PFK __predicate__ ground __object__ AZAL_Arena']
Text: ['AZAL PFK play their home matches at the AZAL Arena.']
Predicate: ground

Triple: ['__subject__ AZAL PFK __predicate__ numberOfMembers __object__ 3500']
Text: ['There are 3500 members of AZAL PFK.']
Predicate: numberOfMembers

Triple: ['__subject__ AZAL PFK __predicate__ season __object__ 2014']
Text: ['AZAL PFK competed in the season 2014.']
Predicate: season

Triple: ['__subject__ AZAL PFK __predicate__ season __object__ 2014–15_Azerbaijan_Premier_League']
Text: ['AZAL PFK Bakou is playing Azerbaijan PremierLeague, 2014–15.']
Predicate: season

Triple: ['__subject__ AZ Alkmaar __predicate__ fullName __object__ Alkmaar Zaanstreek']
Text: ['AZ Alkmaar full name is "Alkmaar Zaanstreek".']
Predicate: fullName

Triple: ['__subject__ AZ Alkmaar __predicate__ ground __object__ AFAS_Stadion']
Text: ["AZ Alkmaar's ground is the AFAS Stadion."]
Predicate: ground

Triple: ['__subject__ AZ Alkmaar __predicate__ manager __object__ John_van_den_Brom']
Text: ['John van den Brom has been manager of AZ Alkmaar.']
Predicate: manager

Triple: ['__subject__ AZ Alkmaar __predicate__ owner __object__ Max_Huiberts']
Text: ['Max Huiberts is the owner of AZ Alkmaar.']
Predicate: owner

Triple: ['__subject__ AZ Alkmaar __predicate__ owner __object__ Robert_Eenhoorn']
Text: ['AZ Alkmaar is owned by Robert Eenhoorn.']
Predicate: owner

Triple: ['__subject__ AZ Alkmaar __predicate__ season __object__ 2014']
Text: ['AZ Alkmaar played in the 2014 season.']
Predicate: season

Triple: ['__subject__ Agremiação Sportiva Arapiraquense __predicate__ chairmanTitle __object__ President']
Text: ['The title of the chairman of Agremiacao Sportiva Arapiraquense is President.']
Predicate: chairmanTitle

Triple: ['__subject__ Agremiação Sportiva Arapiraquense __predicate__ fullName __object__ Agremiação Sportiva Arapiraquense']
Text: ['Agremiação Sportiva Arapiraquense\'s full name is "Agremiação Sportiva Arapiraquense".']
Predicate: fullName

Triple: ['__subject__ Agremiação Sportiva Arapiraquense __predicate__ ground __object__ Estádio_Municipal_Coaracy_da_Mata_Fonseca']
Text: ['Estádio Municipal Coaracy da Mata Fonseca is the name of the ground of Agremiação Sportiva Arapiraquense.']
Predicate: ground

Triple: ['__subject__ Agremiação Sportiva Arapiraquense __predicate__ league __object__ Campeonato_Brasileiro_Série_C']
Text: ['Agremiação Sportiva Arapiraquense play in the Campeonato Brasileiro Série C league.']
Predicate: league

Triple: ["__subject__ Agremiação Sportiva Arapiraquense __predicate__ nickname __object__ ''Alvinegro"]
Text: ['Alvinegro is the nickname of Agremiação Sportiva Arapiraquense.']
Predicate: nickname

Triple: ["__subject__ Agremiação Sportiva Arapiraquense __predicate__ nickname __object__ Asa Gigante ''"]
Text: ['The Agremiação Sportiva Arapiraquense is nicknamed Asa Gigante.']
Predicate: nickname

Triple: ['__subject__ Agremiação Sportiva Arapiraquense __predicate__ numberOfMembers __object__ 17000']
Text: ['Agremiação Sportiva Arapiraquense has 17000 members.']
Predicate: numberOfMembers

Triple: ['__subject__ Agremiação Sportiva Arapiraquense __predicate__ season __object__ 2015']
Text: ['Agremiação Sportiva Arapiraquense played in the 2015 season.']
Predicate: season

Triple: ['__subject__ Akron, Ohio __predicate__ isPartOf __object__ Summit_County,_Ohio']
Text: ['Akron, Ohio is part of Summit County, Ohio.']
Predicate: isPartOf

Triple: ['__subject__ Akron, Ohio __predicate__ leader __object__ Dan_Horrigan']
Text: ['Akron, Ohio is led by Dan Horrigan.']
Predicate: leader

Triple: ['__subject__ Akron, Ohio __predicate__ isPartOf __object__ United_States']
Text: ['Akron, Ohio is located in the United States.']
Predicate: isPartOf

Triple: ['__subject__ Akron Summit Assault __predicate__ chairman __object__ Dave_Laughlin']
Text: ['Akrons Summit Assault chairman is Dave Laughlin.']
Predicate: chairman

Triple: ['__subject__ Akron Summit Assault __predicate__ ground __object__ Akron,_Ohio']
Text: ['The Akron Summit Assault team is based in Akron, Ohio.']
Predicate: ground

Triple: ['__subject__ Akron Summit Assault __predicate__ league __object__ Premier_Development_League']
Text: ['Akron Summit Assault play in the Premier Development League.']
Predicate: league

Triple: ['__subject__ Akron Summit Assault __predicate__ manager __object__ Denzil_Antonio']
Text: ['Denzil Antonio was the manager of Akron Summit Assault.']
Predicate: manager

Triple: ['__subject__ Akron Summit Assault __predicate__ season __object__ 2011']
Text: ['Akron Summit Assault played in the 2011 season.']
Predicate: season

Triple: ['__subject__ Akron Summit Assault __predicate__ season __object__ 2011_PDL_season']
Text: ['Akron Summit Assault play in the 2011 PDL season.']
Predicate: season

Triple: ['__subject__ Amsterdam __predicate__ part __object__ Amsterdam-Noord']
Text: ['Amsterdam-Noord is part of Amsterdam.']
Predicate: part

Triple: ['__subject__ Athens __predicate__ mayor __object__ Giorgos_Kaminis']
Text: ['The mayor of Athens is Giorgos Kaminis.']
Predicate: mayor

Triple: ['__subject__ Azerbaijan Premier League __predicate__ champions __object__ Qarabağ_FK']
Text: ['The name of the championship football team in the Azerbaijan Premier League Os the Qarabag FK.']
Predicate: champions

Triple: ['__subject__ Blackpool __predicate__ leader __object__ Conservative_Party_(UK)']
Text: ['The leader of Blackpool is the Conservative Party (UK).']
Predicate: leader

Triple: ['__subject__ Blackpool __predicate__ leader __object__ Gordon_Marsden']
Text: ['Blackpool is led by Gordon Marsden.']
Predicate: leader

Triple: ['__subject__ Blackpool __predicate__ leader __object__ Labour_Party_(UK)']
Text: ['The leader of Blackpool council is the Labour Party (UK).']
Predicate: leader

Triple: ['__subject__ Campeonato Brasileiro Série C __predicate__ champions __object__ Vila_Nova_Futebol_Clube']
Text: ['Vila Nova Futebol Clube have been champions of Campeonato Brasileiro Série C.']
Predicate: champions

Triple: ['__subject__ Campeonato Brasileiro Série C __predicate__ country __object__ Brazil']
Text: ['Campeonato Brasileiro Série C is from Brazil.']
Predicate: country

Triple: ['__subject__ Christian Panucci __predicate__ club __object__ A.S._Livorno_Calcio']
Text: ['Christian Panucci has been manager of A S Livorno Calcio.']
Predicate: club

Triple: ['__subject__ Christian Panucci __predicate__ club __object__ A.S._Roma']
Text: ['Christian Panucci plays at the A.S. Roma.']
Predicate: club

Triple: ['__subject__ Christian Panucci __predicate__ club __object__ Genoa_C.F.C.']
Text: ['Christian Panucci played football for Genoa C.F.C.']
Predicate: club

Triple: ['__subject__ Christian Panucci __predicate__ club __object__ Italy_national_football_team']
Text: ['Christian Panucci played for the Italy national football team.']
Predicate: club

Triple: ['__subject__ Christian Panucci __predicate__ club __object__ Real_Madrid_C.F.']
Text: ['Christian Panucci was attached to the Real Madrid CF club.']
Predicate: club

Triple: ['__subject__ Dave Challinor __predicate__ club __object__ A.F.C._Fylde']
Text: ['Dave Challinor is a player at the A.F.C. Fylde .']
Predicate: club

Triple: ['__subject__ Dave Challinor __predicate__ club __object__ Bury_F.C.']
Text: ['Dave Challinor played football for Bury FC.']
Predicate: club

Triple: ['__subject__ Dave Challinor __predicate__ club __object__ Colwyn_Bay_F.C.']
Text: ['Dave Challinor is at Colwyn Bay FC.']
Predicate: club

Triple: ['__subject__ Dave Challinor __predicate__ club __object__ Stockport_County_F.C.']
Text: ['Dave Challinor plays at the Stockport County F.C.']
Predicate: club

Triple: ['__subject__ Dave Challinor __predicate__ club __object__ Tranmere_Rovers_F.C.']
Text: ['Dave Challinor is affiliated with Tranmere Rovers F.C.']
Predicate: club

Triple: ['__subject__ Estádio Municipal Coaracy da Mata Fonseca __predicate__ location __object__ Alagoas']
Text: ['Estadio Municipal Coaracy da Mata Fonseca is located in Alagoas.']
Predicate: location

Triple: ['__subject__ Estádio Municipal Coaracy da Mata Fonseca __predicate__ location __object__ Arapiraca']
Text: ['Estádio Municipal Coaracy da Mata Fonseca is located in Arapiraca.']
Predicate: location

Triple: ['__subject__ Estádio Municipal Coaracy da Mata Fonseca __predicate__ location __object__ Brazil']
Text: ['Estádio Municipal Coaracy da Mata Fonseca is in Brazil.']
Predicate: location

Triple: ['__subject__ Frank de Boer __predicate__ club __object__ AFC_Ajax']
Text: ['Frank de Boer played for AFC Ajax.']
Predicate: club

Triple: ['__subject__ Frank de Boer __predicate__ club __object__ Ajax_Youth_Academy']
Text: ['Frank de Boer is in the Ajax Youth Academy.']
Predicate: club

Triple: ['__subject__ Frank de Boer __predicate__ club __object__ Al-Shamal_Sports_Club']
Text: ['Frank de Boer played for Al-Shamal Sports Club.']
Predicate: club

Triple: ['__subject__ Frank de Boer __predicate__ club __object__ Netherlands_national_football_team']
Text: ['Frank de Boer played for the Netherlands national football team.']
Predicate: club

Triple: ['__subject__ Greece __predicate__ capital __object__ Athens']
Text: ['Athens is the capital of Greece.']
Predicate: capital

Triple: ['__subject__ Greece __predicate__ currency __object__ Euro']
Text: ['The currency in Greece is the euro.']
Predicate: currency

Triple: ['__subject__ Greece __predicate__ demonym __object__ Greeks']
Text: ['Greece is inhabited by Greeks.']
Predicate: demonym

Triple: ['__subject__ Greece __predicate__ language __object__ Greek_language']
Text: ['Greek is the language of Greece.']
Predicate: language

Triple: ['__subject__ Greece __predicate__ leader __object__ Alexis_Tsipras']
Text: ["Greece's leader is Alexis Tsipras."]
Predicate: leader

Triple: ['__subject__ Greece __predicate__ leader __object__ Prokopis_Pavlopoulos']
Text: ["Greece's leader is Prokopis Pavlopoulos."]
Predicate: leader

Triple: ['__subject__ Gubbio __predicate__ leaderParty __object__ Left_Ecology_Freedom']
Text: ['The Left Ecology Freedom are the leading party in Gubbio.']
Predicate: leaderParty

Triple: ['__subject__ Gus Poyet __predicate__ club __object__ Chelsea_F.C.']
Text: ['Gus Poyet played for Chelsea F.C.']
Predicate: club

Triple: ['__subject__ Gus Poyet __predicate__ club __object__ Real_Zaragoza']
Text: ['Gus Poyet is associated with the Real Zaragoza, a football club.']
Predicate: club

Triple: ['__subject__ Italy __predicate__ capital __object__ Rome']
Text: ['Rome is the capital of Italy.']
Predicate: capital

Triple: ['__subject__ Italy __predicate__ demonym __object__ Italians']
Text: ['Italy is inhabited by Italians.']
Predicate: demonym

Triple: ['__subject__ Italy __predicate__ language __object__ Italian_language']
Text: ['The language spoken in italy is Italian language.']
Predicate: language

Triple: ['__subject__ Italy __predicate__ leader __object__ Pietro_Grasso']
Text: ["Italy's leader is Pietro Grasso."]
Predicate: leader

Triple: ['__subject__ Italy __predicate__ officialLanguage __object__ Italian_language']
Text: ['The official language of Italy is the Italian language.']
Predicate: officialLanguage

Triple: ['__subject__ James Pallotta __predicate__ birthPlace __object__ Boston']
Text: ['Boston is the birthplace of James Pallotta.']
Predicate: birthPlace

Triple: ['__subject__ Jens Härtel __predicate__ club __object__ 1._FC_Lokomotive_Leipzig']
Text: ['The first club Jens Härtel played for was FC Lokomotive Leipzig.']
Predicate: club

Triple: ['__subject__ Jens Härtel __predicate__ club __object__ 1._FC_Magdeburg']
Text: ['Jens Hartel is a member of the 1 FC Magdeburgs.']
Predicate: club

Triple: ['__subject__ Jens Härtel __predicate__ club __object__ 1._FC_Union_Berlin']
Text: ['Jens Härtel is part of the club 1. FC Union Berlin.']
Predicate: club

Triple: ['__subject__ Jens Härtel __predicate__ club __object__ Berliner_AK_07']
Text: ['Jens Härtel played for Berliner AK 07.']
Predicate: club

Triple: ['__subject__ Jens Härtel __predicate__ club __object__ FSV_Zwickau']
Text: ['Jens Hartel is attached to the club FSV Zwickau.']
Predicate: club

Triple: ['__subject__ Jens Härtel __predicate__ club __object__ RB_Leipzig']
Text: ['Jens Härtel is in the RB Leipzig club.']
Predicate: club

Triple: ['__subject__ Jens Härtel __predicate__ club __object__ SV_Babelsberg_03']
Text: ['Jens Härtel is part of the SV Babelsberg 03 club.']
Predicate: club

Triple: ['__subject__ John van den Brom __predicate__ club __object__ ADO_Den_Haag']
Text: ['John van den Brom plays for ADO Den Haag.']
Predicate: club

Triple: ['__subject__ John van den Brom __predicate__ club __object__ AFC_Ajax']
Text: ['John van den Brom plays for AFC Ajax.']
Predicate: club

Triple: ['__subject__ John van den Brom __predicate__ club __object__ De_Graafschap']
Text: ['John van den Brom plays for De Graafschap.']
Predicate: club

Triple: ['__subject__ John van den Brom __predicate__ club __object__ Jong_Ajax']
Text: ['John van den Brom is in the Jong Ajax club.']
Predicate: club

Triple: ['__subject__ John van den Brom __predicate__ club __object__ Netherlands_national_football_team']
Text: ['John van den Brom played for the Netherlands national football team.']
Predicate: club

Triple: ['__subject__ John van den Brom __predicate__ club __object__ R.S.C._Anderlecht']
Text: ['John van den Brom plays for R.S.C. Anderlecht.']
Predicate: club

Triple: ['__subject__ John van den Brom __predicate__ club __object__ Vitesse_Arnhem']
Text: ['John van den Brom is in Vitesse Arnhem.']
Predicate: club

Triple: ['__subject__ John van den Brom __predicate__ club __object__ İstanbulspor_A.Ş.']
Text: ['John van den Brom is a player in İstanbulspor A.Ş.']
Predicate: club

Triple: ['__subject__ Jorge Humberto Rodríguez __predicate__ club __object__ Alianza_F.C.']
Text: ['Jorge Humberto Rodriguez plays for the Alianza F.C. club.']
Predicate: club

Triple: ['__subject__ Jorge Humberto Rodríguez __predicate__ club __object__ C.D._FAS']
Text: ['Jorge Humberto Rodriguez plays for the C.D. FAS.']
Predicate: club

Triple: ['__subject__ Jorge Humberto Rodríguez __predicate__ club __object__ C.D._Águila']
Text: ['Jorge Humberto Rodriguez is attached to the club CD Aguila.']
Predicate: club

Triple: ['__subject__ Jorge Humberto Rodríguez __predicate__ club __object__ El_Salvador_national_football_team']
Text: ['Jorge Humberto Rodríguez is a member of the El Salvador national football team.']
Predicate: club

Triple: ['__subject__ Luciano Spalletti __predicate__ club __object__ A.S._Roma']
Text: ['Luciano Spalletti is in the A.S. Roma club.']
Predicate: club

Triple: ['__subject__ Luciano Spalletti __predicate__ club __object__ Empoli_F.C.']
Text: ['Luciano Spalletti plays for Empoli F.C.']
Predicate: club

Triple: ['__subject__ Luciano Spalletti __predicate__ club __object__ Virtus_Entella']
Text: ['Luciano Spalletti was at the club Virtus Entella.']
Predicate: club

Triple: ['__subject__ Massimo Drago __predicate__ club __object__ A.C._Cesena']
Text: ['Massimo Drago is in the A.C. Cesena club.']
Predicate: club

Triple: ['__subject__ Massimo Drago __predicate__ club __object__ A.S.D._Licata_1931']
Text: ['Massimo Drago was at the club ASD Licata 1931.']
Predicate: club

Triple: ['__subject__ Massimo Drago __predicate__ club __object__ Calcio_Catania']
Text: ['Massimo Drago is in club Calcio Catania.']
Predicate: club

Triple: ['__subject__ Massimo Drago __predicate__ club __object__ S.S.D._Potenza_Calcio']
Text: ['Massimo Drago played for S.S.D. Potenza Calcio.']
Predicate: club

Triple: ['__subject__ Massimo Drago __predicate__ club __object__ U.S._Castrovillari_Calcio']
Text: ['Massimo Drago was once a player for US Castrovillari Calcio.']
Predicate: club

Triple: ['__subject__ Massimo Drago __predicate__ club __object__ Vigor_Lamezia']
Text: ['Massimo Drago is attached to the club Vigor Lamezia.']
Predicate: club

Triple: ['__subject__ Max Huiberts __predicate__ club __object__ AZ_Alkmaar']
Text: ['Max Huiberts is associated with the club AZ Alkmaar.']
Predicate: club

Triple: ['__subject__ Michele Marcolini __predicate__ club __object__ A.C._Chievo_Verona']
Text: ['Michele Marcolini plays for A.C. Chievo Verona.']
Predicate: club

Triple: ['__subject__ Michele Marcolini __predicate__ club __object__ A.C._Lumezzane']
Text: ['Michele Marcolini is attached to the club AC Lumezzane.']
Predicate: club

Triple: ['__subject__ Michele Marcolini __predicate__ club __object__ F.C._Bari_1908']
Text: ['Michele Marcolini has been associated with F.C. Bari 1908.']
Predicate: club

Triple: ['__subject__ Michele Marcolini __predicate__ club __object__ Torino_F.C.']
Text: ['Michele Marcolini owns Torino F.C.']
Predicate: club

Triple: ['__subject__ Michele Marcolini __predicate__ birthPlace __object__ Italy']
Text: ['Michele Marcolini was born in Italy.']
Predicate: birthPlace

Triple: ['__subject__ Michele Marcolini __predicate__ youthclub __object__ Torino_F.C.']
Text: ['Michele Marcolini played youth football for Torino FC.']
Predicate: youthclub

Triple: ['__subject__ National League North __predicate__ champions __object__ Barrow_A.F.C.']
Text: ['Barrow AFC are previous champions of the National League North.']
Predicate: champions

Triple: ['__subject__ Olympic Stadium (Athens) __predicate__ location __object__ Athens']
Text: ['The Olympic Stadium (Athens) is located in the city of Athens.']
Predicate: location

Triple: ['__subject__ Paulo Sousa __predicate__ club __object__ ACF_Fiorentina']
Text: ['Paulo Sousa plays for ACF Fiorentina.']
Predicate: club

Triple: ['__subject__ Paulo Sousa __predicate__ club __object__ Inter_Milan']
Text: ['Paulo Sousa once played for Inter Milan.']
Predicate: club

Triple: ['__subject__ Paulo Sousa __predicate__ club __object__ Juventus_F.C.']
Text: ['Paulo Sousa played for Juventus FC.']
Predicate: club

Triple: ['__subject__ Paulo Sousa __predicate__ club __object__ Maccabi_Tel_Aviv_F.C.']
Text: ['Paulo Sousa played for Maccabi Tel Aviv F.C.']
Predicate: club

Triple: ['__subject__ Paulo Sousa __predicate__ club __object__ Portugal_national_football_team']
Text: ['Paulo Sousa plays for the Portugal national football team.']
Predicate: club

Triple: ['__subject__ Peter Stöger __predicate__ club __object__ Austria_national_football_team']
Text: ['Footballer, Peter Stöger, plays for the Austria National Football team.']
Predicate: club

Triple: ['__subject__ Peter Stöger __predicate__ club __object__ FC_Admira_Wacker_Mödling']
Text: ["Peter Stöger's club is the FC Admira Wacker Mödling."]
Predicate: club

Triple: ['__subject__ Peter Stöger __predicate__ club __object__ FK_Austria_Wien']
Text: ['Peter Stoger is a member of the FK Austria Wien soccer club.']
Predicate: club

Triple: ['__subject__ Peter Stöger __predicate__ club __object__ Favoritner_AC']
Text: ['Peter Stoger plays for Favoritner AC.']
Predicate: club

Triple: ['__subject__ Peter Stöger __predicate__ club __object__ First_Vienna_FC']
Text: ['Peter Stoger is attached to the club First Vienna FC.']
Predicate: club

Triple: ['__subject__ Peter Stöger __predicate__ club __object__ LASK_Linz']
Text: ['Peter Stöger played for the club LASK Linz.']
Predicate: club

Triple: ['__subject__ Peter Stöger __predicate__ club __object__ SC_Wiener_Neustadt']
Text: ['Peter Stöger is affiliated with the SC Wiener Neustadt club.']
Predicate: club

Triple: ['__subject__ Peter Stöger __predicate__ club __object__ SK_Rapid_Wien']
Text: ['Peter Stöger was at the club SK Rapid Wien.']
Predicate: club

Triple: ['__subject__ Peter Stöger __predicate__ club __object__ SK_Vorwärts_Steyr']
Text: ['Peter Stöger played football for SK Vorwärts Steyr.']
Predicate: club

Triple: ['__subject__ Rolando Maran __predicate__ club __object__ A.C._Chievo_Verona']
Text: ['Rolando Maran is attached to AC Chievo Verona .']
Predicate: club

Triple: ['__subject__ Rolando Maran __predicate__ club __object__ Calcio_Catania']
Text: ['Rolando Maran is attached to the club Calcio Catania.']
Predicate: club

Triple: ['__subject__ Rolando Maran __predicate__ club __object__ Carrarese_Calcio']
Text: ['Rolando Maran plays at the Carrarese Calcio.']
Predicate: club

Triple: ['__subject__ Rolando Maran __predicate__ club __object__ Unione_Triestina_2012_S.S.D.']
Text: ['Rolando Maran is in the Unione Triestina 2012 S.S.D. club.']
Predicate: club

Triple: ['__subject__ Rolando Maran __predicate__ club __object__ Varese_Calcio_S.S.D.']
Text: ['Rolando Maran used to be at Varese Calcio S.S.D.']
Predicate: club

Triple: ['__subject__ Rolando Maran __predicate__ club __object__ Vicenza_Calcio']
Text: ['Rolando Maran plays at the Vicenza Calcio.']
Predicate: club

Triple: ['__subject__ Rolando Maran __predicate__ birthPlace __object__ Italy']
Text: ['Rolando Maran was born in Italy.']
Predicate: birthPlace

Triple: ['__subject__ Serie A __predicate__ champions __object__ Juventus_F.C.']
Text: ['Juventus FC have been Serie A champions.']
Predicate: champions

Triple: ['__subject__ Serie A __predicate__ country __object__ Italy']
Text: ['Serie A is based in Italy.']
Predicate: country

Triple: ['__subject__ Serie B __predicate__ champions __object__ Carpi_F.C._1909']
Text: ['Carpi FC 1909 are previous champions of Serie B.']
Predicate: champions

Triple: ['__subject__ Serie D __predicate__ champions __object__ S.S._Robur_Siena']
Text: ['Serie D champions include S S Robur Siena.']
Predicate: champions

Triple: ['__subject__ Sportpark De Toekomst __predicate__ operator __object__ AFC_Ajax']
Text: ['Sportpark De Toekomst is operated by AFC Ajax.']
Predicate: operator

Triple: ['__subject__ Sportpark De Toekomst __predicate__ owner __object__ AFC_Ajax_N.V.']
Text: ['AFC Ajax N.V. own Sportpark De Toekomst.']
Predicate: owner

Triple: ['__subject__ Sportpark De Toekomst __predicate__ tenant __object__ Ajax_Youth_Academy']
Text: ['Ajax Youth Academy is a tenant of Sportpark De Toekomst.']
Predicate: tenant

Triple: ['__subject__ St. Vincent–St. Mary High School __predicate__ city __object__ Akron,_Ohio']
Text: ['St. Vincent–St. Mary High School is located in the city of Akron, Ohio.']
Predicate: city

Triple: ['__subject__ St. Vincent–St. Mary High School __predicate__ state __object__ Ohio']
Text: ['St Vincent-St Mary High School is located in the state of Ohio.']
Predicate: state

Triple: ['__subject__ Stuart Parker (footballer) __predicate__ club __object__ A.F.C._Blackpool']
Text: ['Stuart Parker is a footballer in the A.F.C Blackpool club.']
Predicate: club

Triple: ['__subject__ Stuart Parker (footballer) __predicate__ club __object__ Blackburn_Rovers_F.C.']
Text: ['Stuart Parker (footballer) was at Blackburn Rovers FC.']
Predicate: club

Triple: ['__subject__ Stuart Parker (footballer) __predicate__ club __object__ Blackpool_F.C.']
Text: ['Stuart Parker (footballer) plays for Blackpool F.C.']
Predicate: club

Triple: ['__subject__ Stuart Parker (footballer) __predicate__ club __object__ Chesterfield_F.C.']
Text: ['Stuart Parker was a footballer for Chesterfield FC.']
Predicate: club

Triple: ['__subject__ Stuart Parker (footballer) __predicate__ club __object__ Drogheda_United_F.C.']
Text: ['Stuart Parker is a footballer with the Drogheda United F.C.']
Predicate: club

Triple: ['__subject__ Stuart Parker (footballer) __predicate__ club __object__ Irlam_Town_F.C.']
Text: ['The footballer Stuart Parker is attached to Irlam Town Football Club.']
Predicate: club

Triple: ['__subject__ Stuart Parker (footballer) __predicate__ club __object__ KV_Mechelen']
Text: ['Stuart Parker has represented the club KV Mechelen.']
Predicate: club

Triple: ['__subject__ Stuart Parker (footballer) __predicate__ club __object__ Runcorn_F.C._Halton']
Text: ['Stuart Parker (footballer) was a player for Runcorn FC Halton.']
Predicate: club

Triple: ['__subject__ Stuart Parker (footballer) __predicate__ club __object__ Sparta_Rotterdam']
Text: ['Stuart Parker plays at the Sparta Rotterdam club.']
Predicate: club

Triple: ['__subject__ Stuart Parker (footballer) __predicate__ club __object__ Stockport_County_F.C.']
Text: ['Stuart Parker (footballer) once played for Stockport County FC.']
Predicate: club

Triple: ['__subject__ Superleague Greece __predicate__ champions __object__ Olympiacos_F.C.']
Text: ['Olympiacos FC are previous champions of the Superleague Greece.']
Predicate: champions

Triple: ['__subject__ 1 Decembrie 1918 University __predicate__ city __object__ Alba_Iulia']
Text: ['The "1 Decembrie 1918 University" is in the city Alba Iulia.']
Predicate: city

Triple: ['__subject__ 1 Decembrie 1918 University __predicate__ country __object__ Romania']
Text: ['The 1 Decembrie 1918 University is located in the country of Romania.']
Predicate: country

Triple: ['__subject__ 1 Decembrie 1918 University __predicate__ latinName __object__ Universitas Apulensis']
Text: ['The Latin name of the 1 Decembrie 1918 University is "Universitas Apulensis".']
Predicate: latinName

Triple: ['__subject__ 1 Decembrie 1918 University __predicate__ nickname __object__ Uab']
Text: ['The 1 Decembrie 1918 University has the nickname Uab.']
Predicate: nickname

Triple: ['__subject__ 1 Decembrie 1918 University __predicate__ rector __object__ Breaz Valer Daniel']
Text: ['Breaz Valer Daniel is rector of the 1 Decembrie 1918 University.']
Predicate: rector

Triple: ['__subject__ AWH Engineering College __predicate__ academicStaffSize __object__ 250']
Text: ['The academic staff at the AWH Engineering College number 250.']
Predicate: academicStaffSize

Triple: ['__subject__ AWH Engineering College __predicate__ city __object__ Kuttikkattoor']
Text: ['The AWH Engineering College is located in Kuttikkattoor.']
Predicate: city

Triple: ['__subject__ AWH Engineering College __predicate__ country __object__ India']
Text: ['AWH Engineering College is located in India.']
Predicate: country

Triple: ['__subject__ AWH Engineering College __predicate__ established __object__ 2001']
Text: ['The AWH Engineering College was established in 2001.']
Predicate: established

Triple: ['__subject__ AWH Engineering College __predicate__ state __object__ Kerala']
Text: ['AWH Engineering College is located in Kerala state.']
Predicate: state

Triple: ['__subject__ Aarhus __predicate__ governmentType __object__ Magistrate']
Text: ['The type of government of Aarhus is magistrate.']
Predicate: governmentType

Triple: ['__subject__ Aarhus __predicate__ hasToItsNortheast __object__ Mols']
Text: ['Mols is to the northeast of Aarhus.']
Predicate: hasToItsNortheast

Triple: ['__subject__ Accademia di Architettura di Mendrisio __predicate__ city __object__ Mendrisio']
Text: ['Accademia di Architettura di Mendrisio is located in the city of Mendrisio.']
Predicate: city

Triple: ['__subject__ Accademia di Architettura di Mendrisio __predicate__ country __object__ Switzerland']
Text: ['The Accademia di Architettura di Mendrisio is located in Switzerland.']
Predicate: country

Triple: ['__subject__ Accademia di Architettura di Mendrisio __predicate__ dean __object__ Mario_Botta']
Text: ['The dean of the Accademia di Architettura di Mendrisio is Mario Botta.']
Predicate: dean

Triple: ['__subject__ Accademia di Architettura di Mendrisio __predicate__ established __object__ 1996']
Text: ['The Accademia di Architettura di Mendrisio was established in 1996.']
Predicate: established

Triple: ['__subject__ Accademia di Architettura di Mendrisio __predicate__ location __object__ Ticino']
Text: ['The Accademia di Architettura di Mendrisio is located in Ticino.']
Predicate: location

Triple: ['__subject__ Accademia di Architettura di Mendrisio __predicate__ numberOfStudents __object__ 600']
Text: ['There are 600 students at the Accademia di Architettura di Mendrisio.']
Predicate: numberOfStudents

Triple: ['__subject__ Acharya Institute of Technology __predicate__ academicStaffSize __object__ ~500']
Text: ["Acharya Institute of Technology's academic staff total is ~500."]
Predicate: academicStaffSize

Triple: ['__subject__ Acharya Institute of Technology __predicate__ affiliation __object__ Visvesvaraya_Technological_University']
Text: ['The Acharya Institute of Technology is affiliated with Visvesvaraya Technological University.']
Predicate: affiliation

Triple: ['__subject__ Acharya Institute of Technology __predicate__ city __object__ Bangalore']
Text: ['The Acharya Institute of Technology is located in the city of Bangalore.']
Predicate: city

Triple: ['__subject__ Acharya Institute of Technology __predicate__ country __object__ India']
Text: ['Acharya Institute of Technology can be found in India.']
Predicate: country

Triple: ['__subject__ Acharya Institute of Technology __predicate__ director __object__ Dr. G. P. Prabhukumar']
Text: ['Dr. G. P. Prabhukumar is the director of the Acharya Institute of Technology.']
Predicate: director

Triple: ['__subject__ Acharya Institute of Technology __predicate__ established __object__ 2000']
Text: ['The Acharya Institute of Technology was established in the year 2000.']
Predicate: established

Triple: ['__subject__ Acharya Institute of Technology __predicate__ motto __object__ Nurturing Excellence']
Text: ["Acharya Institute of Technology's motto is Nurturing Excellence."]
Predicate: motto

Triple: ['__subject__ Acharya Institute of Technology __predicate__ nickname __object__ AIT']
Text: ['AIT is the nickname for the Acharya Institute of Technology.']
Predicate: nickname

Triple: ['__subject__ Acharya Institute of Technology __predicate__ numberOfPostgraduateStudents __object__ 700']
Text: ['The number of post graduate students at the Acharya Institute of Technology is about 700.']
Predicate: numberOfPostgraduateStudents

Triple: ['__subject__ Acharya Institute of Technology __predicate__ numberOfUndergraduateStudents __object__ 10000']
Text: ['The number of undergraduates attending the Acharya Institute of Technology is roughly 10000 students.']
Predicate: numberOfUndergraduateStudents

Triple: ['__subject__ Acharya Institute of Technology __predicate__ officialSchoolColour __object__ Blue, White and Orange']
Text: ['Blue, white and orange are the colours adopted by Acharya Institute of Technology.']
Predicate: officialSchoolColour

Triple: ['__subject__ Acharya Institute of Technology __predicate__ outlookRanking __object__ 63']
Text: ['The outlook ranking for the Acharya Institute of Technology is 63.']
Predicate: outlookRanking

Triple: ['__subject__ Acharya Institute of Technology __predicate__ sportsOffered __object__ Tennis']
Text: ['Tennis is one of the sports offered at the Acharya Institute of Technology.']
Predicate: sportsOffered

Triple: ['__subject__ Acharya Institute of Technology __predicate__ state __object__ Karnataka']
Text: ['The Acharya Institute of Technology is in the state of Karnataka.']
Predicate: state

Triple: ['__subject__ Acharya Institute of Technology __predicate__ wasGivenTheTechnicalCampusStatusBy __object__ All_India_Council_for_Technical_Education']
Text: ['The All India Council for Technical Education was proud to give the Technical Campus status to the Acharya Institute of Technology.']
Predicate: wasGivenTheTechnicalCampusStatusBy

Triple: ['__subject__ All India Council for Technical Education __predicate__ location __object__ Mumbai']
Text: ['All India Council for Technical Education is located in Mumbai.']
Predicate: location

Triple: ['__subject__ Bangalore __predicate__ founder __object__ Kempe_Gowda_I']
Text: ['Kempe Gowda I founded Bangalore.']
Predicate: founder

Triple: ['__subject__ Denmark __predicate__ leader __object__ Lars_Løkke_Rasmussen']
Text: ['Lars Lokke Rasmussen is the leader of Denmark.']
Predicate: leader

Triple: ['__subject__ Denmark __predicate__ leaderTitle __object__ Monarchy_of_Denmark']
Text: ['Denmark is led by a Monarch.']
Predicate: leaderTitle

Triple: ['__subject__ Denmark __predicate__ religion __object__ Church_of_Denmark']
Text: ['The official religion of Denmark is the Church of Denmark.']
Predicate: religion

Triple: ['__subject__ European University Association __predicate__ headquarter __object__ Brussels']
Text: ['The headquarters of the European University Association is in Brussels.']
Predicate: headquarter

Triple: ['__subject__ India __predicate__ largestCity __object__ Mumbai']
Text: ['The largest city in India is Mumbai.']
Predicate: largestCity

Triple: ['__subject__ India __predicate__ river __object__ Ganges']
Text: ['The Ganges is a river in India.']
Predicate: river

Triple: ['__subject__ Karnataka __predicate__ hasToItsNortheast __object__ Telangana']
Text: ['Karnataka neighbors Telangana to its northeast.']
Predicate: hasToItsNortheast

Triple: ['__subject__ Karnataka __predicate__ hasToItsWest __object__ Arabian_Sea']
Text: ['The Arabian Sea is west of Karnataka.']
Predicate: hasToItsWest

Triple: ['__subject__ Kerala __predicate__ leader __object__ Kochi']
Text: ['Kochi is the leader of Kerala.']
Predicate: leader

Triple: ['__subject__ Romania __predicate__ anthem __object__ Deșteaptă-te,_române!']
Text: ['The anthem of Romania is called Desteapta te romane.']
Predicate: anthem

Triple: ['__subject__ Romania __predicate__ ethnicGroup __object__ Germans_of_Romania']
Text: ['One of the ethnic groups in Romania are the Germans of Romania.']
Predicate: ethnicGroup

Triple: ['__subject__ Romania __predicate__ leader __object__ Klaus_Iohannis']
Text: ['The leader of Romania is Klaus Iohannis.']
Predicate: leader

Triple: ['__subject__ Romania __predicate__ leaderTitle __object__ Prime_Minister_of_Romania']
Text: ['The leader of Romania is known as the Prime Minister.']
Predicate: leaderTitle

Triple: ['__subject__ School of Business and Social Sciences at the Aarhus University __predicate__ affiliation __object__ European_University_Association']
Text: ['The Aarhus University School of Business and Social Sciences is affiliated with the European University Association.']
Predicate: affiliation

Triple: ['__subject__ School of Business and Social Sciences at the Aarhus University __predicate__ city __object__ Aarhus']
Text: ['The Aarhus University School of Business and Social Sciences is in the city of Aarhus.']
Predicate: city

Triple: ['__subject__ School of Business and Social Sciences at the Aarhus University __predicate__ established __object__ 1928']
Text: ['The School of Business and Social Sciences at Aarhus University was established in 1928.']
Predicate: established

Triple: ['__subject__ School of Business and Social Sciences at the Aarhus University __predicate__ latinName __object__ Universitas Aarhusiensis']
Text: ['The latin name of School of Business and Social Sciences at the Aarhus University is "Universitas Aarhusiensis".']
Predicate: latinName

Triple: ['__subject__ Switzerland __predicate__ anthem __object__ Swiss_Psalm']
Text: ['The Swiss Psalm is the anthem of Switzerland.']
Predicate: anthem

Triple: ['__subject__ Switzerland __predicate__ leader __object__ Johann_Schneider-Ammann']
Text: ['Johann Schneider-Ammann is the leader of Switzerland.']
Predicate: leader

Triple: ['__subject__ Switzerland __predicate__ leaderTitle __object__ Federal_Chancellor_of_Switzerland']
Text: ['The Federal Chancellor of Switzerland helps to lead the country.']
Predicate: leaderTitle

Triple: ['__subject__ Switzerland __predicate__ legislature __object__ Federal_Assembly_(Switzerland)']
Text: ["Switzerland's legislature is formed in the Federal Assembly."]
Predicate: legislature

Triple: ['__subject__ Tennis __predicate__ sportGoverningBody __object__ International_Tennis_Federation']
Text: ['The sport Tennis has a Governing Body called the International Tennis Federation.']
Predicate: sportGoverningBody

Triple: ['__subject__ Visvesvaraya Technological University __predicate__ city __object__ Belgaum']
Text: ['The Visvesvaraya Technological University is in the city of Belgaum.']
Predicate: city

Triple: ['__subject__ 1634: The Baltic War __predicate__ author __object__ David_Weber']
Text: ['David Weber is the author of 1634: The Baltic War.']
Predicate: author

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ isbnNumber __object__ 978-1-4165-4253-7']
Text: ['1634: The Bavarian Crisis can be located by its ISBN number "978-1-4165-4253-7".']
Predicate: isbnNumber

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ author __object__ Virginia DeMarce and Eric Flint']
Text: ['The authors of 1634: The Bavarian Crisis are Virginia DeMarce and Eric Flint.']
Predicate: author

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ author __object__ Virginia_DeMarce']
Text: ['Virginia DeMarce is the author of 1634: The Bavarian Crisis.']
Predicate: author

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ followedBy __object__ Ring_of_Fire_II']
Text: ['The novel 1634: The Bavarian Crisis is followed by Ring of Fire II.']
Predicate: followedBy

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ language __object__ English_language']
Text: ['1634: The Bavarian Crisis is written in English.']
Predicate: language

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ mediaType __object__ Print']
Text: ['1634: The Bavarian Crisis is available in print form.']
Predicate: mediaType

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ mediaType __object__ Hardcover']
Text: ['1634 The Bavarian Crisis comes in hardcover.']
Predicate: mediaType

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ numberOfPages __object__ 448']
Text: ['1634: The Bavarian Crisis has 448 pages.']
Predicate: numberOfPages

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ precededBy __object__ DeMarce short stories in the The Grantville Gazettes']
Text: ['DeMarce short stories in the Grantville Gazettes preceded 1634: The Bavarian Crisis.']
Predicate: precededBy

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ precededBy __object__ 1634:_The_Baltic_War']
Text: ['1634: The Bavarian Crisis was preceded by 1634: The Baltic War.']
Predicate: precededBy

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ precededBy __object__ 1634:_The_Ram_Rebellion']
Text: ['1634 The Bavarian Crisis was preceded by 1634 The Ram Rebellion.']
Predicate: precededBy

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ precededBy __object__ Grantville_Gazette_II']
Text: ['1634: The Bavarian Crisis was preceded by Grantville Gazette II.']
Predicate: precededBy

Triple: ['__subject__ 1634: The Bavarian Crisis __predicate__ precededBy __object__ Grantville_Gazette_III']
Text: ['1634: The Bavarian Crisis was preceded by Grantville Gazette III.']
Predicate: precededBy

Triple: ['__subject__ 1634: The Galileo Affair __predicate__ followedBy __object__ 1634:_The_Ram_Rebellion']
Text: ['1634: The Galileo Affair was followed by 1634: The Ram Rebellion.']
Predicate: followedBy

Triple: ['__subject__ 1634: The Galileo Affair __predicate__ language __object__ English_language']
Text: ['The book "1634: The Galileo Affair is available in English.']
Predicate: language

Triple: ['__subject__ 1634: The Ram Rebellion __predicate__ author __object__ Eric Flint, Virginia DeMarce, et al.']
Text: ['1634: The Ram Rebellion was written by Eric Flint, Virginia DeMarce, et al.']
Predicate: author

Triple: ['__subject__ 1634: The Ram Rebellion __predicate__ author __object__ Virginia_DeMarce']
Text: ['1634: The Ram Rebellion was written by Virginia DeMarce.']
Predicate: author

Triple: ['__subject__ 1634: The Ram Rebellion __predicate__ country __object__ United_States']
Text: ['1634 The Ram Rebellion comes from the United States.']
Predicate: country

Triple: ['__subject__ 1634: The Ram Rebellion __predicate__ language __object__ English_language']
Text: ['English is the language used in 1634: The Ram Rebellion.']
Predicate: language

Triple: ['__subject__ 1634: The Ram Rebellion __predicate__ mediaType __object__ E-book']
Text: ['1634: The Ram Rebellion can be found as an E book.']
Predicate: mediaType

Triple: ['__subject__ 1634: The Ram Rebellion __predicate__ mediaType __object__ Hardcover']
Text: ['The book titled 1634: The Ram Rebellion is a hardcover.']
Predicate: mediaType

Triple: ['__subject__ 1634: The Ram Rebellion __predicate__ mediaType __object__ Paperback']
Text: ['The 1634: The Ram Rebellion is a paperback.']
Predicate: mediaType

Triple: ['__subject__ 1634: The Ram Rebellion __predicate__ numberOfPages __object__ 512']
Text: ['The novel 1634 The Ram Rebellion is 512 pages long.']
Predicate: numberOfPages

Triple: ['__subject__ 1634: The Ram Rebellion __predicate__ precededBy __object__ 1634:_The_Galileo_Affair']
Text: ['1634 The Ram Rebellion was preceded by 1634 The Galileo Affair.']
Predicate: precededBy

Triple: ['__subject__ A.T. Charlie Johnson __predicate__ almaMater __object__ Harvard_University']
Text: ["Harvard University is A.T. Charlie Johnson's almaMater."]
Predicate: almaMater

Triple: ['__subject__ A.T. Charlie Johnson __predicate__ almaMater __object__ Stanford_University']
Text: ["Stanford University is A.T. Charlie Johnson's almaMater."]
Predicate: almaMater

Triple: ['__subject__ A.T. Charlie Johnson __predicate__ doctoralAdvisor __object__ Michael_Tinkham']
Text: ['A.T. Charlie Johnson did his PhD under the supervision of Michael Tinkham.']
Predicate: doctoralAdvisor

Triple: ['__subject__ A.T. Charlie Johnson __predicate__ nationality __object__ United_States']
Text: ['A T Charlie Johnson is a United States national.']
Predicate: nationality

Triple: ['__subject__ A.T. Charlie Johnson __predicate__ residence __object__ United_States']
Text: ['A.T. Charlie Johnson resides in the United States.']
Predicate: residence

Triple: ['__subject__ ACM Transactions on Information Systems __predicate__ codenCode __object__ ATISET']
Text: ['ATISET is the CODEN code for ACM Transactions on Information Systems.']
Predicate: codenCode

Triple: ['__subject__ ACM Transactions on Information Systems __predicate__ issnNumber __object__ 1046-8188']
Text: ['The ISSN number of ACM Transactions on Information Systems is 1046-8188.']
Predicate: issnNumber

Triple: ['__subject__ ACM Transactions on Information Systems __predicate__ issnNumber __object__ 1558-2868']
Text: ['ACM Transactions on Information Systems has the ISSN number 1558-2868.']
Predicate: issnNumber

Triple: ['__subject__ ACM Transactions on Information Systems __predicate__ LCCN number __object__ 89646863']
Text: ['89646863 is the LCCN number of ACM Transactions on Information Systems.']
Predicate: LCCN number

Triple: ['__subject__ ACM Transactions on Information Systems __predicate__ abbreviation __object__ ACM Trans. Inf. Syst.']
Text: ['ACM Transactions on Information Systems has the abbreviation of ACM Trans. Inf. Syst.']
Predicate: abbreviation

Triple: ['__subject__ ACM Transactions on Information Systems __predicate__ academicDiscipline __object__ Computer_science']
Text: ['ACM Transactions on Information Systems is part of the academic Discipline of Computer Science.']
Predicate: academicDiscipline

Triple: ['__subject__ ACM Transactions on Information Systems __predicate__ publisher __object__ Association_for_Computing_Machinery']
Text: ['Association for Computing Machinery is the publisher of ACM Transactions on information Systems.']
Predicate: publisher

Triple: ['__subject__ AIDS (journal) __predicate__ issnNumber __object__ 0269-9370']
Text: ['ISSN number 0269-9370 is the AIDS journal.']
Predicate: issnNumber

Triple: ['__subject__ AIDS (journal) __predicate__ issnNumber __object__ 1473-5571']
Text: ['AIDS journal has the ISSN number 1473-5571.']
Predicate: issnNumber

Triple: ['__subject__ AIDS (journal) __predicate__ LCCN number __object__ 90640840']
Text: ['The AIDS journal has the LCCN number 90640840.']
Predicate: LCCN number

Triple: ['__subject__ AIDS (journal) __predicate__ academicDiscipline __object__ HIV']
Text: ['AIDS (journal) comes under the academic discipline HIV.']
Predicate: academicDiscipline

Triple: ['__subject__ AIDS (journal) __predicate__ academicDiscipline __object__ HIV/AIDS']
Text: ['The AIDS journal studies HIV/AIDS.']
Predicate: academicDiscipline

Triple: ['__subject__ AIDS (journal) __predicate__ firstPublicationYear __object__ 1987']
Text: ['AIDS (journal) was first published in 1987.']
Predicate: firstPublicationYear

Triple: ['__subject__ AIDS (journal) __predicate__ publisher __object__ Lippincott_Williams_&_Wilkins']
Text: ['The AIDS journal is published by Lippincott, Williams & Wilkins.']
Predicate: publisher

Triple: ['__subject__ AIP Advances __predicate__ codenCode __object__ AAIDBI']
Text: ['The coden code for AIP Advances is AAIDBI.']
Predicate: codenCode

Triple: ['__subject__ AIP Advances __predicate__ issnNumber __object__ 2158-3226']
Text: ['AIP Advances, ISSN number 2158-3226.']
Predicate: issnNumber

Triple: ['__subject__ AIP Advances __predicate__ abbreviation __object__ AIP Adv.']
Text: ['"AIP Adv." is the abbreviation of AIP Advances.']
Predicate: abbreviation

Triple: ['__subject__ AIP Advances __predicate__ academicDiscipline __object__ Physics']
Text: ['AIP Advances is devoted to the study of physics.']
Predicate: academicDiscipline

Triple: ['__subject__ AIP Advances __predicate__ editor __object__ Vincent H. Crespi, Bernard S. Gerstman, A.T. Charlie Johnson,  Masaaki Tanaka, Enge G. Wang']
Text: ['AIP Advances editors include the following: Vincent H. Crespi, Bernard S. Gerstman, A.T. Charlie Johnson, Masaaki Tanaka, Enge G. Wang.']
Predicate: editor

Triple: ['__subject__ AIP Advances __predicate__ editor __object__ A.T._Charlie_Johnson']
Text: ['A T Charlie Johnson is the editor of AIP Advances.']
Predicate: editor

Triple: ['__subject__ AIP Advances __predicate__ impactFactor __object__ 1.524']
Text: ['AIP Advances has the impact factor 1.524.']
Predicate: impactFactor

Triple: ['__subject__ AIP Advances __predicate__ publisher __object__ American_Institute_of_Physics']
Text: ['The American Institute of Physics publishes AIP Advances.']
Predicate: publisher

Triple: ['__subject__ A Fortress of Grey Ice __predicate__ isbnNumber __object__ 0-7653-0633-6']
Text: ['The ISBN number of the book A Fortress of Grey Ice is 0-7653-0633-6.']
Predicate: isbnNumber

Triple: ['__subject__ A Fortress of Grey Ice __predicate__ oclcNumber __object__ 51969173']
Text: ['The OCLC number of A Fortress of Grey Ice is 51969173.']
Predicate: oclcNumber

Triple: ['__subject__ A Fortress of Grey Ice __predicate__ author __object__ J._V._Jones']
Text: ['J.V. Jones authored A Fortress of Grey Ice.']
Predicate: author

Triple: ['__subject__ A Fortress of Grey Ice __predicate__ country __object__ United_States']
Text: ['A Fortress of Grey Ice is from the United States.']
Predicate: country

Triple: ['__subject__ A Fortress of Grey Ice __predicate__ language __object__ English_language']
Text: ['A Fortress of Grey Ice is written in the English language.']
Predicate: language

Triple: ['__subject__ A Fortress of Grey Ice __predicate__ mediaType __object__ Print']
Text: ['The book "A Fortress of Grey Ice" can be found in print.']
Predicate: mediaType

Triple: ['__subject__ A Fortress of Grey Ice __predicate__ numberOfPages __object__ 672']
Text: ['A Fortress of Grey Ice has 672 pages.']
Predicate: numberOfPages

Triple: ['__subject__ A Fortress of Grey Ice __predicate__ publisher __object__ Tor_Books']
Text: ['A Fortress of Grey Ice is published by Tor Books.']
Predicate: publisher

Triple: ['__subject__ A Glastonbury Romance __predicate__ isbnNumber __object__ 0-7156-3648-0']
Text: ['A Glastonbury Romance has the ISBN number 0-7156-3648-0.']
Predicate: isbnNumber

Triple: ['__subject__ A Glastonbury Romance __predicate__ libraryofCongressClassification __object__ PR6031.O867']
Text: ['The Library of Congress Classification of "A Glastonbury Romance" is PR6031.O867.']
Predicate: libraryofCongressClassification

Triple: ['__subject__ A Glastonbury Romance __predicate__ author __object__ John_Cowper_Powys']
Text: ['The author of A Glastonbury Romance is John Cowper Powys.']
Predicate: author

Triple: ['__subject__ A Glastonbury Romance __predicate__ followedBy __object__ Weymouth_Sands']
Text: ['The book "A Glastonbury Romance" was followed by "Weymouth Sands".']
Predicate: followedBy

Triple: ['__subject__ A Glastonbury Romance __predicate__ mediaType __object__ Print']
Text: ['A Glastonbury Romance is in print.']
Predicate: mediaType

Triple: ['__subject__ A Glastonbury Romance __predicate__ numberOfPages __object__ 1174']
Text: ['A Glastonbury Romance has 1174 pages.']
Predicate: numberOfPages

Triple: ['__subject__ A Glastonbury Romance __predicate__ precededBy __object__ Wolf_Solent']
Text: ['A Glastonbury Romance was preceded By Wolf Solent.']
Predicate: precededBy

Triple: ['__subject__ A Glastonbury Romance __predicate__ publisher __object__ Simon_&_Schuster']
Text: ['A Glastonbury Romance is published by Simon & Schuster.']
Predicate: publisher

Triple: ['__subject__ A Glastonbury Romance __predicate__ publisher __object__ The_Bodley_Head']
Text: ['A Glastonbury Romance is published by The Bodley Head.']
Predicate: publisher

Triple: ['__subject__ A Long Long Way __predicate__ oclcNumber __object__ 57392246']
Text: ['The OCLC number of A Long Long Way is 57392246.']
Predicate: oclcNumber

Triple: ['__subject__ A Long Long Way __predicate__ country __object__ Ireland']
Text: ['A Long Long Way comes from Ireland.']
Predicate: country

Triple: ['__subject__ A Long Long Way __predicate__ followedBy __object__ The_Secret_Scripture']
Text: ['The novel A Long Long Way was followed by The Secret Scripture.']
Predicate: followedBy

Triple: ['__subject__ A Long Long Way __predicate__ mediaType __object__ Print  & Paperback']
Text: ['A Long Long Way was published in Print & Paperback.']
Predicate: mediaType

Triple: ['__subject__ A Long Long Way __predicate__ mediaType __object__ Hardcover']
Text: ['A Long Long Way is available in hardcover.']
Predicate: mediaType

Triple: ['__subject__ A Long Long Way __predicate__ numberOfPages __object__ 292']
Text: ['A Long Long Way is 292 pages long.']
Predicate: numberOfPages

Triple: ['__subject__ A Long Long Way __predicate__ precededBy __object__ Annie_Dunne']
Text: ['Annie Dunne preceded A Long Long Way.']
Predicate: precededBy

Triple: ['__subject__ A Long Long Way __predicate__ publisher __object__ Viking_Press']
Text: ['The book "A Long Long Way was published by Viking Press.']
Predicate: publisher

Triple: ['__subject__ A Loyal Character Dancer __predicate__ oclcNumber __object__ 49805501']
Text: ['The OCLC number of A Loyal Character Dancer is 49805501.']
Predicate: oclcNumber

Triple: ['__subject__ A Loyal Character Dancer __predicate__ author __object__ Qiu_Xiaolong']
Text: ['A Loyal Character Dancer was penned by Qiu Xiaolong.']
Predicate: author

Triple: ['__subject__ A Loyal Character Dancer __predicate__ country __object__ United_States']
Text: ['A Loyal Character Dancer is published in the United States.']
Predicate: country

Triple: ['__subject__ A Loyal Character Dancer __predicate__ language __object__ English_language']
Text: ['A Loyal Character Dancer is written in English.']
Predicate: language

Triple: ['__subject__ A Loyal Character Dancer __predicate__ mediaType __object__ Print']
Text: ['A Loyal Character Dancer is in print.']
Predicate: mediaType

Triple: ['__subject__ A Loyal Character Dancer __predicate__ mediaType __object__ Hardcover']
Text: ['A Loyal Character Dancer can be found in hardcover.']
Predicate: mediaType

Triple: ['__subject__ A Loyal Character Dancer __predicate__ numberOfPages __object__ 360']
Text: ['A loyal Character Dancer is 360 pages long.']
Predicate: numberOfPages

Triple: ['__subject__ A Loyal Character Dancer __predicate__ publisher __object__ Soho_Press']
Text: ['A Loyal Character Dancer is published by Soho Press.']
Predicate: publisher

Triple: ['__subject__ A Severed Wasp __predicate__ isbnNumber __object__ 0-374-26131-8']
Text: ['A Severed Wasp has an ISBN number of "0-374-26131-8".']
Predicate: isbnNumber

Triple: ['__subject__ A Severed Wasp __predicate__ libraryofCongressClassification __object__ PS3523.E55 S4 1982']
Text: ['PS3523.E55 S4 1982 is the Library of Congress Classification of "A Severed Wasp".']
Predicate: libraryofCongressClassification

Triple: ['__subject__ A Severed Wasp __predicate__ oclcNumber __object__ 8805735']
Text: ['A Severed Wasp was assigned the OCLC number 8805735.']
Predicate: oclcNumber

Triple: ['__subject__ A Severed Wasp __predicate__ country __object__ United_States']
Text: ['A Severed Wasp is from the United States.']
Predicate: country

Triple: ['__subject__ A Severed Wasp __predicate__ language __object__ English_language']
Text: ['A Severed Wasp was written in the English language.']
Predicate: language

Triple: ['__subject__ A Severed Wasp __predicate__ mediaType __object__ Print']
Text: ['A severed wasp can be found in print.']
Predicate: mediaType

Triple: ['__subject__ A Severed Wasp __predicate__ mediaType __object__ Hardcover']
Text: ['A Severed Wasp is a hardcover book.']
Predicate: mediaType

Triple: ['__subject__ A Severed Wasp __predicate__ numberOfPages __object__ 388']
Text: ['388 is the number of pages A severed Wasp has.']
Predicate: numberOfPages

Triple: ['__subject__ A Severed Wasp __predicate__ publisher __object__ Farrar,_Straus_and_Giroux']
Text: ['Farrar, Straus and Giroux publish A Severed Wasp.']
Predicate: publisher

Triple: ['__subject__ A Wizard of Mars __predicate__ isbnNumber __object__ 978-0-15-204770-2']
Text: ['A Wizard of Mars ISBN number is "978-0-15-204770-2".']
Predicate: isbnNumber

Triple: ['__subject__ A Wizard of Mars __predicate__ oclcNumber __object__ 318875313']
Text: ['The OCLC number of A Wizard of Mars is 318875313.']
Predicate: oclcNumber

Triple: ['__subject__ A Wizard of Mars __predicate__ country __object__ United_States']
Text: ['" A Wizard of Mars was Published in the United States ".']
Predicate: country

Triple: ['__subject__ A Wizard of Mars __predicate__ mediaType __object__ Print']
Text: ['A Wizard of Mars is available in print form.']
Predicate: mediaType

Triple: ['__subject__ A Wizard of Mars __predicate__ mediaType __object__ Hardcover']
Text: ['A Wizard of Mars is published in Hardcover.']
Predicate: mediaType

Triple: ['__subject__ A Wizard of Mars __predicate__ numberOfPages __object__ 560']
Text: ['A wizard of Mars is 560 pages long.']
Predicate: numberOfPages

Triple: ['__subject__ A Wizard of Mars __predicate__ precededBy __object__ Wizards_at_War']
Text: ['A Wizard of Mars is preceded by Wizards at War.']
Predicate: precededBy

Triple: ['__subject__ A Wizard of Mars __predicate__ publisher __object__ Harcourt_(publisher)']
Text: ['A Wizard of Mars was published by Harcourt.']
Predicate: publisher

Triple: ['__subject__ Abhandlungen aus dem Mathematischen Seminar der Universität Hamburg __predicate__ codenCode __object__ AMHAAJ']
Text: ['Abhandlungen aus dem Mathematischen Seminar der Universität Hamburg has the CODEN code AMHAAJ.']
Predicate: codenCode

Triple: ['__subject__ Abhandlungen aus dem Mathematischen Seminar der Universität Hamburg __predicate__ issnNumber __object__ 1865-8784']
Text: ['Abhandlungen aus dem Mathematischen Seminar der Universität Hamburg has the ISSN number 1865-8784.']
Predicate: issnNumber

Triple: ['__subject__ Abhandlungen aus dem Mathematischen Seminar der Universität Hamburg __predicate__ abbreviation __object__ Abh. Math. Semin. Univ. Hambg.']
Text: ['"Abh.Math.Semin.Univ.Hambg" is the abbreviation for Abhandlungen aus dem Mathematischen Seminar der Universität Hamburg.']
Predicate: abbreviation

Triple: ['__subject__ Abhandlungen aus dem Mathematischen Seminar der Universität Hamburg __predicate__ academicDiscipline __object__ Pure_mathematics']
Text: ['Abhandlungen aus dem Mathematischen Seminar der Universität Hamburg is concerned with the academic discipline of Pure Mathematics.']
Predicate: academicDiscipline

Triple: ['__subject__ Abhandlungen aus dem Mathematischen Seminar der Universität Hamburg __predicate__ publisher __object__ Springer_Science+Business_Media']
Text: ['Springer Science & Business Media is the publisher of Abhandlungen aus dem Mathematischen Seminar der Universitat Hamburg.']
Predicate: publisher

Triple: ['__subject__ Above the Veil __predicate__ isbnNumber __object__ 0-439-17685-9']
Text: ['The ISBN number of Above the Veil is 0-439-17685-9.']
Predicate: isbnNumber

Triple: ['__subject__ Above the Veil __predicate__ oclcNumber __object__ 46451790']
Text: ['Above the Veil has the OCLC number 46451790.']
Predicate: oclcNumber

Triple: ['__subject__ Above the Veil __predicate__ country __object__ Australians']
Text: ['Above the Veil is from the country of Australia.']
Predicate: country

Triple: ['__subject__ Above the Veil __predicate__ followedBy __object__ Into_Battle_(novel)']
Text: ['The novel "Into Battle" followed "Above the Veil".']
Predicate: followedBy

Triple: ['__subject__ Above the Veil __predicate__ language __object__ English_language']
Text: ['Above the Veil is written in English.']
Predicate: language

Triple: ['__subject__ Above the Veil __predicate__ numberOfPages __object__ 248']
Text: ['Above the Veil is 248 pages long.']
Predicate: numberOfPages

Triple: ['__subject__ Above the Veil __predicate__ precededBy __object__ Aenir']
Text: ['Above the Veil was preceded By Aenir.']
Predicate: precededBy

Triple: ['__subject__ Acta Mathematica Hungarica __predicate__ codenCode __object__ AMAHE9']
Text: ['The Acta Mathematica Hungarica CODEN code is "AMAHE9".']
Predicate: codenCode

Triple: ['__subject__ Acta Mathematica Hungarica __predicate__ issnNumber __object__ 0236-5294']
Text: ['The Acta Mathematica Hungarica has the ISSN number 0236-5294.']
Predicate: issnNumber

Triple: ['__subject__ Acta Mathematica Hungarica __predicate__ issnNumber __object__ 1588-2632']
Text: ['Acta Mathematica Hungarica is ISSN number 1588-2632.']
Predicate: issnNumber

Triple: ['__subject__ Acta Mathematica Hungarica __predicate__ LCCN number __object__ 83646315']
Text: ['83646315 is the LCCN number for Acta Mathematica Hungarica.']
Predicate: LCCN number

Triple: ['__subject__ Acta Mathematica Hungarica __predicate__ publisher __object__ Springer_Science+Business_Media']
Text: ['Acta Mathematica Hungarica is published by Springer Science and Business Media.']
Predicate: publisher

Triple: ['__subject__ Acta Palaeontologica Polonica __predicate__ issnNumber __object__ 1732-2421']
Text: ['Acta Palaeontologica Polonica has the ISSN number 1732-2421.']
Predicate: issnNumber

Triple: ['__subject__ Acta Palaeontologica Polonica __predicate__ LCCN number __object__ 60040714']
Text: ['The Acta Palaeontologica Polonica has a LCCN number of 60040714.']
Predicate: LCCN number

Triple: ['__subject__ Acta Palaeontologica Polonica __predicate__ abbreviation __object__ Acta Palaeontol. Pol.']
Text: ['Acta Palaeontologica Polonica is abbreviated to Acta Palaeontol. Pol.']
Predicate: abbreviation

Triple: ['__subject__ Acta Palaeontologica Polonica __predicate__ academicDiscipline __object__ Paleobiology']
Text: ['Paleobiology is the academic discipline of Acta Palaeontologica Polonica.']
Predicate: academicDiscipline

Triple: ['__subject__ Acta Palaeontologica Polonica __predicate__ academicDiscipline __object__ Paleontology']
Text: ['Acta Palaeontologica Polonica is academically focused on Paleontology.']
Predicate: academicDiscipline

Triple: ['__subject__ Acta Palaeontologica Polonica __predicate__ publisher __object__ Institute of Paleobiology, Polish Academy of Sciences']
Text: ['Acta Palaeontologica Polonica was published by the Institute of Paleobiology, Polish Academy of Sciences.']
Predicate: publisher

Triple: ['__subject__ Acta Palaeontologica Polonica __predicate__ publisher __object__ Polish_Academy_of_Sciences']
Text: ['Polish Academy of Sciences is the publisher of Acta Palaeontologica Polonica.']
Predicate: publisher

Triple: ['__subject__ Addiction (journal) __predicate__ codenCode __object__ ADICE5']
Text: ['Addiction (Journal) has the CODEN Code ADICE5.']
Predicate: codenCode

Triple: ['__subject__ Addiction (journal) __predicate__ issnNumber __object__ 0965-2140']
Text: ['The journal Addiction had the ISSN number 0965-2140.']
Predicate: issnNumber

Triple: ['__subject__ Addiction (journal) __predicate__ issnNumber __object__ 1360-0443']
Text: ['The journal Addiction has the ISSN number 1360-0443.']
Predicate: issnNumber

Triple: ['__subject__ Addiction (journal) __predicate__ abbreviation __object__ Addiction']
Text: ['Addiction is the abbreviated version of the Addiction journal.']
Predicate: abbreviation

Triple: ['__subject__ Addiction (journal) __predicate__ publisher __object__ Wiley-Blackwell on behalf of the Society for the Study of Addiction']
Text: ['The Addiction journal is published by Wiley-Blackwell on behalf of the Society for the Study of Addiction.']
Predicate: publisher

Triple: ['__subject__ Administrative Science Quarterly __predicate__ codenCode __object__ ASCQAG']
Text: ['The Administrative Science Quarterly has a Coden code of "ASCQAG".']
Predicate: codenCode

Triple: ['__subject__ Administrative Science Quarterly __predicate__ issnNumber __object__ 0001-8392']
Text: ['Administrative Science Quarterly has the ISSN number of 0001-8392.']
Predicate: issnNumber

Triple: ['__subject__ Administrative Science Quarterly __predicate__ oclcNumber __object__ 1461102']
Text: ['Administrative Science Quarterly has the OCLC number 1461102.']
Predicate: oclcNumber

Triple: ['__subject__ Administrative Science Quarterly __predicate__ abbreviation __object__ Admin. Sci. Q.']
Text: ['Administrative Science Quarterly is abbreviated to Admin. Sci. Q.']
Predicate: abbreviation

Triple: ['__subject__ Administrative Science Quarterly __predicate__ academicDiscipline __object__ Management']
Text: ['The Administrative Science Quarterly comes under the academic discipline of Management.']
Predicate: academicDiscipline

Triple: ['__subject__ Administrative Science Quarterly __predicate__ publisher __object__ SAGE Publications for the Samuel Curtis Johnson Graduate School of Management, Cornell University']
Text: ['Administrative Science Quarterly is published by SAGE Publications for the Samuel Curtis Johnson Graduate School of Management, Cornell University.']
Predicate: publisher

Triple: ['__subject__ Administrative Science Quarterly __predicate__ publisher __object__ Cornell_University']
Text: ['Cornell University is the publisher of the Administrative Science Quarterly.']
Predicate: publisher

Triple: ['__subject__ Administrative Science Quarterly __predicate__ publisher __object__ SAGE_Publications']
Text: ['SAGE Publications is the publisher of Administrative Science Quarterly.']
Predicate: publisher

Triple: ['__subject__ Aenir __predicate__ isbnNumber __object__ 0-439-17684-0']
Text: ['The ISBN number of Aenir is 0-439-17684-0.']
Predicate: isbnNumber

Triple: ['__subject__ Aenir __predicate__ author __object__ Garth_Nix']
Text: ['Aenir was written by Garth Nix.']
Predicate: author

Triple: ['__subject__ Aenir __predicate__ country __object__ Australians']
Text: ['The book Aenir was written by Australians.']
Predicate: country

Triple: ['__subject__ Aenir __predicate__ followedBy __object__ Above_the_Veil']
Text: ['The novel Aenir was followed by Above the Veil.']
Predicate: followedBy

Triple: ['__subject__ Aenir __predicate__ mediaType __object__ Print']
Text: ['Aenir is available in print.']
Predicate: mediaType

Triple: ['__subject__ Aenir __predicate__ mediaType __object__ Paperback']
Text: ['Aenir is a paperback.']
Predicate: mediaType

Triple: ['__subject__ Aenir __predicate__ numberOfPages __object__ 233']
Text: ['Aenir is a book that has 233 pages.']
Predicate: numberOfPages

Triple: ['__subject__ Aenir __predicate__ precededBy __object__ Castle_(novel)']
Text: ['The novel Aenir was preceded by the novel Castle.']
Predicate: precededBy

Triple: ['__subject__ Alcatraz Versus the Evil Librarians __predicate__ isbnNumber __object__ 0-439-92550-9']
Text: ['Alcatraz Versus the Evil Librarians has the ISBN number 0-439-92550-9.']
Predicate: isbnNumber

Triple: ['__subject__ Alcatraz Versus the Evil Librarians __predicate__ author __object__ Brandon_Sanderson']
Text: ['Alcatraz Versus the Evil Librarians was written by Brandon Sanderson.']
Predicate: author

Triple: ['__subject__ Alcatraz Versus the Evil Librarians __predicate__ genre __object__ Fantasy_literature']
Text: ['Alcatraz Versus the Evil Librarians is in the genre of Fantasy literature.']
Predicate: genre

Triple: ['__subject__ Alcatraz Versus the Evil Librarians __predicate__ literaryGenre __object__ Fantasy_literature']
Text: ['The literary genre of Alcatraz Versus the Evil Librarians is fantasy literature.']
Predicate: literaryGenre

Triple: ['__subject__ Alcatraz Versus the Evil Librarians __predicate__ mediaType __object__ Print']
Text: ['The book "Alcatraz Versus the Evil Librarians is in print.']
Predicate: mediaType

Triple: ['__subject__ Alcatraz Versus the Evil Librarians __predicate__ mediaType __object__ Hardcover']
Text: ['Alcatraz Versus the Evil Librarians is published in Hardcover.']
Predicate: mediaType

Triple: ['__subject__ Alcatraz Versus the Evil Librarians __predicate__ numberOfPages __object__ 320']
Text: ['Alcatraz Versus the Evil Librarians is 320 pages long.']
Predicate: numberOfPages

Triple: ["__subject__ Alcatraz Versus the Scrivener's Bones __predicate__ author __object__ Brandon_Sanderson"]
Text: ["Alcatraz Versus the Scrivener's Bones was authored by Brandon Sanderson."]
Predicate: author

Triple: ['__subject__ American Journal of Mathematics __predicate__ eissnNumber __object__ 1080']
Text: ['The American Journal of Math EISSN number is 1080.']
Predicate: eissnNumber

Triple: ['__subject__ American Journal of Mathematics __predicate__ issnNumber __object__ 0002-9327']
Text: ['The American Journal of Mathematics has an ISSN number of 0002-9327.']
Predicate: issnNumber

Triple: ['__subject__ American Journal of Mathematics __predicate__ issnNumber __object__ 1080-6377']
Text: ['The ISSN number of the American Journal of Mathematics is 1080-6377.']
Predicate: issnNumber

Triple: ['__subject__ American Journal of Mathematics __predicate__ oclcNumber __object__ 1480153']
Text: ['American Journal of Mathematics has the OCLC number 1480153.']
Predicate: oclcNumber

Triple: ['__subject__ American Journal of Mathematics __predicate__ abbreviation __object__ Am. J. Math.']
Text: ['The American Journal of Mathematics is also known by the abbreviated title of Am. J. Math.']
Predicate: abbreviation

Triple: ['__subject__ American Journal of Mathematics __predicate__ firstPublicationYear __object__ 1878']
Text: ['The American Journal of Mathematics was first published in 1878.']
Predicate: firstPublicationYear

Triple: ['__subject__ American Journal of Mathematics __predicate__ frequency __object__ Bimonthly']
Text: ['The American Journal of Mathematics is published bimonthly.']
Predicate: frequency

Triple: ['__subject__ American Journal of Mathematics __predicate__ publisher __object__ Johns_Hopkins_University_Press']
Text: ['The American Journal of Mathematics was published by Johns Hopkins University Press.']
Predicate: publisher

Triple: ['__subject__ Annie Dunne __predicate__ followedBy __object__ A_Long_Long_Way']
Text: ['The novel Annie Dunne is followed by A Long Long Way.']
Predicate: followedBy

Triple: ['__subject__ Association for Computing Machinery __predicate__ headquarter __object__ New_York_City']
Text: ['New York City is where the Association for Computing machinery headquarters is located.']
Predicate: headquarter

Triple: ['__subject__ Association for Computing Machinery __predicate__ leader __object__ Alexander_L._Wolf']
Text: ['Alexander L. Wolf is a leader of the Association for Computing Machinery.']
Predicate: leader

Triple: ['__subject__ Brandon Sanderson __predicate__ birthPlace __object__ Lincoln,_Nebraska']
Text: ['Brandon Sanderson was born in Lincoln Nebraska.']
Predicate: birthPlace

Triple: ['__subject__ Cornell University __predicate__ affiliation __object__ Association_of_American_Universities']
Text: ['Cornell University is affiliated with the Association of American Universities.']
Predicate: affiliation

Triple: ['__subject__ Cornell University __predicate__ affiliation __object__ Association_of_Public_and_Land-grant_Universities']
Text: ['Cornell University is affiliated with the Association of Public and Land-grant Universities.']
Predicate: affiliation

Triple: ['__subject__ Cornell University __predicate__ city __object__ Ithaca,_New_York']
Text: ['Cornell University is in the city of Ithaca, New York.']
Predicate: city

Triple: ['__subject__ Cornell University __predicate__ president __object__ Elizabeth_Garrett']
Text: ['The president of Cornell University is Elizabeth Garrett.']
Predicate: president

Triple: ['__subject__ Cornell University __predicate__ state __object__ New_York']
Text: ['Cornell University is in the state of New York.']
Predicate: state

Triple: ['__subject__ English language __predicate__ spokenIn __object__ Great_Britain']
Text: ['The English language is spoken in Great Britain.']
Predicate: spokenIn

Triple: ['__subject__ Eric Flint __predicate__ influencedBy __object__ Robert_A._Heinlein']
Text: ['Eric Flint was influenced by Robert A. Heinlein.']
Predicate: influencedBy

Triple: ['__subject__ Grantville Gazette II __predicate__ precededBy __object__ The_Grantville_Gazette']
Text: ['Grantville Gazette II is preceded by The Grantville Gazette.']
Predicate: precededBy

Triple: ['__subject__ HIV __predicate__ family __object__ Orthoretrovirinae']
Text: ['HIV is part of the Orthoretrovirinae family.']
Predicate: family

Triple: ['__subject__ HIV __predicate__ family __object__ Retrovirus']
Text: ['HIV comes under the family of Retroviruses.']
Predicate: family

Triple: ['__subject__ Into Battle (novel) __predicate__ country __object__ Australians']
Text: ['The novel Into Battle is published by Australians.']
Predicate: country

Triple: ['__subject__ Into Battle (novel) __predicate__ followedBy __object__ The_Violet_Keystone']
Text: ['The novel Into Battle is followed by The Violet Keystone.']
Predicate: followedBy

Triple: ['__subject__ Into Battle (novel) __predicate__ precededBy __object__ Above_the_Veil']
Text: ['The novel Into Battle is preceded by Above the Veil.']
Predicate: precededBy

Triple: ['__subject__ Ireland __predicate__ ethnicGroup __object__ White_people']
Text: ['White people are an ethnic group within Ireland.']
Predicate: ethnicGroup

Triple: ['__subject__ Ireland __predicate__ largestCity __object__ Dublin']
Text: ['The largest city in Ireland is Dublin.']
Predicate: largestCity

Triple: ['__subject__ Ireland __predicate__ location __object__ Europe']
Text: ['Ireland is located within Europe.']
Predicate: location

Triple: ['__subject__ John Cowper Powys __predicate__ birthPlace __object__ Shirley,_Derbyshire']
Text: ['John Cowper Powys was born in Shirley, Derbyshire.']
Predicate: birthPlace

Triple: ['__subject__ John Cowper Powys __predicate__ deathPlace __object__ Blaenau_Ffestiniog']
Text: ['John Cowper Powys died in Blaenau Ffestiniog.']
Predicate: deathPlace

Triple: ['__subject__ John Cowper Powys __predicate__ notableWork __object__ Owen_Glendower_(novel)']
Text: ['One of John Cowper Powys notable works is Owen Glendower.']
Predicate: notableWork

Triple: ['__subject__ John Cowper Powys __predicate__ notableWork __object__ Porius:_A_Romance_of_the_Dark_Ages']
Text: ['A notable work of John Cowper Powys is Porius: A Romance of the Dark Ages.']
Predicate: notableWork

Triple: ['__subject__ Johns Hopkins University Press __predicate__ country __object__ United_States']
Text: ['Johns Hopkins University Press is located in the United States.']
Predicate: country

Triple: ['__subject__ Johns Hopkins University Press __predicate__ parentCompany __object__ Johns_Hopkins_University']
Text: ['Johns Hopkins University is the parent company of the Johns Hopkins University Press.']
Predicate: parentCompany

Triple: ['__subject__ Lippincott Williams & Wilkins __predicate__ country __object__ United_States']
Text: ['The United States is the country of origin of Lippincott, Williams & Wilkins.']
Predicate: country

Triple: ['__subject__ Lippincott Williams & Wilkins __predicate__ parentCompany __object__ Wolters_Kluwer']
Text: ['Wolters Kluwer is the parent company of Lippincott Williams & Wilkins.']
Predicate: parentCompany

Triple: ["__subject__ Madeleine L'Engle __predicate__ influencedBy __object__ George_MacDonald"]
Text: ["Madeleine L'Engle was influenced by George MacDonald."]
Predicate: influencedBy

Triple: ['__subject__ Polish Academy of Sciences __predicate__ headquarter __object__ Warsaw']
Text: ['The headquarters of the Polish Academy of Sciences is in Warsaw.']
Predicate: headquarter

Triple: ['__subject__ Polish Academy of Sciences __predicate__ regionServed __object__ Poland']
Text: ['The Polish Academy of Sciences serves Poland.']
Predicate: regionServed

Triple: ['__subject__ Ring of Fire II __predicate__ language __object__ English_language']
Text: ['Ring of Fire II is written in English.']
Predicate: language

Triple: ['__subject__ Ring of Fire II __predicate__ precededBy __object__ 1634:_The_Bavarian_Crisis']
Text: ['1634: The Bavarian Crisis was written prior to "Ring of Fire II".']
Predicate: precededBy

Triple: ['__subject__ SAGE Publications __predicate__ founder __object__ Sara_Miller_McCune']
Text: ['Sara Miller McCune is the founder of SAGE publications.']
Predicate: founder

Triple: ['__subject__ Springer Science+Business Media __predicate__ founder __object__ Julius_Springer']
Text: ['Julius Springer is the founder of Springer Science and Business Media.']
Predicate: founder

Triple: ['__subject__ The Bodley Head __predicate__ founder __object__ Charles_Elkin_Mathews']
Text: ['The Bodley Head was founded by Charles Elkin Mathews.']
Predicate: founder

Triple: ['__subject__ The Secret Scripture __predicate__ precededBy __object__ A_Long_Long_Way']
Text: ['A Long Long Way came before the book "The Secret Scripture".']
Predicate: precededBy

Triple: ['__subject__ Tor Books __predicate__ parentCompany __object__ Macmillan_Publishers']
Text: ['Macmillan Publishers is the parent company of Tor Books.']
Predicate: parentCompany

Triple: ['__subject__ United Kingdom __predicate__ capital __object__ London']
Text: ['London is the capital city in the UK.']
Predicate: capital

Triple: ['__subject__ United Kingdom __predicate__ demonym __object__ British_people']
Text: ['British people live in the United Kingdom.']
Predicate: demonym

Triple: ['__subject__ United Kingdom __predicate__ language __object__ English_language']
Text: ['English is the language spoken in the United Kingdom.']
Predicate: language

Triple: ['__subject__ United Kingdom __predicate__ leader __object__ David_Cameron']
Text: ['David Cameron is a leader in the UK.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ capital __object__ Washington,_D.C.']
Text: ['The capital of the United States is Washington, D.C.']
Predicate: capital

Triple: ['__subject__ United States __predicate__ demonym __object__ Americans']
Text: ['Americans inhabit the U.S.']
Predicate: demonym

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ African_Americans']
Text: ['In the United States one of the ethnic groups is African American.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ Native_Americans_in_the_United_States']
Text: ['Native Americans are an ethnic group in the U.S.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ ethnicGroup __object__ White_Americans']
Text: ['White Americans are an ethnic group in the U.S.']
Predicate: ethnicGroup

Triple: ['__subject__ United States __predicate__ leader __object__ Barack_Obama']
Text: ['The leader of the United States is Barack Obama.']
Predicate: leader

Triple: ['__subject__ United States __predicate__ leaderTitle __object__ President_of_the_United_States']
Text: ['The leader of the United States is known as the President.']
Predicate: leaderTitle

Triple: ['__subject__ Viking Press __predicate__ country __object__ United_States']
Text: ['Viking Press is in the United States.']
Predicate: country

Triple: ['__subject__ Viking Press __predicate__ parentCompany __object__ Penguin_Random_House']
Text: ['Penguin Random House is the parent company of Viking Press.']
Predicate: parentCompany

Triple: ['__subject__ Weymouth Sands __predicate__ author __object__ John_Cowper_Powys']
Text: ["Weymouth Sands' author was John Cowper Powys."]
Predicate: author

Triple: ['__subject__ Weymouth Sands __predicate__ followedBy __object__ Maiden_Castle_(novel)']
Text: ['Maiden Castle (novel) was preceded by Weymouth Sands.']
Predicate: followedBy

Triple: ['__subject__ Wiley-Blackwell __predicate__ parentCompany __object__ John_Wiley_&_Sons']
Text: ['The parent company of Wiley-Blackwell is John Wiley & Sons.']
Predicate: parentCompany

Triple: ['__subject__ Wizards at War __predicate__ publisher __object__ Harcourt_(publisher)']
Text: ['Wizards at War was published by Harcourt (publishers).']
Predicate: publisher

Triple: ['__subject__ Wolf Solent __predicate__ followedBy __object__ A_Glastonbury_Romance']
Text: ['Wolf Solent was followed by A Glastonbury Romance.']
Predicate: followedBy

